
ULTRASONIC_LAYER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002308  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08002438  08002438  00003438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800244c  0800244c  00003454  2**0
                  CONTENTS
  4 .ARM          00000000  0800244c  0800244c  00003454  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800244c  08002454  00003454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800244c  0800244c  0000344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002450  08002450  00003450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00003454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000000  08002454  00004000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08002454  00004140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003454  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b56  00000000  00000000  0000347d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b2e  00000000  00000000  00004fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e0  00000000  00000000  00005b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000215  00000000  00000000  00005de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000026d0  00000000  00000000  00005ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000285c  00000000  00000000  000086cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000acbb  00000000  00000000  0000af29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00015be4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a80  00000000  00000000  00015c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000166a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08002420 	.word	0x08002420

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08002420 	.word	0x08002420

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	@ 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <MAFIO_voidInitAFIO>:
#include "../Inc/MCAL/AFIO/AFIO_private.h"
#include "../Inc/MCAL/AFIO/AFIO_config.h"

#include "../Inc/MCAL/RCC/RCC_interface.h"

void MAFIO_voidInitAFIO(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    MRCC_voidInitClock();
 8000950:	f000 ffb8 	bl	80018c4 <MRCC_voidInitClock>
    MRCC_voidEnableClock(RCC_APB2,0);
 8000954:	2100      	movs	r1, #0
 8000956:	2002      	movs	r0, #2
 8000958:	f000 ff74 	bl	8001844 <MRCC_voidEnableClock>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <Mdisable_JTAG>:

void Mdisable_JTAG(void){
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	AFIO->MAPR |= (1<<26);
 8000964:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <Mdisable_JTAG+0x18>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4a03      	ldr	r2, [pc, #12]	@ (8000978 <Mdisable_JTAG+0x18>)
 800096a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800096e:	6053      	str	r3, [r2, #4]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40010000 	.word	0x40010000

0800097c <CAN_voidInit>:


*/

void CAN_voidInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    /**  Enable the CAN interface clock **/
    //RCC_voidEnableClock(RCC_APB1, APB1_CAN_EN);
    MRCC_voidEnableClock(RCC_APB1,CAN_EN);
 8000980:	2119      	movs	r1, #25
 8000982:	2001      	movs	r0, #1
 8000984:	f000 ff5e 	bl	8001844 <MRCC_voidEnableClock>
                        CAN_TX mapped to PB9    */
    //RCC_voidEnableClock(RCC_APB2, APB2_AFIO_EN);
    //AFIO_voidRemapPeripheralPins (CAN_REMAP);
    /* Enable the clock for the CAN GPIOs */
   // RCC_voidEnableClock(RCC_APB2, APB2_GPIOA_EN);
    MRCC_voidEnableClock(RCC_APB2,PORTA_EN);
 8000988:	2102      	movs	r1, #2
 800098a:	2002      	movs	r0, #2
 800098c:	f000 ff5a 	bl	8001844 <MRCC_voidEnableClock>
    MDIO_INIT(PORTA);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 f9e5 	bl	8000d60 <MDIO_INIT>
    MDIO_voidSetDirection(PORTA,PIN11, INPUT_FLOATING);
 8000996:	2204      	movs	r2, #4
 8000998:	210b      	movs	r1, #11
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f9f2 	bl	8000d84 <MDIO_voidSetDirection>
    MDIO_voidSetDirection(PORTA,PIN12, AF_2MHZ_PUSH_PULL);
 80009a0:	220a      	movs	r2, #10
 80009a2:	210c      	movs	r1, #12
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f9ed 	bl	8000d84 <MDIO_voidSetDirection>

   // GPIO_voidSetPinDirection(GPIOA, PIN11, INPUT_FLOATING); //RX
    //GPIO_voidSetPinDirection(GPIOA, PIN12, OUTPUT_SPEED_2MHZ_AFPP); //TX
    /**  exit CAN sleep mode **/
    /* CLEAR SLEEP bit (SLEEP) */
    CLR_BIT(CAN->MCR,1);
 80009aa:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a26      	ldr	r2, [pc, #152]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009b0:	f023 0302 	bic.w	r3, r3, #2
 80009b4:	6013      	str	r3, [r2, #0]
    /* wait to exit sleep mode */
    while (!(GET_BIT(CAN->MSR,1) == 0));
 80009b6:	bf00      	nop
 80009b8:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1f9      	bne.n	80009b8 <CAN_voidInit+0x3c>
     /**  Set CAN Initialization mode **/
    /* SET Initialization request BIT (INRQ) */
    SET_BIT(CAN->MCR,0);
 80009c4:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6013      	str	r3, [r2, #0]
    /* wait to enter in Initialization mode */
    while(!(GET_BIT(CAN->MSR,0) == 1));
 80009d0:	bf00      	nop
 80009d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d1f9      	bne.n	80009d2 <CAN_voidInit+0x56>
#if TransmitFifoPriority == ENABLE
     /* by the request order */
        SET_BIT(CAN->MCR,2); //TXFP
#else
     /* by the identifier of the message */
        CLR_BIT(CAN->MCR,2); //TXFP
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a19      	ldr	r2, [pc, #100]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009e4:	f023 0304 	bic.w	r3, r3, #4
 80009e8:	6013      	str	r3, [r2, #0]
         Once a receive FIFO is full the next incoming message will be discarded. */
        SET_BIT(CAN->MCR,3); //RFLM
#else
     /* Receive FIFO not locked on overrun.
         Once a receive FIFO is full the next incoming message will overwrite the previous one. */
        CLR_BIT(CAN->MCR,3); //RFLM
 80009ea:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009f0:	f023 0308 	bic.w	r3, r3, #8
 80009f4:	6013      	str	r3, [r2, #0]
#endif
    /** CHECK automatic retransmission **/
#if AutoRetransmission == ENABLE
        CLR_BIT(CAN->MCR,4); //NART
 80009f6:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <CAN_voidInit+0xcc>)
 80009fc:	f023 0310 	bic.w	r3, r3, #16
 8000a00:	6013      	str	r3, [r2, #0]
        SET_BIT(CAN->MCR,4); //NART
#endif

    /** CHECK automatic wakeup mode **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,5); //AWUM
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <CAN_voidInit+0xcc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a10      	ldr	r2, [pc, #64]	@ (8000a48 <CAN_voidInit+0xcc>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6013      	str	r3, [r2, #0]
       CLR_BIT(CAN->MCR,5); //AWUM
#endif

    /** CHECK automatic bus-off management **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,6); //ABOM
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <CAN_voidInit+0xcc>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <CAN_voidInit+0xcc>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a18:	6013      	str	r3, [r2, #0]

    /** CHECK Time triggered communication mode **/
#if TimeTriggeredMode == ENABLE
        SET_BIT(CAN->MCR,7); //TTCM
#else
        CLR_BIT(CAN->MCR,7); //TTCM
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <CAN_voidInit+0xcc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <CAN_voidInit+0xcc>)
 8000a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a24:	6013      	str	r3, [r2, #0]
#endif


     /** Set the bit timing register **/
  WRITE_REG(CAN->BTR, (uint32) (MODE |
 8000a26:	2302      	movs	r3, #2
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	051b      	lsls	r3, r3, #20
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	230d      	movs	r3, #13
 8000a30:	3b01      	subs	r3, #1
 8000a32:	041b      	lsls	r3, r3, #16
 8000a34:	4313      	orrs	r3, r2
 8000a36:	2201      	movs	r2, #1
 8000a38:	3a01      	subs	r2, #1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4a02      	ldr	r2, [pc, #8]	@ (8000a48 <CAN_voidInit+0xcc>)
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	61d3      	str	r3, [r2, #28]
		  ((CAN_bitRateConfig[BOUDRATE].TS2-1) << 20) |
		  ((CAN_bitRateConfig[BOUDRATE].TS1-1) << 16) |
		  (CAN_bitRateConfig[BOUDRATE].BRP-1)));
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40006400 	.word	0x40006400

08000a4c <CAN_voidAddTxMsg>:


void CAN_voidAddTxMsg( CAN_TxHeaderTypeDef *pTxHeader, uint8 Local_u8Data[])
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	uint32 local_u8TransmitMailbox; // which mailbox is empty to set Local_u8Data in it (read CODE bit in TSR register)
	uint32 local_u32TSR; //transmit status register
	local_u32TSR = READ_REG(CAN->TSR);
 8000a56:	4b4e      	ldr	r3, [pc, #312]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	60fb      	str	r3, [r7, #12]
	 /* Check that all the Tx mailboxes are not full */
//	while(1)
//	{
		if ( (GET_BIT(local_u32TSR, 26) != 0x0) || /* TME0 */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10a      	bne.n	8000a7c <CAN_voidAddTxMsg+0x30>
			 (GET_BIT (local_u32TSR,27) != 0x0) || /* TME1 */
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
		if ( (GET_BIT(local_u32TSR, 26) != 0x0) || /* TME0 */
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d105      	bne.n	8000a7c <CAN_voidAddTxMsg+0x30>
			 (GET_BIT(local_u32TSR,28) != 0x0) )  /* TME2 */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
			 (GET_BIT (local_u32TSR,27) != 0x0) || /* TME1 */
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 8084 	beq.w	8000b84 <CAN_voidAddTxMsg+0x138>
		{
			/* Select an empty transmit mailbox */
			local_u8TransmitMailbox = ((local_u32TSR >> 24) & 0x3); //(read CODE[1:0] bit in TSR register)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	0e1b      	lsrs	r3, r3, #24
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	60bb      	str	r3, [r7, #8]
			 /* Check transmit mailbox value */
			if (local_u8TransmitMailbox <=2)
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d87b      	bhi.n	8000b84 <CAN_voidAddTxMsg+0x138>
			{
				/* Set up the Id */
				  if (pTxHeader->IDE == CAN_ID_STD)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10c      	bne.n	8000aae <CAN_voidAddTxMsg+0x62>
				  {
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId << 21) |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	055a      	lsls	r2, r3, #21
															pTxHeader->RTR);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId << 21) |
 8000a9e:	493c      	ldr	r1, [pc, #240]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	3318      	adds	r3, #24
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	440b      	add	r3, r1
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	e00e      	b.n	8000acc <CAN_voidAddTxMsg+0x80>
				  }
				  else
				  {
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	00da      	lsls	r2, r3, #3
																		pTxHeader->IDE | pTxHeader->RTR);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 8000ab8:	431a      	orrs	r2, r3
																		pTxHeader->IDE | pTxHeader->RTR);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 8000abe:	4934      	ldr	r1, [pc, #208]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
																		pTxHeader->IDE | pTxHeader->RTR);
 8000ac0:	431a      	orrs	r2, r3
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	3318      	adds	r3, #24
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	440b      	add	r3, r1
 8000aca:	601a      	str	r2, [r3, #0]
				  }

				  /* Set up the DLC */
				  CAN->TxMailBox[local_u8TransmitMailbox].TDTR = (pTxHeader->DLC);
 8000acc:	4930      	ldr	r1, [pc, #192]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	691a      	ldr	r2, [r3, #16]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	3318      	adds	r3, #24
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	440b      	add	r3, r1
 8000ada:	3304      	adds	r3, #4
 8000adc:	601a      	str	r2, [r3, #0]
				  /* Set up the Transmit Global Time mode */
				  if (pTxHeader->TransmitGlobalTime == ENABLE)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7d1b      	ldrb	r3, [r3, #20]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d10f      	bne.n	8000b06 <CAN_voidAddTxMsg+0xba>
				  {
					  SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TDTR, 8);
 8000ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3318      	adds	r3, #24
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	4413      	add	r3, r2
 8000af0:	3304      	adds	r3, #4
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4926      	ldr	r1, [pc, #152]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
 8000af6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3318      	adds	r3, #24
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	440b      	add	r3, r1
 8000b02:	3304      	adds	r3, #4
 8000b04:	601a      	str	r2, [r3, #0]
				  }
				  /* Set up the Local_u8Data field */
				WRITE_REG(CAN->TxMailBox[local_u8TransmitMailbox].TDHR,
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	3307      	adds	r3, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	061a      	lsls	r2, r3, #24
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	3306      	adds	r3, #6
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	431a      	orrs	r2, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	3305      	adds	r3, #5
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	4313      	orrs	r3, r2
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	3204      	adds	r2, #4
 8000b26:	7812      	ldrb	r2, [r2, #0]
 8000b28:	4919      	ldr	r1, [pc, #100]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	440b      	add	r3, r1
 8000b32:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000b36:	601a      	str	r2, [r3, #0]
							  ((uint32)Local_u8Data[7] << 24) |
							  ((uint32)Local_u8Data[6] << 16) |
							  ((uint32)Local_u8Data[5] << 8 ) |
							  ((uint32)Local_u8Data[4]));
				WRITE_REG(CAN->TxMailBox[local_u8TransmitMailbox].TDLR,
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3303      	adds	r3, #3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	061a      	lsls	r2, r3, #24
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	3302      	adds	r3, #2
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	041b      	lsls	r3, r3, #16
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	4313      	orrs	r3, r2
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	7812      	ldrb	r2, [r2, #0]
 8000b58:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	440b      	add	r3, r1
 8000b62:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000b66:	601a      	str	r2, [r3, #0]
							  ((uint32)Local_u8Data[3] << 24) |
							  ((uint32)Local_u8Data[2] << 16) |
							  ((uint32)Local_u8Data[1] << 8 ) |
							  ((uint32)Local_u8Data[0]));
				/* Request transmission */
				SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TIR, 0);
 8000b68:	4a09      	ldr	r2, [pc, #36]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3318      	adds	r3, #24
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	4413      	add	r3, r2
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4906      	ldr	r1, [pc, #24]	@ (8000b90 <CAN_voidAddTxMsg+0x144>)
 8000b76:	f043 0201 	orr.w	r2, r3, #1
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	3318      	adds	r3, #24
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	440b      	add	r3, r1
 8000b82:	601a      	str	r2, [r3, #0]
  //			while(GET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TIR, 0) == 1); // clear by hardware when mailbox empty
			}
//			break;
//		}
	}
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40006400 	.word	0x40006400

08000b94 <CAN_voidStart>:


void CAN_voidStart(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
	/* CLEAR Initialization request BIT (INRQ) */
	CLR_BIT(CAN->MCR,0);
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <CAN_voidStart+0x28>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <CAN_voidStart+0x28>)
 8000b9e:	f023 0301 	bic.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]
	/* wait to enter in Initialization mode */
	while(!(GET_BIT(CAN->MSR,0) == 0));
 8000ba4:	bf00      	nop
 8000ba6:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <CAN_voidStart+0x28>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f9      	bne.n	8000ba6 <CAN_voidStart+0x12>
}
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40006400 	.word	0x40006400

08000bc0 <CAN_voidConfigFilter>:
		return (CAN->RF1R & 0X3);
	}
}
/** CAN CONFIG filter **/
void CAN_voidConfigFilter( CAN_FilterTypeDef *pFilterConfig)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	/* Initialization mode for the filter */
	SET_BIT(CAN->FMR, 0);
 8000bc8:	4b64      	ldr	r3, [pc, #400]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000bca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bce:	4a63      	ldr	r2, [pc, #396]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	/* Convert filter number into bit position */
	uint32 local_u32FilterBitPos = pFilterConfig->FilterBank ;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	60fb      	str	r3, [r7, #12]

	/* Filter Deactivation */
	CLR_BIT(CAN->FA1R, pFilterConfig->FilterBank);
 8000bde:	4b5f      	ldr	r3, [pc, #380]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000be0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	6952      	ldr	r2, [r2, #20]
 8000be8:	2101      	movs	r1, #1
 8000bea:	fa01 f202 	lsl.w	r2, r1, r2
 8000bee:	43d2      	mvns	r2, r2
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4a5a      	ldr	r2, [pc, #360]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000bf4:	400b      	ands	r3, r1
 8000bf6:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

	/* Filter Scale */
	if (pFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d128      	bne.n	8000c54 <CAN_voidConfigFilter+0x94>
	{
	  /* 16-bit scale for the filter */
	  CLR_BIT(CAN->FS1R, local_u32FilterBitPos);
 8000c02:	4b56      	ldr	r3, [pc, #344]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000c04:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000c08:	2101      	movs	r1, #1
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	43d2      	mvns	r2, r2
 8000c12:	4611      	mov	r1, r2
 8000c14:	4a51      	ldr	r2, [pc, #324]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000c16:	400b      	ands	r3, r1
 8000c18:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
	     * */

	  /* First 16-bit identifier and First 16-bit mask */
	  /* Or First 16-bit identifier and Second 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0419      	lsls	r1, r3, #16
									  (pFilterConfig->FilterIdLow	   & 0x0000FFFF) );
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000c28:	484c      	ldr	r0, [pc, #304]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 8000c2e:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000c30:	3348      	adds	r3, #72	@ 0x48
 8000c32:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* Second 16-bit identifier and Second 16-bit mask */
	  /* Or Third 16-bit identifier and Fourth 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	0419      	lsls	r1, r3, #16
			  									  (pFilterConfig->FilterIdHigh 	   & 0x0000FFFF) );
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8000c42:	4846      	ldr	r0, [pc, #280]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000c48:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8000c4a:	3348      	adds	r3, #72	@ 0x48
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4403      	add	r3, r0
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	e02a      	b.n	8000caa <CAN_voidConfigFilter+0xea>
	}

	else if (pFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d126      	bne.n	8000caa <CAN_voidConfigFilter+0xea>
	{
	  /* 32-bit scale for the filter */
	  SET_BIT(CAN->FS1R, local_u32FilterBitPos);
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000c5e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000c62:	2101      	movs	r1, #1
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
		 * STID[10:3] STID[2:0] EXID[17:13] EXID[12:5] EXID[4:0] IDE RTR 0
		 * */

	  /* 32-bit identifier or First 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	0419      	lsls	r1, r3, #16
											 (pFilterConfig->FilterIdLow  & 0x0000FFFF));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000c80:	4836      	ldr	r0, [pc, #216]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 8000c86:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000c88:	3348      	adds	r3, #72	@ 0x48
 8000c8a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* 32-bit mask or Second 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	0419      	lsls	r1, r3, #16
												 (pFilterConfig->FilterMaskIdLow & 0x0000FFFF));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8000c9a:	4830      	ldr	r0, [pc, #192]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000ca0:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8000ca2:	3348      	adds	r3, #72	@ 0x48
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4403      	add	r3, r0
 8000ca8:	605a      	str	r2, [r3, #4]
	}

	/* Filter Mode */
	if (pFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10d      	bne.n	8000cce <CAN_voidConfigFilter+0x10e>
	{
	  /* Id/Mask mode for the filter*/
	  CLR_BIT(CAN->FM1R, local_u32FilterBitPos);
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000cb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000cb8:	2101      	movs	r1, #1
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4a25      	ldr	r2, [pc, #148]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000cc6:	400b      	ands	r3, r1
 8000cc8:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
 8000ccc:	e00b      	b.n	8000ce6 <CAN_voidConfigFilter+0x126>
	}
	else
	{
	  /* Identifier list mode for the filter*/
	  SET_BIT(CAN->FM1R, local_u32FilterBitPos);
 8000cce:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000cd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a1f      	ldr	r2, [pc, #124]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
	}

	/* Filter FIFO assignment */
	if (pFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10d      	bne.n	8000d0a <CAN_voidConfigFilter+0x14a>
	{
	  /* FIFO 0 assignation for the filter */
	  CLR_BIT(CAN->FFA1R, local_u32FilterBitPos);
 8000cee:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000cf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000d02:	400b      	ands	r3, r1
 8000d04:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 8000d08:	e00b      	b.n	8000d22 <CAN_voidConfigFilter+0x162>
	}
	else
	{
	  /* FIFO 1 assignation for the filter */
	  SET_BIT(CAN->FFA1R, local_u32FilterBitPos);
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000d0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000d10:	2101      	movs	r1, #1
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
	}

	/* Filter activation */
	if (pFilterConfig->FilterActivation == ENABLE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d10b      	bne.n	8000d42 <CAN_voidConfigFilter+0x182>
	{
	  SET_BIT(CAN->FA1R, local_u32FilterBitPos);
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000d2c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000d30:	2101      	movs	r1, #1
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	}

	/* Leave the initialisation mode for the filter */
	CLR_BIT(CAN->FMR, 0);
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000d44:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <CAN_voidConfigFilter+0x19c>)
 8000d4a:	f023 0301 	bic.w	r3, r3, #1
 8000d4e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	40006400 	.word	0x40006400

08000d60 <MDIO_INIT>:

#include "../Inc/MCAL/DIO/DIO_interface.h"
#include "../Inc/MCAL/DIO/DIO_private.h"
#include "../Inc/MCAL/DIO/DIO_config.h"

void MDIO_INIT(uint8 copy_uint8Port){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
			MRCC_voidInitClock();
 8000d6a:	f000 fdab 	bl	80018c4 <MRCC_voidInitClock>
			MRCC_voidEnableClock(RCC_APB2,copy_uint8Port+2);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	3302      	adds	r3, #2
 8000d72:	4619      	mov	r1, r3
 8000d74:	2002      	movs	r0, #2
 8000d76:	f000 fd65 	bl	8001844 <MRCC_voidEnableClock>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <MDIO_voidSetDirection>:
void MDIO_voidSetDirection(uint8 copy_uint8Port,uint8 copy_uint8Pin, uint8 copy_uint8Mode){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	71bb      	strb	r3, [r7, #6]
 8000d92:	4613      	mov	r3, r2
 8000d94:	717b      	strb	r3, [r7, #5]

	switch (copy_uint8Port){
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	f000 80b3 	beq.w	8000f04 <MDIO_voidSetDirection+0x180>
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	f300 810a 	bgt.w	8000fb8 <MDIO_voidSetDirection+0x234>
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <MDIO_voidSetDirection+0x2a>
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d056      	beq.n	8000e5a <MDIO_voidSetDirection+0xd6>
			else if(copy_uint8Mode == INPUT_PULL_UP){
				SET_BIT(GPIOC_ODR,copy_uint8Pin);
			}
			break;
	}
}
 8000dac:	e104      	b.n	8000fb8 <MDIO_voidSetDirection+0x234>
			if(copy_uint8Pin<8){
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	2b07      	cmp	r3, #7
 8000db2:	d817      	bhi.n	8000de4 <MDIO_voidSetDirection+0x60>
				GPIOA_CRL &= ~((0b1111)<<(copy_uint8Pin*4));
 8000db4:	4b83      	ldr	r3, [pc, #524]	@ (8000fc4 <MDIO_voidSetDirection+0x240>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	79ba      	ldrb	r2, [r7, #6]
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	43d2      	mvns	r2, r2
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4a7f      	ldr	r2, [pc, #508]	@ (8000fc4 <MDIO_voidSetDirection+0x240>)
 8000dc8:	400b      	ands	r3, r1
 8000dca:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8000dcc:	4b7d      	ldr	r3, [pc, #500]	@ (8000fc4 <MDIO_voidSetDirection+0x240>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	7979      	ldrb	r1, [r7, #5]
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4a79      	ldr	r2, [pc, #484]	@ (8000fc4 <MDIO_voidSetDirection+0x240>)
 8000dde:	430b      	orrs	r3, r1
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e01c      	b.n	8000e1e <MDIO_voidSetDirection+0x9a>
			else if(copy_uint8Pin<16){
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	d819      	bhi.n	8000e1e <MDIO_voidSetDirection+0x9a>
				copy_uint8Pin -=8;
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	3b08      	subs	r3, #8
 8000dee:	71bb      	strb	r3, [r7, #6]
				GPIOA_CRH &= ~((0b1111)<<(copy_uint8Pin*4));
 8000df0:	4b75      	ldr	r3, [pc, #468]	@ (8000fc8 <MDIO_voidSetDirection+0x244>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	79ba      	ldrb	r2, [r7, #6]
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	210f      	movs	r1, #15
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	43d2      	mvns	r2, r2
 8000e00:	4611      	mov	r1, r2
 8000e02:	4a71      	ldr	r2, [pc, #452]	@ (8000fc8 <MDIO_voidSetDirection+0x244>)
 8000e04:	400b      	ands	r3, r1
 8000e06:	6013      	str	r3, [r2, #0]
			    GPIOA_CRH |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8000e08:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc8 <MDIO_voidSetDirection+0x244>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	7979      	ldrb	r1, [r7, #5]
 8000e0e:	79ba      	ldrb	r2, [r7, #6]
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	fa01 f202 	lsl.w	r2, r1, r2
 8000e16:	4611      	mov	r1, r2
 8000e18:	4a6b      	ldr	r2, [pc, #428]	@ (8000fc8 <MDIO_voidSetDirection+0x244>)
 8000e1a:	430b      	orrs	r3, r1
 8000e1c:	6013      	str	r3, [r2, #0]
			if(copy_uint8Mode == INPUT_PULL_DOWN){
 8000e1e:	797b      	ldrb	r3, [r7, #5]
 8000e20:	2b08      	cmp	r3, #8
 8000e22:	d10b      	bne.n	8000e3c <MDIO_voidSetDirection+0xb8>
			    CLR_BIT(GPIOA_ODR,copy_uint8Pin);
 8000e24:	4b69      	ldr	r3, [pc, #420]	@ (8000fcc <MDIO_voidSetDirection+0x248>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	79ba      	ldrb	r2, [r7, #6]
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	43d2      	mvns	r2, r2
 8000e32:	4611      	mov	r1, r2
 8000e34:	4a65      	ldr	r2, [pc, #404]	@ (8000fcc <MDIO_voidSetDirection+0x248>)
 8000e36:	400b      	ands	r3, r1
 8000e38:	6013      	str	r3, [r2, #0]
			break;
 8000e3a:	e0b8      	b.n	8000fae <MDIO_voidSetDirection+0x22a>
			else if(copy_uint8Mode == INPUT_PULL_UP){
 8000e3c:	797b      	ldrb	r3, [r7, #5]
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	f040 80b5 	bne.w	8000fae <MDIO_voidSetDirection+0x22a>
				SET_BIT(GPIOA_ODR,copy_uint8Pin);
 8000e44:	4b61      	ldr	r3, [pc, #388]	@ (8000fcc <MDIO_voidSetDirection+0x248>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	4611      	mov	r1, r2
 8000e52:	4a5e      	ldr	r2, [pc, #376]	@ (8000fcc <MDIO_voidSetDirection+0x248>)
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6013      	str	r3, [r2, #0]
			break;
 8000e58:	e0a9      	b.n	8000fae <MDIO_voidSetDirection+0x22a>
			if(copy_uint8Pin<8){
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	d817      	bhi.n	8000e90 <MDIO_voidSetDirection+0x10c>
				GPIOB_CRL &= ~((0b1111)<<(copy_uint8Pin*4));
 8000e60:	4b5b      	ldr	r3, [pc, #364]	@ (8000fd0 <MDIO_voidSetDirection+0x24c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	79ba      	ldrb	r2, [r7, #6]
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	210f      	movs	r1, #15
 8000e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6e:	43d2      	mvns	r2, r2
 8000e70:	4611      	mov	r1, r2
 8000e72:	4a57      	ldr	r2, [pc, #348]	@ (8000fd0 <MDIO_voidSetDirection+0x24c>)
 8000e74:	400b      	ands	r3, r1
 8000e76:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8000e78:	4b55      	ldr	r3, [pc, #340]	@ (8000fd0 <MDIO_voidSetDirection+0x24c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	7979      	ldrb	r1, [r7, #5]
 8000e7e:	79ba      	ldrb	r2, [r7, #6]
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	fa01 f202 	lsl.w	r2, r1, r2
 8000e86:	4611      	mov	r1, r2
 8000e88:	4a51      	ldr	r2, [pc, #324]	@ (8000fd0 <MDIO_voidSetDirection+0x24c>)
 8000e8a:	430b      	orrs	r3, r1
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e01c      	b.n	8000eca <MDIO_voidSetDirection+0x146>
			else if(copy_uint8Pin<16){
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	2b0f      	cmp	r3, #15
 8000e94:	d819      	bhi.n	8000eca <MDIO_voidSetDirection+0x146>
				copy_uint8Pin -=8;
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	71bb      	strb	r3, [r7, #6]
				GPIOB_CRH &= ~((0b1111)<<(copy_uint8Pin*4));
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fd4 <MDIO_voidSetDirection+0x250>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	79ba      	ldrb	r2, [r7, #6]
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	43d2      	mvns	r2, r2
 8000eac:	4611      	mov	r1, r2
 8000eae:	4a49      	ldr	r2, [pc, #292]	@ (8000fd4 <MDIO_voidSetDirection+0x250>)
 8000eb0:	400b      	ands	r3, r1
 8000eb2:	6013      	str	r3, [r2, #0]
			    GPIOB_CRH |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8000eb4:	4b47      	ldr	r3, [pc, #284]	@ (8000fd4 <MDIO_voidSetDirection+0x250>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	7979      	ldrb	r1, [r7, #5]
 8000eba:	79ba      	ldrb	r2, [r7, #6]
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4a43      	ldr	r2, [pc, #268]	@ (8000fd4 <MDIO_voidSetDirection+0x250>)
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	6013      	str	r3, [r2, #0]
			if(copy_uint8Mode == INPUT_PULL_DOWN){
 8000eca:	797b      	ldrb	r3, [r7, #5]
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d10b      	bne.n	8000ee8 <MDIO_voidSetDirection+0x164>
				CLR_BIT(GPIOB_ODR,copy_uint8Pin);
 8000ed0:	4b41      	ldr	r3, [pc, #260]	@ (8000fd8 <MDIO_voidSetDirection+0x254>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	79ba      	ldrb	r2, [r7, #6]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8000edc:	43d2      	mvns	r2, r2
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd8 <MDIO_voidSetDirection+0x254>)
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	6013      	str	r3, [r2, #0]
			break;
 8000ee6:	e064      	b.n	8000fb2 <MDIO_voidSetDirection+0x22e>
			else if(copy_uint8Mode == INPUT_PULL_UP){
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d161      	bne.n	8000fb2 <MDIO_voidSetDirection+0x22e>
				SET_BIT(GPIOB_ODR,copy_uint8Pin);
 8000eee:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd8 <MDIO_voidSetDirection+0x254>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	79ba      	ldrb	r2, [r7, #6]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	4611      	mov	r1, r2
 8000efc:	4a36      	ldr	r2, [pc, #216]	@ (8000fd8 <MDIO_voidSetDirection+0x254>)
 8000efe:	430b      	orrs	r3, r1
 8000f00:	6013      	str	r3, [r2, #0]
			break;
 8000f02:	e056      	b.n	8000fb2 <MDIO_voidSetDirection+0x22e>
			if(copy_uint8Pin<8){
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	2b07      	cmp	r3, #7
 8000f08:	d817      	bhi.n	8000f3a <MDIO_voidSetDirection+0x1b6>
				GPIOC_CRL &= ~((0b1111)<<(copy_uint8Pin*4));
 8000f0a:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <MDIO_voidSetDirection+0x258>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	79ba      	ldrb	r2, [r7, #6]
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	210f      	movs	r1, #15
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000fdc <MDIO_voidSetDirection+0x258>)
 8000f1e:	400b      	ands	r3, r1
 8000f20:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8000f22:	4b2e      	ldr	r3, [pc, #184]	@ (8000fdc <MDIO_voidSetDirection+0x258>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	7979      	ldrb	r1, [r7, #5]
 8000f28:	79ba      	ldrb	r2, [r7, #6]
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	4611      	mov	r1, r2
 8000f32:	4a2a      	ldr	r2, [pc, #168]	@ (8000fdc <MDIO_voidSetDirection+0x258>)
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e01c      	b.n	8000f74 <MDIO_voidSetDirection+0x1f0>
			else if(copy_uint8Pin<16){
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d819      	bhi.n	8000f74 <MDIO_voidSetDirection+0x1f0>
				copy_uint8Pin -=8;
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	3b08      	subs	r3, #8
 8000f44:	71bb      	strb	r3, [r7, #6]
     			GPIOC_CRH &= ~((0b1111)<<(copy_uint8Pin*4));
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <MDIO_voidSetDirection+0x25c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	79ba      	ldrb	r2, [r7, #6]
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	210f      	movs	r1, #15
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	43d2      	mvns	r2, r2
 8000f56:	4611      	mov	r1, r2
 8000f58:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <MDIO_voidSetDirection+0x25c>)
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	6013      	str	r3, [r2, #0]
			    GPIOC_CRH |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <MDIO_voidSetDirection+0x25c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	7979      	ldrb	r1, [r7, #5]
 8000f64:	79ba      	ldrb	r2, [r7, #6]
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <MDIO_voidSetDirection+0x25c>)
 8000f70:	430b      	orrs	r3, r1
 8000f72:	6013      	str	r3, [r2, #0]
			if(copy_uint8Mode == INPUT_PULL_DOWN){
 8000f74:	797b      	ldrb	r3, [r7, #5]
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d10b      	bne.n	8000f92 <MDIO_voidSetDirection+0x20e>
			   CLR_BIT(GPIOC_ODR,copy_uint8Pin);
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MDIO_voidSetDirection+0x260>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	79ba      	ldrb	r2, [r7, #6]
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f202 	lsl.w	r2, r1, r2
 8000f86:	43d2      	mvns	r2, r2
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <MDIO_voidSetDirection+0x260>)
 8000f8c:	400b      	ands	r3, r1
 8000f8e:	6013      	str	r3, [r2, #0]
			break;
 8000f90:	e011      	b.n	8000fb6 <MDIO_voidSetDirection+0x232>
			else if(copy_uint8Mode == INPUT_PULL_UP){
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d10e      	bne.n	8000fb6 <MDIO_voidSetDirection+0x232>
				SET_BIT(GPIOC_ODR,copy_uint8Pin);
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <MDIO_voidSetDirection+0x260>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	79ba      	ldrb	r2, [r7, #6]
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe4 <MDIO_voidSetDirection+0x260>)
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	6013      	str	r3, [r2, #0]
			break;
 8000fac:	e003      	b.n	8000fb6 <MDIO_voidSetDirection+0x232>
			break;
 8000fae:	bf00      	nop
 8000fb0:	e002      	b.n	8000fb8 <MDIO_voidSetDirection+0x234>
			break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <MDIO_voidSetDirection+0x234>
			break;
 8000fb6:	bf00      	nop
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010804 	.word	0x40010804
 8000fcc:	4001080c 	.word	0x4001080c
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	40010c04 	.word	0x40010c04
 8000fd8:	40010c0c 	.word	0x40010c0c
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40011004 	.word	0x40011004
 8000fe4:	4001100c 	.word	0x4001100c

08000fe8 <MDIO_voidWrite_D_pin>:

void MDIO_voidWrite_D_pin(uint8 copy_uint8Port,uint8 copy_uint8Pin, uint8 copy_uint8Value){
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	71bb      	strb	r3, [r7, #6]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	717b      	strb	r3, [r7, #5]
	switch(copy_uint8Port){
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d040      	beq.n	8001082 <MDIO_voidWrite_D_pin+0x9a>
 8001000:	2b02      	cmp	r3, #2
 8001002:	dc60      	bgt.n	80010c6 <MDIO_voidWrite_D_pin+0xde>
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <MDIO_voidWrite_D_pin+0x26>
 8001008:	2b01      	cmp	r3, #1
 800100a:	d01d      	beq.n	8001048 <MDIO_voidWrite_D_pin+0x60>
			else if(copy_uint8Value == LOW){
					CLR_BIT(GPIOC_ODR,copy_uint8Pin);
			}
		break;
	}
}
 800100c:	e05b      	b.n	80010c6 <MDIO_voidWrite_D_pin+0xde>
				if(copy_uint8Value == HIGH){
 800100e:	797b      	ldrb	r3, [r7, #5]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10a      	bne.n	800102a <MDIO_voidWrite_D_pin+0x42>
					SET_BIT(GPIOA_ODR,copy_uint8Pin);
 8001014:	4b2e      	ldr	r3, [pc, #184]	@ (80010d0 <MDIO_voidWrite_D_pin+0xe8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	79ba      	ldrb	r2, [r7, #6]
 800101a:	2101      	movs	r1, #1
 800101c:	fa01 f202 	lsl.w	r2, r1, r2
 8001020:	4611      	mov	r1, r2
 8001022:	4a2b      	ldr	r2, [pc, #172]	@ (80010d0 <MDIO_voidWrite_D_pin+0xe8>)
 8001024:	430b      	orrs	r3, r1
 8001026:	6013      	str	r3, [r2, #0]
		break;
 8001028:	e048      	b.n	80010bc <MDIO_voidWrite_D_pin+0xd4>
				else if(copy_uint8Value == LOW){
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d145      	bne.n	80010bc <MDIO_voidWrite_D_pin+0xd4>
					CLR_BIT(GPIOA_ODR,copy_uint8Pin);
 8001030:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <MDIO_voidWrite_D_pin+0xe8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	43d2      	mvns	r2, r2
 800103e:	4611      	mov	r1, r2
 8001040:	4a23      	ldr	r2, [pc, #140]	@ (80010d0 <MDIO_voidWrite_D_pin+0xe8>)
 8001042:	400b      	ands	r3, r1
 8001044:	6013      	str	r3, [r2, #0]
		break;
 8001046:	e039      	b.n	80010bc <MDIO_voidWrite_D_pin+0xd4>
				if(copy_uint8Value == HIGH){
 8001048:	797b      	ldrb	r3, [r7, #5]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d10a      	bne.n	8001064 <MDIO_voidWrite_D_pin+0x7c>
					SET_BIT(GPIOB_ODR,copy_uint8Pin);
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <MDIO_voidWrite_D_pin+0xec>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	79ba      	ldrb	r2, [r7, #6]
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	4611      	mov	r1, r2
 800105c:	4a1d      	ldr	r2, [pc, #116]	@ (80010d4 <MDIO_voidWrite_D_pin+0xec>)
 800105e:	430b      	orrs	r3, r1
 8001060:	6013      	str	r3, [r2, #0]
		break;
 8001062:	e02d      	b.n	80010c0 <MDIO_voidWrite_D_pin+0xd8>
				else if(copy_uint8Value == LOW){
 8001064:	797b      	ldrb	r3, [r7, #5]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d12a      	bne.n	80010c0 <MDIO_voidWrite_D_pin+0xd8>
					CLR_BIT(GPIOB_ODR,copy_uint8Pin);
 800106a:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <MDIO_voidWrite_D_pin+0xec>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	79ba      	ldrb	r2, [r7, #6]
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	43d2      	mvns	r2, r2
 8001078:	4611      	mov	r1, r2
 800107a:	4a16      	ldr	r2, [pc, #88]	@ (80010d4 <MDIO_voidWrite_D_pin+0xec>)
 800107c:	400b      	ands	r3, r1
 800107e:	6013      	str	r3, [r2, #0]
		break;
 8001080:	e01e      	b.n	80010c0 <MDIO_voidWrite_D_pin+0xd8>
			if(copy_uint8Value == HIGH){
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10a      	bne.n	800109e <MDIO_voidWrite_D_pin+0xb6>
					SET_BIT(GPIOC_ODR,copy_uint8Pin);
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <MDIO_voidWrite_D_pin+0xf0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	79ba      	ldrb	r2, [r7, #6]
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4611      	mov	r1, r2
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <MDIO_voidWrite_D_pin+0xf0>)
 8001098:	430b      	orrs	r3, r1
 800109a:	6013      	str	r3, [r2, #0]
		break;
 800109c:	e012      	b.n	80010c4 <MDIO_voidWrite_D_pin+0xdc>
			else if(copy_uint8Value == LOW){
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10f      	bne.n	80010c4 <MDIO_voidWrite_D_pin+0xdc>
					CLR_BIT(GPIOC_ODR,copy_uint8Pin);
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MDIO_voidWrite_D_pin+0xf0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	79ba      	ldrb	r2, [r7, #6]
 80010aa:	2101      	movs	r1, #1
 80010ac:	fa01 f202 	lsl.w	r2, r1, r2
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <MDIO_voidWrite_D_pin+0xf0>)
 80010b6:	400b      	ands	r3, r1
 80010b8:	6013      	str	r3, [r2, #0]
		break;
 80010ba:	e003      	b.n	80010c4 <MDIO_voidWrite_D_pin+0xdc>
		break;
 80010bc:	bf00      	nop
 80010be:	e002      	b.n	80010c6 <MDIO_voidWrite_D_pin+0xde>
		break;
 80010c0:	bf00      	nop
 80010c2:	e000      	b.n	80010c6 <MDIO_voidWrite_D_pin+0xde>
		break;
 80010c4:	bf00      	nop
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	4001080c 	.word	0x4001080c
 80010d4:	40010c0c 	.word	0x40010c0c
 80010d8:	4001100c 	.word	0x4001100c

080010dc <MDIO_uint8Read_D_pin>:

uint8 MDIO_uint8Read_D_pin(uint8 copy_uint8Port,uint8 copy_uint8Pin){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
	switch(copy_uint8Port){
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d01a      	beq.n	8001128 <MDIO_uint8Read_D_pin+0x4c>
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	dc22      	bgt.n	800113c <MDIO_uint8Read_D_pin+0x60>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <MDIO_uint8Read_D_pin+0x24>
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d00a      	beq.n	8001114 <MDIO_uint8Read_D_pin+0x38>
 80010fe:	e01d      	b.n	800113c <MDIO_uint8Read_D_pin+0x60>
	case PORTA:
		return GET_BIT(GPIOA_IDR,copy_uint8Pin);
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MDIO_uint8Read_D_pin+0x6c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	fa22 f303 	lsr.w	r3, r2, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	e014      	b.n	800113e <MDIO_uint8Read_D_pin+0x62>
		break;
	case PORTB:
		return GET_BIT(GPIOB_IDR,copy_uint8Pin);
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <MDIO_uint8Read_D_pin+0x70>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	fa22 f303 	lsr.w	r3, r2, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	e00a      	b.n	800113e <MDIO_uint8Read_D_pin+0x62>
		break;
	case PORTC:
		return GET_BIT(GPIOC_IDR,copy_uint8Pin);
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <MDIO_uint8Read_D_pin+0x74>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	e000      	b.n	800113e <MDIO_uint8Read_D_pin+0x62>
		break;
	}
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40010808 	.word	0x40010808
 800114c:	40010c08 	.word	0x40010c08
 8001150:	40011008 	.word	0x40011008

08001154 <MTimer_voidInitInputCapture>:
        break;

    }
}

void MTimer_voidInitInputCapture(uint8 Copy_uint8TimerNo,uint8 Copy_uint8ChannelNo){
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
    switch (Copy_uint8TimerNo)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b02      	cmp	r3, #2
 8001168:	f000 8155 	beq.w	8001416 <MTimer_voidInitInputCapture+0x2c2>
 800116c:	2b02      	cmp	r3, #2
 800116e:	f300 81e2 	bgt.w	8001536 <MTimer_voidInitInputCapture+0x3e2>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <MTimer_voidInitInputCapture+0x2a>
 8001176:	2b01      	cmp	r3, #1
 8001178:	f000 80bd 	beq.w	80012f6 <MTimer_voidInitInputCapture+0x1a2>
            TIMER4->PSC = TIMER4_PRESCALER;
            //enable autoreload
            //SET_BIT(TIMER4->CR1,7);
    break;
}
}
 800117c:	e1db      	b.n	8001536 <MTimer_voidInitInputCapture+0x3e2>
        switch (Copy_uint8ChannelNo)
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	2b03      	cmp	r3, #3
 8001182:	f200 80a7 	bhi.w	80012d4 <MTimer_voidInitInputCapture+0x180>
 8001186:	a201      	add	r2, pc, #4	@ (adr r2, 800118c <MTimer_voidInitInputCapture+0x38>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	0800119d 	.word	0x0800119d
 8001190:	080011eb 	.word	0x080011eb
 8001194:	08001239 	.word	0x08001239
 8001198:	08001287 	.word	0x08001287
            TIMER2->CCMR1 |= (0b01);
 800119c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6193      	str	r3, [r2, #24]
            TIMER2->CCMR1 |= (INPUT_CHECK_DURATION<<4);
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011b6:	f043 0320 	orr.w	r3, r3, #32
 80011ba:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER2->CCER,1);
 80011bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	6213      	str	r3, [r2, #32]
            TIMER2->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 80011cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER2->CCER,0);
 80011d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6213      	str	r3, [r2, #32]
            break;
 80011e8:	e074      	b.n	80012d4 <MTimer_voidInitInputCapture+0x180>
            TIMER2->CCMR1 |= (0b01<<8);
 80011ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f8:	6193      	str	r3, [r2, #24]
            TIMER2->CCMR1 |= (INPUT_CHECK_DURATION<<12);
 80011fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001204:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001208:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER2->CCER,5);
 800120a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	6213      	str	r3, [r2, #32]
            TIMER2->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 800121a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800121e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER2->CCER,4);
 8001226:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	6213      	str	r3, [r2, #32]
            break;
 8001236:	e04d      	b.n	80012d4 <MTimer_voidInitInputCapture+0x180>
            TIMER2->CCMR2 |= (0b01);
 8001238:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	61d3      	str	r3, [r2, #28]
            TIMER2->CCMR2 |= (INPUT_CHECK_DURATION<<4);
 8001248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER2->CCER,9);
 8001258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001266:	6213      	str	r3, [r2, #32]
            TIMER2->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 8001268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800126c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER2->CCER,8);
 8001274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800127e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001282:	6213      	str	r3, [r2, #32]
            break;
 8001284:	e026      	b.n	80012d4 <MTimer_voidInitInputCapture+0x180>
            TIMER2->CCMR2 |= (0b01<<8);
 8001286:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001294:	61d3      	str	r3, [r2, #28]
            TIMER2->CCMR2 |= (INPUT_CHECK_DURATION<<12);
 8001296:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012a4:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER2->CCER,13);
 80012a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012b4:	6213      	str	r3, [r2, #32]
            TIMER2->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 80012b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER2->CCER,12);
 80012c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d0:	6213      	str	r3, [r2, #32]
            break;
 80012d2:	bf00      	nop
            CLR_BIT(TIMER2->CR1,4);
 80012d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012de:	f023 0310 	bic.w	r3, r3, #16
 80012e2:	6013      	str	r3, [r2, #0]
            TIMER2->CNT=0;
 80012e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24
            TIMER2->PSC = TIMER2_PRESCALER;
 80012ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012f0:	2207      	movs	r2, #7
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
    break;
 80012f4:	e11f      	b.n	8001536 <MTimer_voidInitInputCapture+0x3e2>
    switch (Copy_uint8ChannelNo)
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d87f      	bhi.n	80013fc <MTimer_voidInitInputCapture+0x2a8>
 80012fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001304 <MTimer_voidInitInputCapture+0x1b0>)
 80012fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001302:	bf00      	nop
 8001304:	08001315 	.word	0x08001315
 8001308:	0800134f 	.word	0x0800134f
 800130c:	08001389 	.word	0x08001389
 8001310:	080013c3 	.word	0x080013c3
            TIMER3->CCMR1 |= (0b01);
 8001314:	4b8a      	ldr	r3, [pc, #552]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a89      	ldr	r2, [pc, #548]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6193      	str	r3, [r2, #24]
            TIMER3->CCMR1 |= (INPUT_CHECK_DURATION<<4);
 8001320:	4b87      	ldr	r3, [pc, #540]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a86      	ldr	r2, [pc, #536]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001326:	f043 0320 	orr.w	r3, r3, #32
 800132a:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER3->CCER,1);
 800132c:	4b84      	ldr	r3, [pc, #528]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4a83      	ldr	r2, [pc, #524]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	6213      	str	r3, [r2, #32]
            TIMER3->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 8001338:	4b81      	ldr	r3, [pc, #516]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800133a:	4a81      	ldr	r2, [pc, #516]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER3->CCER,0);
 8001340:	4b7f      	ldr	r3, [pc, #508]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a7e      	ldr	r2, [pc, #504]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6213      	str	r3, [r2, #32]
            break;
 800134c:	e056      	b.n	80013fc <MTimer_voidInitInputCapture+0x2a8>
            TIMER3->CCMR1 |= (0b01<<8);
 800134e:	4b7c      	ldr	r3, [pc, #496]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a7b      	ldr	r2, [pc, #492]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001358:	6193      	str	r3, [r2, #24]
            TIMER3->CCMR1 |= (INPUT_CHECK_DURATION<<12);
 800135a:	4b79      	ldr	r3, [pc, #484]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4a78      	ldr	r2, [pc, #480]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001360:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001364:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER3->CCER,5);
 8001366:	4b76      	ldr	r3, [pc, #472]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a75      	ldr	r2, [pc, #468]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	6213      	str	r3, [r2, #32]
            TIMER3->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 8001372:	4b73      	ldr	r3, [pc, #460]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001374:	4a72      	ldr	r2, [pc, #456]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER3->CCER,4);
 800137a:	4b71      	ldr	r3, [pc, #452]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4a70      	ldr	r2, [pc, #448]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	6213      	str	r3, [r2, #32]
            break;
 8001386:	e039      	b.n	80013fc <MTimer_voidInitInputCapture+0x2a8>
            TIMER3->CCMR2 |= (0b01);
 8001388:	4b6d      	ldr	r3, [pc, #436]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4a6c      	ldr	r2, [pc, #432]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	61d3      	str	r3, [r2, #28]
            TIMER3->CCMR2 |= (INPUT_CHECK_DURATION<<4);
 8001394:	4b6a      	ldr	r3, [pc, #424]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4a69      	ldr	r2, [pc, #420]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER3->CCER,9);
 80013a0:	4b67      	ldr	r3, [pc, #412]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a66      	ldr	r2, [pc, #408]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013aa:	6213      	str	r3, [r2, #32]
            TIMER3->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 80013ac:	4b64      	ldr	r3, [pc, #400]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013ae:	4a64      	ldr	r2, [pc, #400]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER3->CCER,8);
 80013b4:	4b62      	ldr	r3, [pc, #392]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a61      	ldr	r2, [pc, #388]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013be:	6213      	str	r3, [r2, #32]
            break;
 80013c0:	e01c      	b.n	80013fc <MTimer_voidInitInputCapture+0x2a8>
            TIMER3->CCMR2 |= (0b01<<8);
 80013c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013cc:	61d3      	str	r3, [r2, #28]
            TIMER3->CCMR2 |= (INPUT_CHECK_DURATION<<12);
 80013ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013d8:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER3->CCER,13);
 80013da:	4b59      	ldr	r3, [pc, #356]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a58      	ldr	r2, [pc, #352]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e4:	6213      	str	r3, [r2, #32]
            TIMER3->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 80013e6:	4b56      	ldr	r3, [pc, #344]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013e8:	4a55      	ldr	r2, [pc, #340]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER3->CCER,12);
 80013ee:	4b54      	ldr	r3, [pc, #336]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4a53      	ldr	r2, [pc, #332]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013f8:	6213      	str	r3, [r2, #32]
            break;
 80013fa:	bf00      	nop
            CLR_BIT(TIMER3->CR1,4);
 80013fc:	4b50      	ldr	r3, [pc, #320]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a4f      	ldr	r2, [pc, #316]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001402:	f023 0310 	bic.w	r3, r3, #16
 8001406:	6013      	str	r3, [r2, #0]
            TIMER3->CNT=0;
 8001408:	4b4d      	ldr	r3, [pc, #308]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
            TIMER3->PSC = TIMER3_PRESCALER;
 800140e:	4b4c      	ldr	r3, [pc, #304]	@ (8001540 <MTimer_voidInitInputCapture+0x3ec>)
 8001410:	2207      	movs	r2, #7
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
    break;
 8001414:	e08f      	b.n	8001536 <MTimer_voidInitInputCapture+0x3e2>
        switch (Copy_uint8ChannelNo)
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d87f      	bhi.n	800151c <MTimer_voidInitInputCapture+0x3c8>
 800141c:	a201      	add	r2, pc, #4	@ (adr r2, 8001424 <MTimer_voidInitInputCapture+0x2d0>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	08001435 	.word	0x08001435
 8001428:	0800146f 	.word	0x0800146f
 800142c:	080014a9 	.word	0x080014a9
 8001430:	080014e3 	.word	0x080014e3
            TIMER4->CCMR1 |= (0b01);
 8001434:	4b43      	ldr	r3, [pc, #268]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a42      	ldr	r2, [pc, #264]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6193      	str	r3, [r2, #24]
            TIMER4->CCMR1 |= (INPUT_CHECK_DURATION<<4);
 8001440:	4b40      	ldr	r3, [pc, #256]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a3f      	ldr	r2, [pc, #252]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	6193      	str	r3, [r2, #24]
            CLR_BIT(TIMER4->CCER,1);
 800144c:	4b3d      	ldr	r3, [pc, #244]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4a3c      	ldr	r2, [pc, #240]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001452:	f023 0302 	bic.w	r3, r3, #2
 8001456:	6213      	str	r3, [r2, #32]
            TIMER4->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 8001458:	4b3a      	ldr	r3, [pc, #232]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800145a:	4a3a      	ldr	r2, [pc, #232]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER4->CCER,0);
 8001460:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a37      	ldr	r2, [pc, #220]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]
            break;
 800146c:	e056      	b.n	800151c <MTimer_voidInitInputCapture+0x3c8>
            TIMER4->CCMR1 |= (0b01<<8);
 800146e:	4b35      	ldr	r3, [pc, #212]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	4a34      	ldr	r2, [pc, #208]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001478:	6193      	str	r3, [r2, #24]
            TIMER4->CCMR1 |= (INPUT_CHECK_DURATION<<12);
 800147a:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a31      	ldr	r2, [pc, #196]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001480:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001484:	6193      	str	r3, [r2, #24]
            CLR_BIT(TIMER4->CCER,5);
 8001486:	4b2f      	ldr	r3, [pc, #188]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a2e      	ldr	r2, [pc, #184]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800148c:	f023 0320 	bic.w	r3, r3, #32
 8001490:	6213      	str	r3, [r2, #32]
            TIMER4->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 8001492:	4b2c      	ldr	r3, [pc, #176]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001494:	4a2b      	ldr	r2, [pc, #172]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER4->CCER,4);
 800149a:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a29      	ldr	r2, [pc, #164]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6213      	str	r3, [r2, #32]
            break;
 80014a6:	e039      	b.n	800151c <MTimer_voidInitInputCapture+0x3c8>
            TIMER4->CCMR2 |= (0b01);
 80014a8:	4b26      	ldr	r3, [pc, #152]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	4a25      	ldr	r2, [pc, #148]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	61d3      	str	r3, [r2, #28]
            TIMER4->CCMR2 |= (INPUT_CHECK_DURATION<<4);
 80014b4:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a22      	ldr	r2, [pc, #136]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014ba:	f043 0320 	orr.w	r3, r3, #32
 80014be:	61d3      	str	r3, [r2, #28]
            CLR_BIT(TIMER4->CCER,9);
 80014c0:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014c6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80014ca:	6213      	str	r3, [r2, #32]
            TIMER4->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 80014cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER4->CCER,8);
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014de:	6213      	str	r3, [r2, #32]
            break;
 80014e0:	e01c      	b.n	800151c <MTimer_voidInitInputCapture+0x3c8>
            TIMER4->CCMR2 |= (0b01<<8);
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ec:	61d3      	str	r3, [r2, #28]
            TIMER4->CCMR2 |= (INPUT_CHECK_DURATION<<12);
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014f8:	61d3      	str	r3, [r2, #28]
            CLR_BIT(TIMER4->CCER,13);
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4a11      	ldr	r2, [pc, #68]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001500:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001504:	6213      	str	r3, [r2, #32]
            TIMER4->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001508:	4a0e      	ldr	r2, [pc, #56]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER4->CCER,12);
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4a0c      	ldr	r2, [pc, #48]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001514:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001518:	6213      	str	r3, [r2, #32]
            break;
 800151a:	bf00      	nop
            CLR_BIT(TIMER4->CR1,4);
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001522:	f023 0310 	bic.w	r3, r3, #16
 8001526:	6013      	str	r3, [r2, #0]
            TIMER4->CNT=0;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
            TIMER4->PSC = TIMER4_PRESCALER;
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <MTimer_voidInitInputCapture+0x3f0>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
    break;
 8001534:	bf00      	nop
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40000400 	.word	0x40000400
 8001544:	40000800 	.word	0x40000800

08001548 <MTimer_voidGetPulseFullTimer>:
        }
    	break;
    }
return 0;
}
void MTimer_voidGetPulseFullTimer(uint8 Copy_uint8TimerNo,uint32 *Copy_uint32DataArray){
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]

	uint8 Local_channel_1_flag=0;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
	uint8 Local_channel_2_flag=0;
 8001558:	2300      	movs	r3, #0
 800155a:	73bb      	strb	r3, [r7, #14]
	uint8 Local_channel_3_flag=0;
 800155c:	2300      	movs	r3, #0
 800155e:	737b      	strb	r3, [r7, #13]
	uint8 Local_channel_4_flag=0;
 8001560:	2300      	movs	r3, #0
 8001562:	733b      	strb	r3, [r7, #12]
switch(Copy_uint8TimerNo){
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <MTimer_voidGetPulseFullTimer+0x2a>
 800156a:	2b01      	cmp	r3, #1
 800156c:	f000 8094 	beq.w	8001698 <MTimer_voidGetPulseFullTimer+0x150>
		 	 }
	break;
}


}
 8001570:	e116      	b.n	80017a0 <MTimer_voidGetPulseFullTimer+0x258>
	TIMER2->CNT=0x0000;
 8001572:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
		SET_BIT(TIMER2->CR1,0);
 800157a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER2->SR,0);
 800158a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6113      	str	r3, [r2, #16]
			if(TIMER2->CNT==ULTRA_MAX_TICKS){
 800159a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	f642 526a 	movw	r2, #11626	@ 0x2d6a
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d02f      	beq.n	8001608 <MTimer_voidGetPulseFullTimer+0xc0>
			if(GET_BIT(TIMER2->SR,0) == 1){
 80015a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d02a      	beq.n	800160c <MTimer_voidGetPulseFullTimer+0xc4>
			 if(GET_BIT(TIMER2->SR,1)==1){
 80015b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <MTimer_voidGetPulseFullTimer+0x82>
				 Local_channel_1_flag=1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
			 if(GET_BIT(TIMER2->SR,2)==1){
 80015ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <MTimer_voidGetPulseFullTimer+0x96>
				Local_channel_2_flag=1;
 80015da:	2301      	movs	r3, #1
 80015dc:	73bb      	strb	r3, [r7, #14]
			 if(GET_BIT(TIMER2->SR,3)==1){
 80015de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <MTimer_voidGetPulseFullTimer+0xaa>
				Local_channel_3_flag=1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	737b      	strb	r3, [r7, #13]
			 if(GET_BIT(TIMER2->SR,4)==1){
 80015f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d1cb      	bne.n	800159a <MTimer_voidGetPulseFullTimer+0x52>
				Local_channel_4_flag=1;
 8001602:	2301      	movs	r3, #1
 8001604:	733b      	strb	r3, [r7, #12]
			if(TIMER2->CNT==ULTRA_MAX_TICKS){
 8001606:	e7c8      	b.n	800159a <MTimer_voidGetPulseFullTimer+0x52>
				break;
 8001608:	bf00      	nop
 800160a:	e000      	b.n	800160e <MTimer_voidGetPulseFullTimer+0xc6>
				break;
 800160c:	bf00      	nop
		 CLR_BIT(TIMER2->CR1,0);
 800160e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6013      	str	r3, [r2, #0]
		 Copy_uint32DataArray[0]=(TIMER2->CCR1)-125;
 800161e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001624:	f1a3 027d 	sub.w	r2, r3, #125	@ 0x7d
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	601a      	str	r2, [r3, #0]
		 Copy_uint32DataArray[1]=(TIMER2->CCR2)-125;
 800162c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3304      	adds	r3, #4
 8001636:	3a7d      	subs	r2, #125	@ 0x7d
 8001638:	601a      	str	r2, [r3, #0]
		 Copy_uint32DataArray[2]=(TIMER2->CCR3)-125;
 800163a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800163e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3308      	adds	r3, #8
 8001644:	3a7d      	subs	r2, #125	@ 0x7d
 8001646:	601a      	str	r2, [r3, #0]
		 Copy_uint32DataArray[3]=(TIMER2->CCR4)-125;
 8001648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800164c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	330c      	adds	r3, #12
 8001652:	3a7d      	subs	r2, #125	@ 0x7d
 8001654:	601a      	str	r2, [r3, #0]
		 if(Local_channel_1_flag==0){
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d103      	bne.n	8001664 <MTimer_voidGetPulseFullTimer+0x11c>
			 Copy_uint32DataArray[0]=0xFFFF;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001662:	601a      	str	r2, [r3, #0]
		 if(Local_channel_2_flag==0){
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d104      	bne.n	8001674 <MTimer_voidGetPulseFullTimer+0x12c>
			 Copy_uint32DataArray[1]=0xFFFF;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3304      	adds	r3, #4
 800166e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001672:	601a      	str	r2, [r3, #0]
		 if(Local_channel_3_flag==0){
 8001674:	7b7b      	ldrb	r3, [r7, #13]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <MTimer_voidGetPulseFullTimer+0x13c>
			 Copy_uint32DataArray[2]=0xFFFF;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	3308      	adds	r3, #8
 800167e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001682:	601a      	str	r2, [r3, #0]
		 if(Local_channel_4_flag==0){
 8001684:	7b3b      	ldrb	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 8087 	bne.w	800179a <MTimer_voidGetPulseFullTimer+0x252>
			 Copy_uint32DataArray[3]=0xFFFF;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	330c      	adds	r3, #12
 8001690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001694:	601a      	str	r2, [r3, #0]
	break;
 8001696:	e080      	b.n	800179a <MTimer_voidGetPulseFullTimer+0x252>
	TIMER3->CNT=0x0000;
 8001698:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24
		SET_BIT(TIMER3->CR1,0);
 800169e:	4b43      	ldr	r3, [pc, #268]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a42      	ldr	r2, [pc, #264]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3->SR,0);
 80016aa:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	4a3f      	ldr	r2, [pc, #252]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6113      	str	r3, [r2, #16]
			if(TIMER3->CNT==ULTRA_MAX_TICKS){
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	f642 526a 	movw	r2, #11626	@ 0x2d6a
 80016be:	4293      	cmp	r3, r2
 80016c0:	d02a      	beq.n	8001718 <MTimer_voidGetPulseFullTimer+0x1d0>
			if(GET_BIT(TIMER3->SR,0) == 1){
 80016c2:	4b3a      	ldr	r3, [pc, #232]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d026      	beq.n	800171c <MTimer_voidGetPulseFullTimer+0x1d4>
			 if(GET_BIT(TIMER3->SR,1)==1){
 80016ce:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	085b      	lsrs	r3, r3, #1
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <MTimer_voidGetPulseFullTimer+0x198>
				 Local_channel_1_flag=1;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
			 if(GET_BIT(TIMER3->SR,2)==1){
 80016e0:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <MTimer_voidGetPulseFullTimer+0x1aa>
				Local_channel_2_flag=1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73bb      	strb	r3, [r7, #14]
			 if(GET_BIT(TIMER3->SR,3)==1){
 80016f2:	4b2e      	ldr	r3, [pc, #184]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <MTimer_voidGetPulseFullTimer+0x1bc>
				Local_channel_3_flag=1;
 8001700:	2301      	movs	r3, #1
 8001702:	737b      	strb	r3, [r7, #13]
			 if(GET_BIT(TIMER3->SR,4)==1){
 8001704:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d1d1      	bne.n	80016b6 <MTimer_voidGetPulseFullTimer+0x16e>
				Local_channel_4_flag=1;
 8001712:	2301      	movs	r3, #1
 8001714:	733b      	strb	r3, [r7, #12]
			if(TIMER3->CNT==ULTRA_MAX_TICKS){
 8001716:	e7ce      	b.n	80016b6 <MTimer_voidGetPulseFullTimer+0x16e>
				break;
 8001718:	bf00      	nop
 800171a:	e000      	b.n	800171e <MTimer_voidGetPulseFullTimer+0x1d6>
				break;
 800171c:	bf00      	nop
		 CLR_BIT(TIMER3->CR1,0);
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a22      	ldr	r2, [pc, #136]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6013      	str	r3, [r2, #0]
		 Copy_uint32DataArray[0]=(TIMER3->CCR1)-125;
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 800172c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172e:	f1a3 027d 	sub.w	r2, r3, #125	@ 0x7d
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	601a      	str	r2, [r3, #0]
		 Copy_uint32DataArray[1]=(TIMER3->CCR2)-125;
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 8001738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3304      	adds	r3, #4
 800173e:	3a7d      	subs	r2, #125	@ 0x7d
 8001740:	601a      	str	r2, [r3, #0]
		 Copy_uint32DataArray[2]=(TIMER3->CCR3)-125;
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 8001744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3308      	adds	r3, #8
 800174a:	3a7d      	subs	r2, #125	@ 0x7d
 800174c:	601a      	str	r2, [r3, #0]
		 Copy_uint32DataArray[3]=(TIMER3->CCR4)-125;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MTimer_voidGetPulseFullTimer+0x264>)
 8001750:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	330c      	adds	r3, #12
 8001756:	3a7d      	subs	r2, #125	@ 0x7d
 8001758:	601a      	str	r2, [r3, #0]
		 if(Local_channel_1_flag==0){
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d103      	bne.n	8001768 <MTimer_voidGetPulseFullTimer+0x220>
			 Copy_uint32DataArray[0]=0xFFFF;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001766:	601a      	str	r2, [r3, #0]
		 if(Local_channel_2_flag==0){
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d104      	bne.n	8001778 <MTimer_voidGetPulseFullTimer+0x230>
			 Copy_uint32DataArray[1]=0xFFFF;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3304      	adds	r3, #4
 8001772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001776:	601a      	str	r2, [r3, #0]
		 if(Local_channel_3_flag==0){
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d104      	bne.n	8001788 <MTimer_voidGetPulseFullTimer+0x240>
			 Copy_uint32DataArray[2]=0xFFFF;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3308      	adds	r3, #8
 8001782:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001786:	601a      	str	r2, [r3, #0]
		 if(Local_channel_4_flag==0){
 8001788:	7b3b      	ldrb	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d107      	bne.n	800179e <MTimer_voidGetPulseFullTimer+0x256>
			 Copy_uint32DataArray[3]=0xFFFF;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	330c      	adds	r3, #12
 8001792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001796:	601a      	str	r2, [r3, #0]
	break;
 8001798:	e001      	b.n	800179e <MTimer_voidGetPulseFullTimer+0x256>
	break;
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <MTimer_voidGetPulseFullTimer+0x258>
	break;
 800179e:	bf00      	nop
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40000400 	.word	0x40000400

080017b0 <MSYSTICK_voidInit>:
#include "../Inc/MCAL/SYSTIC/MSYSTICK_private.h"
#include "../Inc/MCAL/SYSTIC/MSYSTICK_config.h"

uint32 Global_ORIGINAL_TICKS =0;
uint8 Global_uint8PeriodicCheckBit = 0;
void MSYSTICK_voidInit(void){
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
    #if  SYSTICK_CLOCK_SOURCE == AHB
    SET_BIT(STK_CTRL,2);
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <MSYSTICK_voidInit+0x24>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a06      	ldr	r2, [pc, #24]	@ (80017d4 <MSYSTICK_voidInit+0x24>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6013      	str	r3, [r2, #0]
        #error("You chosed wrong SYSTICK_CLOCK_SOURCE ")
    #endif
    #if SYSTICK_INT_EN == ENABLE
            SET_BIT(STK_CTRL,1);
    #elif SYSTICK_INT_EN ==DISABLE
            CLR_BIT(STK_CTRL,1);
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <MSYSTICK_voidInit+0x24>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a03      	ldr	r2, [pc, #12]	@ (80017d4 <MSYSTICK_voidInit+0x24>)
 80017c6:	f023 0302 	bic.w	r3, r3, #2
 80017ca:	6013      	str	r3, [r2, #0]
    #else
        #error("You chosed wrong SYSTICK_INT_ENALBE ")
    #endif
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <MYSYSTICK_voidSet_BusyWait>:
void MYSYSTICK_voidSet_BusyWait(uint32 Copy_uint32Ticks){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    STK_LOAD = Copy_uint32Ticks;
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <MYSYSTICK_voidSet_BusyWait+0x34>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
    SET_BIT(STK_CTRL,0);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <MYSYSTICK_voidSet_BusyWait+0x38>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a09      	ldr	r2, [pc, #36]	@ (8001810 <MYSYSTICK_voidSet_BusyWait+0x38>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6013      	str	r3, [r2, #0]
    while(GET_BIT(STK_CTRL,16) == 0);
 80017f2:	bf00      	nop
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <MYSYSTICK_voidSet_BusyWait+0x38>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f9      	beq.n	80017f4 <MYSYSTICK_voidSet_BusyWait+0x1c>
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	e000e014 	.word	0xe000e014
 8001810:	e000e010 	.word	0xe000e010

08001814 <MSYSTICK_voidDelay_uS>:
}
void MSYSTICK_voidDelay_MS(uint32 Copy_uint8MS){
	Copy_uint8MS = (Copy_uint8MS*(SYSTICK_CLOCK/1000));
		MYSYSTICK_voidSet_BusyWait(Copy_uint8MS);
}
void MSYSTICK_voidDelay_uS(uint32 Copy_uint32uS){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	Copy_uint32uS = (Copy_uint32uS*(SYSTICK_CLOCK/1000000));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	607b      	str	r3, [r7, #4]
	MYSYSTICK_voidSet_BusyWait(Copy_uint32uS);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffd8 	bl	80017d8 <MYSYSTICK_voidSet_BusyWait>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <SysTick_Handler>:
void SysTick_Handler(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    Callback_function();
 8001834:	4b02      	ldr	r3, [pc, #8]	@ (8001840 <SysTick_Handler+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4798      	blx	r3
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000001c 	.word	0x2000001c

08001844 <MRCC_voidEnableClock>:
#include "../Inc/MCAL/RCC/RCC_interface.h"
#include "../Inc/MCAL/RCC/RCC_private.h"
#include "../Inc/MCAL/RCC/RCC_config.h"


void MRCC_voidEnableClock(uint8  copy_uint8BusId,uint32 copy_uint32PeriId ){
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
    if(copy_uint32PeriId<32){
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2b1f      	cmp	r3, #31
 8001854:	d82a      	bhi.n	80018ac <MRCC_voidEnableClock+0x68>
        switch(copy_uint8BusId){
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d01c      	beq.n	8001896 <MRCC_voidEnableClock+0x52>
 800185c:	2b02      	cmp	r3, #2
 800185e:	dc25      	bgt.n	80018ac <MRCC_voidEnableClock+0x68>
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <MRCC_voidEnableClock+0x26>
 8001864:	2b01      	cmp	r3, #1
 8001866:	d00b      	beq.n	8001880 <MRCC_voidEnableClock+0x3c>
        }
    }
    else{
        /*return error*/
    }
}
 8001868:	e020      	b.n	80018ac <MRCC_voidEnableClock+0x68>
            case RCC_AHB: SET_BIT(RCC_AHBENR,copy_uint32PeriId);     break;
 800186a:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <MRCC_voidEnableClock+0x74>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2101      	movs	r1, #1
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
 8001876:	4611      	mov	r1, r2
 8001878:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <MRCC_voidEnableClock+0x74>)
 800187a:	430b      	orrs	r3, r1
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e015      	b.n	80018ac <MRCC_voidEnableClock+0x68>
            case RCC_APB1: SET_BIT(RCC_APB1ENR,copy_uint32PeriId);     break;
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <MRCC_voidEnableClock+0x78>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2101      	movs	r1, #1
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	4611      	mov	r1, r2
 800188e:	4a0b      	ldr	r2, [pc, #44]	@ (80018bc <MRCC_voidEnableClock+0x78>)
 8001890:	430b      	orrs	r3, r1
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e00a      	b.n	80018ac <MRCC_voidEnableClock+0x68>
            case RCC_APB2: SET_BIT(RCC_APB2ENR,copy_uint32PeriId);     break;
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <MRCC_voidEnableClock+0x7c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2101      	movs	r1, #1
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	4611      	mov	r1, r2
 80018a4:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <MRCC_voidEnableClock+0x7c>)
 80018a6:	430b      	orrs	r3, r1
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	bf00      	nop
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40021014 	.word	0x40021014
 80018bc:	4002101c 	.word	0x4002101c
 80018c0:	40021018 	.word	0x40021018

080018c4 <MRCC_voidInitClock>:
    }
    else{
        /*return error*/
    }
}
void MRCC_voidInitClock(void){
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    #if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
    RCC_CR = 0x00010000;     //Enable HSE With Crystal no bybass
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MRCC_voidInitClock+0x38>)
 80018ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018ce:	601a      	str	r2, [r3, #0]
    #endif 

    #if         SYSTEM_CLOCK_SOURCE == SYSTEM_CLOCK_HSI
                RCC_CFGR |= 0x00000000;
    #elif       SYSTEM_CLOCK_SOURCE == SYSTEM_CLOCK_HSE
                RCC_CFGR |= 0x00000001;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <MRCC_voidInitClock+0x3c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <MRCC_voidInitClock+0x3c>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6013      	str	r3, [r2, #0]
                RCC_CFGR |= 0x00000003;
    #else 
                #error("You chosed wrong SYSTEM INPUT CLOCK")
    #endif
                /*SET APB1 , APB2, AHB PRESCALLERS*/
                RCC_CFGR |= ( RCC_AHB_PRESCALLER<< 4);
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <MRCC_voidInitClock+0x3c>)
 80018de:	4a08      	ldr	r2, [pc, #32]	@ (8001900 <MRCC_voidInitClock+0x3c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6013      	str	r3, [r2, #0]
                RCC_CFGR |= ( RCC_APB1_PRESCALLER<< 8);
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <MRCC_voidInitClock+0x3c>)
 80018e6:	4a06      	ldr	r2, [pc, #24]	@ (8001900 <MRCC_voidInitClock+0x3c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6013      	str	r3, [r2, #0]
                RCC_CFGR |= ( RCC_APB2_PRESCALLER<< 11);
 80018ec:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <MRCC_voidInitClock+0x3c>)
 80018ee:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <MRCC_voidInitClock+0x3c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	40021000 	.word	0x40021000
 8001900:	40021004 	.word	0x40021004

08001904 <MUSART_voidInit>:

#include "../Inc/MCAL/USART/UART_interface.h"
#include "../Inc/MCAL/USART/UART_private.h"
#include "../Inc/MCAL/USART/UART_config.h"

void MUSART_voidInit(uint8 Copy_uint8USARTNo){
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
    switch (Copy_uint8USARTNo)
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d044      	beq.n	800199e <MUSART_voidInit+0x9a>
 8001914:	2b02      	cmp	r3, #2
 8001916:	dc61      	bgt.n	80019dc <MUSART_voidInit+0xd8>
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <MUSART_voidInit+0x1e>
 800191c:	2b01      	cmp	r3, #1
 800191e:	d01f      	beq.n	8001960 <MUSART_voidInit+0x5c>
        USART3->BRR |= (USART3_BAUDRATE_MANTISA<<4);
        //enable Transmission
        SET_BIT(USART3->CR1,TE_BIT);
        break;
    }
}
 8001920:	e05c      	b.n	80019dc <MUSART_voidInit+0xd8>
        SET_BIT(USART1->CR1,UE_BIT);
 8001922:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <MUSART_voidInit+0xe4>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	4a30      	ldr	r2, [pc, #192]	@ (80019e8 <MUSART_voidInit+0xe4>)
 8001928:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800192c:	60d3      	str	r3, [r2, #12]
        CLR_BIT(USART1->CR1,M_BIT);
 800192e:	4b2e      	ldr	r3, [pc, #184]	@ (80019e8 <MUSART_voidInit+0xe4>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	4a2d      	ldr	r2, [pc, #180]	@ (80019e8 <MUSART_voidInit+0xe4>)
 8001934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001938:	60d3      	str	r3, [r2, #12]
        USART1->BRR |= USART1_BAUDRATE_DIV;
 800193a:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <MUSART_voidInit+0xe4>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4a2a      	ldr	r2, [pc, #168]	@ (80019e8 <MUSART_voidInit+0xe4>)
 8001940:	f043 0306 	orr.w	r3, r3, #6
 8001944:	6093      	str	r3, [r2, #8]
        USART1->BRR |= (USART1_BAUDRATE_MANTISA<<4);
 8001946:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <MUSART_voidInit+0xe4>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	4a27      	ldr	r2, [pc, #156]	@ (80019e8 <MUSART_voidInit+0xe4>)
 800194c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001950:	6093      	str	r3, [r2, #8]
        SET_BIT(USART1->CR1,TE_BIT);
 8001952:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <MUSART_voidInit+0xe4>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <MUSART_voidInit+0xe4>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	60d3      	str	r3, [r2, #12]
        break;
 800195e:	e03d      	b.n	80019dc <MUSART_voidInit+0xd8>
        SET_BIT(USART2->CR1,UE_BIT);
 8001960:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <MUSART_voidInit+0xe8>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <MUSART_voidInit+0xe8>)
 8001966:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800196a:	60d3      	str	r3, [r2, #12]
        CLR_BIT(USART2->CR1,M_BIT);
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <MUSART_voidInit+0xe8>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4a1e      	ldr	r2, [pc, #120]	@ (80019ec <MUSART_voidInit+0xe8>)
 8001972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001976:	60d3      	str	r3, [r2, #12]
        USART2->BRR |= USART2_BAUDRATE_DIV;
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <MUSART_voidInit+0xe8>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <MUSART_voidInit+0xe8>)
 800197e:	f043 0306 	orr.w	r3, r3, #6
 8001982:	6093      	str	r3, [r2, #8]
        USART2->BRR |= (USART2_BAUDRATE_MANTISA<<4);
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <MUSART_voidInit+0xe8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <MUSART_voidInit+0xe8>)
 800198a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800198e:	6093      	str	r3, [r2, #8]
        SET_BIT(USART2->CR1,TE_BIT);
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <MUSART_voidInit+0xe8>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a15      	ldr	r2, [pc, #84]	@ (80019ec <MUSART_voidInit+0xe8>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	60d3      	str	r3, [r2, #12]
        break;
 800199c:	e01e      	b.n	80019dc <MUSART_voidInit+0xd8>
        SET_BIT(USART3->CR1,UE_BIT);
 800199e:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	4a13      	ldr	r2, [pc, #76]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019a8:	60d3      	str	r3, [r2, #12]
        CLR_BIT(USART3->CR1,M_BIT);
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4a10      	ldr	r2, [pc, #64]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b4:	60d3      	str	r3, [r2, #12]
        USART3->BRR |= USART3_BAUDRATE_DIV;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6093      	str	r3, [r2, #8]
        USART3->BRR |= (USART3_BAUDRATE_MANTISA<<4);
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019c8:	f443 7350 	orr.w	r3, r3, #832	@ 0x340
 80019cc:	6093      	str	r3, [r2, #8]
        SET_BIT(USART3->CR1,TE_BIT);
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	4a07      	ldr	r2, [pc, #28]	@ (80019f0 <MUSART_voidInit+0xec>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	60d3      	str	r3, [r2, #12]
        break;
 80019da:	bf00      	nop
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40004400 	.word	0x40004400
 80019f0:	40004800 	.word	0x40004800

080019f4 <MUSART_voidSendByte>:
void MUSART_voidSendByte(uint8 Copy_uint8USARTNo,uint8 Copy_uint8Data){
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71bb      	strb	r3, [r7, #6]
    switch (Copy_uint8USARTNo)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d01c      	beq.n	8001a44 <MUSART_voidSendByte+0x50>
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	dc25      	bgt.n	8001a5a <MUSART_voidSendByte+0x66>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <MUSART_voidSendByte+0x24>
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00b      	beq.n	8001a2e <MUSART_voidSendByte+0x3a>
        while(GET_BIT(USART3->SR,TC_FLAG)==0);
        //LOAD DATA
        USART3->DR=Copy_uint8Data;
        break;
    }
}
 8001a16:	e020      	b.n	8001a5a <MUSART_voidSendByte+0x66>
        while(GET_BIT(USART1->SR,TC_FLAG)==0);
 8001a18:	bf00      	nop
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <MUSART_voidSendByte+0x70>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f9      	beq.n	8001a1a <MUSART_voidSendByte+0x26>
        USART1->DR=Copy_uint8Data;
 8001a26:	4a0f      	ldr	r2, [pc, #60]	@ (8001a64 <MUSART_voidSendByte+0x70>)
 8001a28:	79bb      	ldrb	r3, [r7, #6]
 8001a2a:	6053      	str	r3, [r2, #4]
        break;
 8001a2c:	e015      	b.n	8001a5a <MUSART_voidSendByte+0x66>
        while(GET_BIT(USART2->SR,TC_FLAG)==0);
 8001a2e:	bf00      	nop
 8001a30:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <MUSART_voidSendByte+0x74>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f9      	beq.n	8001a30 <MUSART_voidSendByte+0x3c>
        USART2->DR=Copy_uint8Data;
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <MUSART_voidSendByte+0x74>)
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	6053      	str	r3, [r2, #4]
        break;
 8001a42:	e00a      	b.n	8001a5a <MUSART_voidSendByte+0x66>
        while(GET_BIT(USART3->SR,TC_FLAG)==0);
 8001a44:	bf00      	nop
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MUSART_voidSendByte+0x78>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f9      	beq.n	8001a46 <MUSART_voidSendByte+0x52>
        USART3->DR=Copy_uint8Data;
 8001a52:	4a06      	ldr	r2, [pc, #24]	@ (8001a6c <MUSART_voidSendByte+0x78>)
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	6053      	str	r3, [r2, #4]
        break;
 8001a58:	bf00      	nop
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40013800 	.word	0x40013800
 8001a68:	40004400 	.word	0x40004400
 8001a6c:	40004800 	.word	0x40004800

08001a70 <MUSART_voidSendWord>:
    	        CLR_BIT(USART3->CR1,RE_BIT);
        break;
    }
    return Local_data;
}
void MUSART_voidSendWord(uint8 Copy_uint8USARTNo,uint8 *Copyuint8String){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
	uint8 i = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]
	while (Copyuint8String[i] != '\0')
 8001a80:	e00b      	b.n	8001a9a <MUSART_voidSendWord+0x2a>
	{
		MUSART_voidSendByte(Copy_uint8USARTNo,Copyuint8String[i]);
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ffb0 	bl	80019f4 <MUSART_voidSendByte>
		i++;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	3301      	adds	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
	while (Copyuint8String[i] != '\0')
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ed      	bne.n	8001a82 <MUSART_voidSendWord+0x12>
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HUltrasonic_voidInitX4>:

		}


}
void HUltrasonic_voidInitX4(uint8 Copy_uint8TIMERNO){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	MRCC_voidInitClock();
 8001aba:	f7ff ff03 	bl	80018c4 <MRCC_voidInitClock>
	MSYSTICK_voidInit();
 8001abe:	f7ff fe77 	bl	80017b0 <MSYSTICK_voidInit>
	switch(Copy_uint8TIMERNO){
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HUltrasonic_voidInitX4+0x1e>
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d039      	beq.n	8001b40 <HUltrasonic_voidInitX4+0x90>
				MDIO_voidSetDirection(ULTRA_2_X4_TRIG_PORT ,ULTRA_2_X4_TRIG_PIN ,OUTPUT_10MHZ_PUSH_PULL);

				MDIO_voidWrite_D_pin(ULTRA_2_X4_TRIG_PORT , ULTRA_2_X4_TRIG_PIN ,LOW);
		break;
	}
}
 8001acc:	e071      	b.n	8001bb2 <HUltrasonic_voidInitX4+0x102>
		MRCC_voidEnableClock(RCC_APB1,ULTRA_1_X4_TIMER_NO );
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff feb7 	bl	8001844 <MRCC_voidEnableClock>
		MTimer_voidInitInputCapture(ULTRA_1_X4_TIMER_NO,ULTRA1_CHANNEL_NO);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fb3b 	bl	8001154 <MTimer_voidInitInputCapture>
		MTimer_voidInitInputCapture(ULTRA_1_X4_TIMER_NO,ULTRA2_CHANNEL_NO);
 8001ade:	2101      	movs	r1, #1
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fb37 	bl	8001154 <MTimer_voidInitInputCapture>
		MTimer_voidInitInputCapture(ULTRA_1_X4_TIMER_NO,ULTRA3_CHANNEL_NO);
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fb33 	bl	8001154 <MTimer_voidInitInputCapture>
		MTimer_voidInitInputCapture(ULTRA_1_X4_TIMER_NO,ULTRA4_CHANNEL_NO);
 8001aee:	2103      	movs	r1, #3
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fb2f 	bl	8001154 <MTimer_voidInitInputCapture>
		MDIO_INIT(PORTA);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff f932 	bl	8000d60 <MDIO_INIT>
		MDIO_INIT(PORTB);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff f92f 	bl	8000d60 <MDIO_INIT>
		MDIO_voidSetDirection(ULTRA1_PORT_NO ,ULTRA1_ECHO_PIN ,INPUT_FLOATING);
 8001b02:	2204      	movs	r2, #4
 8001b04:	2100      	movs	r1, #0
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff f93c 	bl	8000d84 <MDIO_voidSetDirection>
		MDIO_voidSetDirection(ULTRA2_PORT_NO ,ULTRA2_ECHO_PIN ,INPUT_FLOATING);
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff f937 	bl	8000d84 <MDIO_voidSetDirection>
		MDIO_voidSetDirection(ULTRA3_PORT_NO ,ULTRA3_ECHO_PIN ,INPUT_FLOATING);
 8001b16:	2204      	movs	r2, #4
 8001b18:	2102      	movs	r1, #2
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff f932 	bl	8000d84 <MDIO_voidSetDirection>
		MDIO_voidSetDirection(ULTRA4_PORT_NO ,ULTRA4_ECHO_PIN ,INPUT_FLOATING);
 8001b20:	2204      	movs	r2, #4
 8001b22:	2103      	movs	r1, #3
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff f92d 	bl	8000d84 <MDIO_voidSetDirection>
		MDIO_voidSetDirection(ULTRA_1_X4_TRIG_PORT ,ULTRA_1_X4_TRIG_PIN ,OUTPUT_10MHZ_PUSH_PULL);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2103      	movs	r1, #3
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f7ff f928 	bl	8000d84 <MDIO_voidSetDirection>
		MDIO_voidWrite_D_pin(ULTRA_1_X4_TRIG_PORT , ULTRA_1_X4_TRIG_PIN ,LOW);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2103      	movs	r1, #3
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff fa55 	bl	8000fe8 <MDIO_voidWrite_D_pin>
		break;
 8001b3e:	e038      	b.n	8001bb2 <HUltrasonic_voidInitX4+0x102>
				MRCC_voidEnableClock(RCC_APB1,ULTRA_2_X4_TIMER_NO );
 8001b40:	2101      	movs	r1, #1
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7ff fe7e 	bl	8001844 <MRCC_voidEnableClock>
				MTimer_voidInitInputCapture(ULTRA_2_X4_TIMER_NO,ULTRA5_CHANNEL_NO);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff fb02 	bl	8001154 <MTimer_voidInitInputCapture>
				MTimer_voidInitInputCapture(ULTRA_2_X4_TIMER_NO,ULTRA6_CHANNEL_NO);
 8001b50:	2101      	movs	r1, #1
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff fafe 	bl	8001154 <MTimer_voidInitInputCapture>
				MTimer_voidInitInputCapture(ULTRA_2_X4_TIMER_NO,ULTRA7_CHANNEL_NO);
 8001b58:	2102      	movs	r1, #2
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f7ff fafa 	bl	8001154 <MTimer_voidInitInputCapture>
				MTimer_voidInitInputCapture(ULTRA_2_X4_TIMER_NO,ULTRA8_CHANNEL_NO);
 8001b60:	2103      	movs	r1, #3
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff faf6 	bl	8001154 <MTimer_voidInitInputCapture>
				MDIO_INIT(PORTA);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff f8f9 	bl	8000d60 <MDIO_INIT>
				MDIO_INIT(PORTB);
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7ff f8f6 	bl	8000d60 <MDIO_INIT>
				MDIO_voidSetDirection(ULTRA5_PORT_NO ,ULTRA5_ECHO_PIN ,INPUT_FLOATING);
 8001b74:	2204      	movs	r2, #4
 8001b76:	2106      	movs	r1, #6
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff f903 	bl	8000d84 <MDIO_voidSetDirection>
				MDIO_voidSetDirection(ULTRA6_PORT_NO ,ULTRA6_ECHO_PIN ,INPUT_FLOATING);
 8001b7e:	2204      	movs	r2, #4
 8001b80:	2107      	movs	r1, #7
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff f8fe 	bl	8000d84 <MDIO_voidSetDirection>
				MDIO_voidSetDirection(ULTRA7_PORT_NO ,ULTRA7_ECHO_PIN ,INPUT_FLOATING);
 8001b88:	2204      	movs	r2, #4
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff f8f9 	bl	8000d84 <MDIO_voidSetDirection>
				MDIO_voidSetDirection(ULTRA8_PORT_NO ,ULTRA8_ECHO_PIN ,INPUT_FLOATING);
 8001b92:	2204      	movs	r2, #4
 8001b94:	2101      	movs	r1, #1
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff f8f4 	bl	8000d84 <MDIO_voidSetDirection>
				MDIO_voidSetDirection(ULTRA_2_X4_TRIG_PORT ,ULTRA_2_X4_TRIG_PIN ,OUTPUT_10MHZ_PUSH_PULL);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff f8ef 	bl	8000d84 <MDIO_voidSetDirection>
				MDIO_voidWrite_D_pin(ULTRA_2_X4_TRIG_PORT , ULTRA_2_X4_TRIG_PIN ,LOW);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2104      	movs	r1, #4
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff fa1c 	bl	8000fe8 <MDIO_voidWrite_D_pin>
		break;
 8001bb0:	bf00      	nop
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	0000      	movs	r0, r0
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <HUltrasonic_uint32GetDisX4>:
				return cm;
				break;

			}
}
void HUltrasonic_uint32GetDisX4(uint8 Copy_uint8TIMERNO,uint32 *Copy_uint32DisArray){
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
	uint32 Local_uint32UltrasonicData[4];
	switch(Copy_uint8TIMERNO){
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HUltrasonic_uint32GetDisX4+0x1a>
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	f000 8096 	beq.w	8001d04 <HUltrasonic_uint32GetDisX4+0x144>
			Copy_uint32DisArray[3]=0xFFFF;
							 }
		break;
	}

}
 8001bd8:	e12b      	b.n	8001e32 <HUltrasonic_uint32GetDisX4+0x272>
				MDIO_voidWrite_D_pin(PORTB ,ULTRA_1_X4_TRIG_PIN ,LOW);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2103      	movs	r1, #3
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff fa02 	bl	8000fe8 <MDIO_voidWrite_D_pin>
				MSYSTICK_voidDelay_uS(5);
 8001be4:	2005      	movs	r0, #5
 8001be6:	f7ff fe15 	bl	8001814 <MSYSTICK_voidDelay_uS>
				MDIO_voidWrite_D_pin(PORTB ,ULTRA_1_X4_TRIG_PIN ,HIGH);
 8001bea:	2201      	movs	r2, #1
 8001bec:	2103      	movs	r1, #3
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff f9fa 	bl	8000fe8 <MDIO_voidWrite_D_pin>
				MSYSTICK_voidDelay_uS(10);
 8001bf4:	200a      	movs	r0, #10
 8001bf6:	f7ff fe0d 	bl	8001814 <MSYSTICK_voidDelay_uS>
				MDIO_voidWrite_D_pin(PORTB,ULTRA_1_X4_TRIG_PIN ,LOW);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff f9f2 	bl	8000fe8 <MDIO_voidWrite_D_pin>
				MTimer_voidGetPulseFullTimer(TIMER_2,Local_uint32UltrasonicData);
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	4619      	mov	r1, r3
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fc9c 	bl	8001548 <MTimer_voidGetPulseFullTimer>
				Copy_uint32DisArray[0] = (Local_uint32UltrasonicData[0]/2) / 29.1;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	085b      	lsrs	r3, r3, #1
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fbed 	bl	80003f4 <__aeabi_ui2d>
 8001c1a:	a389      	add	r3, pc, #548	@ (adr r3, 8001e40 <HUltrasonic_uint32GetDisX4+0x280>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fd8c 	bl	800073c <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe fe6e 	bl	800090c <__aeabi_d2uiz>
 8001c30:	4602      	mov	r2, r0
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	601a      	str	r2, [r3, #0]
				Copy_uint32DisArray[1] = (Local_uint32UltrasonicData[1]/2) / 29.1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fbda 	bl	80003f4 <__aeabi_ui2d>
 8001c40:	a37f      	add	r3, pc, #508	@ (adr r3, 8001e40 <HUltrasonic_uint32GetDisX4+0x280>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fd79 	bl	800073c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	1d1c      	adds	r4, r3, #4
 8001c56:	f7fe fe59 	bl	800090c <__aeabi_d2uiz>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6023      	str	r3, [r4, #0]
				Copy_uint32DisArray[2] = (Local_uint32UltrasonicData[2]/2) / 29.1;
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fbc6 	bl	80003f4 <__aeabi_ui2d>
 8001c68:	a375      	add	r3, pc, #468	@ (adr r3, 8001e40 <HUltrasonic_uint32GetDisX4+0x280>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fd65 	bl	800073c <__aeabi_ddiv>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f103 0408 	add.w	r4, r3, #8
 8001c80:	f7fe fe44 	bl	800090c <__aeabi_d2uiz>
 8001c84:	4603      	mov	r3, r0
 8001c86:	6023      	str	r3, [r4, #0]
				Copy_uint32DisArray[3] = (Local_uint32UltrasonicData[3]/2) / 29.1;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fbb1 	bl	80003f4 <__aeabi_ui2d>
 8001c92:	a36b      	add	r3, pc, #428	@ (adr r3, 8001e40 <HUltrasonic_uint32GetDisX4+0x280>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fd50 	bl	800073c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f103 040c 	add.w	r4, r3, #12
 8001caa:	f7fe fe2f 	bl	800090c <__aeabi_d2uiz>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6023      	str	r3, [r4, #0]
				if(Local_uint32UltrasonicData[0]==0xFFFF){
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d103      	bne.n	8001cc4 <HUltrasonic_uint32GetDisX4+0x104>
					Copy_uint32DisArray[0]=0xFFFF;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc2:	601a      	str	r2, [r3, #0]
				if(Local_uint32UltrasonicData[1]==0xFFFF){
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d104      	bne.n	8001cd8 <HUltrasonic_uint32GetDisX4+0x118>
					Copy_uint32DisArray[1]=0xFFFF;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cd6:	601a      	str	r2, [r3, #0]
				if(Local_uint32UltrasonicData[2]==0xFFFF){
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d104      	bne.n	8001cec <HUltrasonic_uint32GetDisX4+0x12c>
					Copy_uint32DisArray[2]=0xFFFF;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3308      	adds	r3, #8
 8001ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cea:	601a      	str	r2, [r3, #0]
				if(Local_uint32UltrasonicData[3]==0xFFFF){
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	f040 809a 	bne.w	8001e2c <HUltrasonic_uint32GetDisX4+0x26c>
					Copy_uint32DisArray[3]=0xFFFF;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d00:	601a      	str	r2, [r3, #0]
		break;
 8001d02:	e093      	b.n	8001e2c <HUltrasonic_uint32GetDisX4+0x26c>
		MDIO_voidWrite_D_pin(PORTB ,ULTRA_2_X4_TRIG_PIN ,LOW);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2104      	movs	r1, #4
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7ff f96d 	bl	8000fe8 <MDIO_voidWrite_D_pin>
		MSYSTICK_voidDelay_uS(5);
 8001d0e:	2005      	movs	r0, #5
 8001d10:	f7ff fd80 	bl	8001814 <MSYSTICK_voidDelay_uS>
		MDIO_voidWrite_D_pin(PORTB ,ULTRA_2_X4_TRIG_PIN ,HIGH);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2104      	movs	r1, #4
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f7ff f965 	bl	8000fe8 <MDIO_voidWrite_D_pin>
		MSYSTICK_voidDelay_uS(10);
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f7ff fd78 	bl	8001814 <MSYSTICK_voidDelay_uS>
		MDIO_voidWrite_D_pin(PORTB,ULTRA_2_X4_TRIG_PIN ,LOW);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2104      	movs	r1, #4
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff f95d 	bl	8000fe8 <MDIO_voidWrite_D_pin>
		MTimer_voidGetPulseFullTimer(TIMER_3,Local_uint32UltrasonicData);
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	4619      	mov	r1, r3
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff fc07 	bl	8001548 <MTimer_voidGetPulseFullTimer>
		Copy_uint32DisArray[0] = (Local_uint32UltrasonicData[0]/2) / 29.1;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fb58 	bl	80003f4 <__aeabi_ui2d>
 8001d44:	a33e      	add	r3, pc, #248	@ (adr r3, 8001e40 <HUltrasonic_uint32GetDisX4+0x280>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fcf7 	bl	800073c <__aeabi_ddiv>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	f7fe fdd9 	bl	800090c <__aeabi_d2uiz>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	601a      	str	r2, [r3, #0]
		Copy_uint32DisArray[1] = (Local_uint32UltrasonicData[1]/2) / 29.1;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fb45 	bl	80003f4 <__aeabi_ui2d>
 8001d6a:	a335      	add	r3, pc, #212	@ (adr r3, 8001e40 <HUltrasonic_uint32GetDisX4+0x280>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fce4 	bl	800073c <__aeabi_ddiv>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	1d1c      	adds	r4, r3, #4
 8001d80:	f7fe fdc4 	bl	800090c <__aeabi_d2uiz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	6023      	str	r3, [r4, #0]
		Copy_uint32DisArray[2] = (Local_uint32UltrasonicData[2]/2) / 29.1;
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fb31 	bl	80003f4 <__aeabi_ui2d>
 8001d92:	a32b      	add	r3, pc, #172	@ (adr r3, 8001e40 <HUltrasonic_uint32GetDisX4+0x280>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fcd0 	bl	800073c <__aeabi_ddiv>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f103 0408 	add.w	r4, r3, #8
 8001daa:	f7fe fdaf 	bl	800090c <__aeabi_d2uiz>
 8001dae:	4603      	mov	r3, r0
 8001db0:	6023      	str	r3, [r4, #0]
		Copy_uint32DisArray[3] = (Local_uint32UltrasonicData[3]/2) / 29.1;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fb1c 	bl	80003f4 <__aeabi_ui2d>
 8001dbc:	a320      	add	r3, pc, #128	@ (adr r3, 8001e40 <HUltrasonic_uint32GetDisX4+0x280>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fcbb 	bl	800073c <__aeabi_ddiv>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f103 040c 	add.w	r4, r3, #12
 8001dd4:	f7fe fd9a 	bl	800090c <__aeabi_d2uiz>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	6023      	str	r3, [r4, #0]
		if(Local_uint32UltrasonicData[0]==0xFFFF){
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d103      	bne.n	8001dee <HUltrasonic_uint32GetDisX4+0x22e>
			Copy_uint32DisArray[0]=0xFFFF;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dec:	601a      	str	r2, [r3, #0]
		if(Local_uint32UltrasonicData[1]==0xFFFF){
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d104      	bne.n	8001e02 <HUltrasonic_uint32GetDisX4+0x242>
			Copy_uint32DisArray[1]=0xFFFF;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e00:	601a      	str	r2, [r3, #0]
		if(Local_uint32UltrasonicData[2]==0xFFFF){
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d104      	bne.n	8001e16 <HUltrasonic_uint32GetDisX4+0x256>
			Copy_uint32DisArray[2]=0xFFFF;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e14:	601a      	str	r2, [r3, #0]
		if(Local_uint32UltrasonicData[3]==0xFFFF){
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d107      	bne.n	8001e30 <HUltrasonic_uint32GetDisX4+0x270>
			Copy_uint32DisArray[3]=0xFFFF;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	330c      	adds	r3, #12
 8001e24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e28:	601a      	str	r2, [r3, #0]
		break;
 8001e2a:	e001      	b.n	8001e30 <HUltrasonic_uint32GetDisX4+0x270>
		break;
 8001e2c:	bf00      	nop
 8001e2e:	e000      	b.n	8001e32 <HUltrasonic_uint32GetDisX4+0x272>
		break;
 8001e30:	bf00      	nop
}
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	9999999a 	.word	0x9999999a
 8001e44:	403d1999 	.word	0x403d1999

08001e48 <REQ_PIN_init>:
/*RECEIVE
 * ((buf[0]<<8)|buf[1])
 */
/******* CAN Transmit Actual Speed *****************/

void REQ_PIN_init(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	MDIO_INIT(PORTA);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7fe ff87 	bl	8000d60 <MDIO_INIT>
	MDIO_voidSetDirection(REQ_PINS_PORT ,P0_PIN ,INPUT_PULL_DOWN);
 8001e52:	2208      	movs	r2, #8
 8001e54:	2104      	movs	r1, #4
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7fe ff94 	bl	8000d84 <MDIO_voidSetDirection>
	MDIO_voidSetDirection(REQ_PINS_PORT ,P1_PIN ,INPUT_PULL_DOWN);
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	2105      	movs	r1, #5
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7fe ff8f 	bl	8000d84 <MDIO_voidSetDirection>
	MDIO_voidSetDirection(REQ_PINS_PORT ,P2_PIN ,INPUT_PULL_DOWN);
 8001e66:	2208      	movs	r2, #8
 8001e68:	2108      	movs	r1, #8
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7fe ff8a 	bl	8000d84 <MDIO_voidSetDirection>
	//MDIO_voidSetDirection(REQ_PINS_PORT ,P3_PIN ,INPUT_PULL_DOWN);
	MUSART_voidSendWord(USART_1,"REQ_init");
 8001e70:	4902      	ldr	r1, [pc, #8]	@ (8001e7c <REQ_PIN_init+0x34>)
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7ff fdfc 	bl	8001a70 <MUSART_voidSendWord>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	08002438 	.word	0x08002438

08001e80 <REQ_PIN_READ>:
void REQ_PIN_READ(void){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	GLOBAL_REQ_PINS_VALUE=0;
 8001e84:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <REQ_PIN_READ+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
	if(MDIO_uint8Read_D_pin(REQ_PINS_PORT,P0_PIN)==1){
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff f925 	bl	80010dc <MDIO_uint8Read_D_pin>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <REQ_PIN_READ+0x26>
		SET_BIT(GLOBAL_REQ_PINS_VALUE,0);
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <REQ_PIN_READ+0x64>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <REQ_PIN_READ+0x64>)
 8001ea4:	701a      	strb	r2, [r3, #0]
	}
	if(MDIO_uint8Read_D_pin(REQ_PINS_PORT,P1_PIN)==1){
 8001ea6:	2105      	movs	r1, #5
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff f917 	bl	80010dc <MDIO_uint8Read_D_pin>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d106      	bne.n	8001ec2 <REQ_PIN_READ+0x42>
		SET_BIT(GLOBAL_REQ_PINS_VALUE,1);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <REQ_PIN_READ+0x64>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <REQ_PIN_READ+0x64>)
 8001ec0:	701a      	strb	r2, [r3, #0]
	}
	if(MDIO_uint8Read_D_pin(REQ_PINS_PORT,P2_PIN)==1){
 8001ec2:	2108      	movs	r1, #8
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff f909 	bl	80010dc <MDIO_uint8Read_D_pin>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <REQ_PIN_READ+0x5e>
		SET_BIT(GLOBAL_REQ_PINS_VALUE,2);
 8001ed0:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <REQ_PIN_READ+0x64>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b02      	ldr	r3, [pc, #8]	@ (8001ee4 <REQ_PIN_READ+0x64>)
 8001edc:	701a      	strb	r2, [r3, #0]
	 MUSART_voidSendWord(USART_1,"REQ_VALUE= ");
	 MUSART_voidSendInt(USART_1,GLOBAL_REQ_PINS_VALUE);
	 MUSART_voidSendWord(USART_1,"\n");

*/
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000067 	.word	0x20000067

08001ee8 <ULTRA_SEND_DIS_REQ>:
void ULTRA_SEND_DIS_REQ(void){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	switch(GLOBAL_REQ_PINS_VALUE){
 8001eec:	4b70      	ldr	r3, [pc, #448]	@ (80020b0 <ULTRA_SEND_DIS_REQ+0x1c8>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	f200 80da 	bhi.w	80020ac <ULTRA_SEND_DIS_REQ+0x1c4>
 8001ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8001f00 <ULTRA_SEND_DIS_REQ+0x18>)
 8001efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efe:	bf00      	nop
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f6b 	.word	0x08001f6b
 8001f08:	08002035 	.word	0x08002035
 8001f0c:	08001fbd 	.word	0x08001fbd
 8001f10:	08002071 	.word	0x08002071
 8001f14:	08001ff9 	.word	0x08001ff9
	case Tx_header_F_INDEX :
		GLobal_CAN_Send_DATA_array[0]=Tx_header_F_Identifier;
 8001f18:	4b66      	ldr	r3, [pc, #408]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f1a:	224f      	movs	r2, #79	@ 0x4f
 8001f1c:	701a      	strb	r2, [r3, #0]
		GLobal_CAN_Send_DATA_array[1]=Global_ULTRA_8X_DISTANCE[0]>>8;
 8001f1e:	4b66      	ldr	r3, [pc, #408]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b63      	ldr	r3, [pc, #396]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f28:	705a      	strb	r2, [r3, #1]
		GLobal_CAN_Send_DATA_array[2]=Global_ULTRA_8X_DISTANCE[0];
 8001f2a:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b60      	ldr	r3, [pc, #384]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f32:	709a      	strb	r2, [r3, #2]
		GLobal_CAN_Send_DATA_array[3]=Global_ULTRA_8X_DISTANCE[4]>>8;
 8001f34:	4b60      	ldr	r3, [pc, #384]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f3e:	70da      	strb	r2, [r3, #3]
		GLobal_CAN_Send_DATA_array[4]=Global_ULTRA_8X_DISTANCE[4];
 8001f40:	4b5d      	ldr	r3, [pc, #372]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b5b      	ldr	r3, [pc, #364]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f48:	711a      	strb	r2, [r3, #4]
		GLobal_CAN_Send_DATA_array[5]=Global_ULTRA_8X_DISTANCE[5]>>8;
 8001f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b58      	ldr	r3, [pc, #352]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f54:	715a      	strb	r2, [r3, #5]
		GLobal_CAN_Send_DATA_array[6]=Global_ULTRA_8X_DISTANCE[5];
 8001f56:	4b58      	ldr	r3, [pc, #352]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b55      	ldr	r3, [pc, #340]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f5e:	719a      	strb	r2, [r3, #6]
		CAN_voidAddTxMsg(&Tx_header_F,GLobal_CAN_Send_DATA_array);
 8001f60:	4954      	ldr	r1, [pc, #336]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f62:	4856      	ldr	r0, [pc, #344]	@ (80020bc <ULTRA_SEND_DIS_REQ+0x1d4>)
 8001f64:	f7fe fd72 	bl	8000a4c <CAN_voidAddTxMsg>
		break;
 8001f68:	e0a0      	b.n	80020ac <ULTRA_SEND_DIS_REQ+0x1c4>
	case Tx_header_B_INDEX:
		GLobal_CAN_Send_DATA_array[0]=Tx_header_B_Identifier;
 8001f6a:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f6c:	2251      	movs	r2, #81	@ 0x51
 8001f6e:	701a      	strb	r2, [r3, #0]
		GLobal_CAN_Send_DATA_array[1]=Global_ULTRA_8X_DISTANCE[2]>>8;
 8001f70:	4b51      	ldr	r3, [pc, #324]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b4e      	ldr	r3, [pc, #312]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f7a:	705a      	strb	r2, [r3, #1]
		GLobal_CAN_Send_DATA_array[2]=Global_ULTRA_8X_DISTANCE[2];
 8001f7c:	4b4e      	ldr	r3, [pc, #312]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b4c      	ldr	r3, [pc, #304]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f84:	709a      	strb	r2, [r3, #2]
		GLobal_CAN_Send_DATA_array[3]=Global_ULTRA_8X_DISTANCE[7]>>8;
 8001f86:	4b4c      	ldr	r3, [pc, #304]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b49      	ldr	r3, [pc, #292]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f90:	70da      	strb	r2, [r3, #3]
		GLobal_CAN_Send_DATA_array[4]=Global_ULTRA_8X_DISTANCE[7];
 8001f92:	4b49      	ldr	r3, [pc, #292]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b46      	ldr	r3, [pc, #280]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001f9a:	711a      	strb	r2, [r3, #4]
		GLobal_CAN_Send_DATA_array[5]=Global_ULTRA_8X_DISTANCE[6]>>8;
 8001f9c:	4b46      	ldr	r3, [pc, #280]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b43      	ldr	r3, [pc, #268]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001fa6:	715a      	strb	r2, [r3, #5]
		GLobal_CAN_Send_DATA_array[6]=Global_ULTRA_8X_DISTANCE[6];
 8001fa8:	4b43      	ldr	r3, [pc, #268]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b41      	ldr	r3, [pc, #260]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001fb0:	719a      	strb	r2, [r3, #6]
		CAN_voidAddTxMsg(&Tx_header_B,GLobal_CAN_Send_DATA_array);
 8001fb2:	4940      	ldr	r1, [pc, #256]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001fb4:	4842      	ldr	r0, [pc, #264]	@ (80020c0 <ULTRA_SEND_DIS_REQ+0x1d8>)
 8001fb6:	f7fe fd49 	bl	8000a4c <CAN_voidAddTxMsg>
		break;
 8001fba:	e077      	b.n	80020ac <ULTRA_SEND_DIS_REQ+0x1c4>
	case Tx_header_F_R_INDEX:
		GLobal_CAN_Send_DATA_array[0]=Tx_header_F_R_Identifier;
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001fbe:	2252      	movs	r2, #82	@ 0x52
 8001fc0:	701a      	strb	r2, [r3, #0]
		GLobal_CAN_Send_DATA_array[1]=Global_ULTRA_8X_DISTANCE[4]>>8;
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b3a      	ldr	r3, [pc, #232]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001fcc:	705a      	strb	r2, [r3, #1]
		GLobal_CAN_Send_DATA_array[2]=Global_ULTRA_8X_DISTANCE[4];
 8001fce:	4b3a      	ldr	r3, [pc, #232]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b37      	ldr	r3, [pc, #220]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001fd6:	709a      	strb	r2, [r3, #2]
		GLobal_CAN_Send_DATA_array[3]=Global_ULTRA_8X_DISTANCE[3]>>8;
 8001fd8:	4b37      	ldr	r3, [pc, #220]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001fe2:	70da      	strb	r2, [r3, #3]
		GLobal_CAN_Send_DATA_array[4]=Global_ULTRA_8X_DISTANCE[3];
 8001fe4:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4b32      	ldr	r3, [pc, #200]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001fec:	711a      	strb	r2, [r3, #4]
		CAN_voidAddTxMsg(&Tx_header_F_R,GLobal_CAN_Send_DATA_array);
 8001fee:	4931      	ldr	r1, [pc, #196]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001ff0:	4834      	ldr	r0, [pc, #208]	@ (80020c4 <ULTRA_SEND_DIS_REQ+0x1dc>)
 8001ff2:	f7fe fd2b 	bl	8000a4c <CAN_voidAddTxMsg>
		break;
 8001ff6:	e059      	b.n	80020ac <ULTRA_SEND_DIS_REQ+0x1c4>
	case Tx_header_F_L_INDEX:
		GLobal_CAN_Send_DATA_array[0]=Tx_header_F_L_Identifier;
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8001ffa:	2253      	movs	r2, #83	@ 0x53
 8001ffc:	701a      	strb	r2, [r3, #0]
		GLobal_CAN_Send_DATA_array[1]=Global_ULTRA_8X_DISTANCE[5]>>8;
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b2b      	ldr	r3, [pc, #172]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002008:	705a      	strb	r2, [r3, #1]
		GLobal_CAN_Send_DATA_array[2]=Global_ULTRA_8X_DISTANCE[5];
 800200a:	4b2b      	ldr	r3, [pc, #172]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002012:	709a      	strb	r2, [r3, #2]
		GLobal_CAN_Send_DATA_array[3]=Global_ULTRA_8X_DISTANCE[1]>>8;
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 800201e:	70da      	strb	r2, [r3, #3]
		GLobal_CAN_Send_DATA_array[4]=Global_ULTRA_8X_DISTANCE[1];
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002028:	711a      	strb	r2, [r3, #4]
		CAN_voidAddTxMsg(&Tx_header_F_L,GLobal_CAN_Send_DATA_array);
 800202a:	4922      	ldr	r1, [pc, #136]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 800202c:	4826      	ldr	r0, [pc, #152]	@ (80020c8 <ULTRA_SEND_DIS_REQ+0x1e0>)
 800202e:	f7fe fd0d 	bl	8000a4c <CAN_voidAddTxMsg>
		break;
 8002032:	e03b      	b.n	80020ac <ULTRA_SEND_DIS_REQ+0x1c4>
	case Tx_header_B_R_INDEX:
		GLobal_CAN_Send_DATA_array[0]=Tx_header_B_R_Identifier;
 8002034:	4b1f      	ldr	r3, [pc, #124]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002036:	2254      	movs	r2, #84	@ 0x54
 8002038:	701a      	strb	r2, [r3, #0]
		GLobal_CAN_Send_DATA_array[1]=Global_ULTRA_8X_DISTANCE[7]>>8;
 800203a:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002044:	705a      	strb	r2, [r3, #1]
		GLobal_CAN_Send_DATA_array[2]=Global_ULTRA_8X_DISTANCE[7];
 8002046:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 800204e:	709a      	strb	r2, [r3, #2]
		GLobal_CAN_Send_DATA_array[3]=Global_ULTRA_8X_DISTANCE[3]>>8;
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 800205a:	70da      	strb	r2, [r3, #3]
		GLobal_CAN_Send_DATA_array[4]=Global_ULTRA_8X_DISTANCE[3];
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002064:	711a      	strb	r2, [r3, #4]
		CAN_voidAddTxMsg(&Tx_header_B_R,GLobal_CAN_Send_DATA_array);
 8002066:	4913      	ldr	r1, [pc, #76]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002068:	4818      	ldr	r0, [pc, #96]	@ (80020cc <ULTRA_SEND_DIS_REQ+0x1e4>)
 800206a:	f7fe fcef 	bl	8000a4c <CAN_voidAddTxMsg>
		break;
 800206e:	e01d      	b.n	80020ac <ULTRA_SEND_DIS_REQ+0x1c4>
	case Tx_header_B_L_INDEX:
		GLobal_CAN_Send_DATA_array[0]=Tx_header_B_L_Identifier;
 8002070:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002072:	2255      	movs	r2, #85	@ 0x55
 8002074:	701a      	strb	r2, [r3, #0]
		GLobal_CAN_Send_DATA_array[1]=Global_ULTRA_8X_DISTANCE[6]>>8;
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002080:	705a      	strb	r2, [r3, #1]
		GLobal_CAN_Send_DATA_array[2]=Global_ULTRA_8X_DISTANCE[6];
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 800208a:	709a      	strb	r2, [r3, #2]
		GLobal_CAN_Send_DATA_array[3]=Global_ULTRA_8X_DISTANCE[1]>>8;
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 8002096:	70da      	strb	r2, [r3, #3]
		GLobal_CAN_Send_DATA_array[4]=Global_ULTRA_8X_DISTANCE[1];
 8002098:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <ULTRA_SEND_DIS_REQ+0x1d0>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 80020a0:	711a      	strb	r2, [r3, #4]
		CAN_voidAddTxMsg(&Tx_header_B_L,GLobal_CAN_Send_DATA_array);
 80020a2:	4904      	ldr	r1, [pc, #16]	@ (80020b4 <ULTRA_SEND_DIS_REQ+0x1cc>)
 80020a4:	480a      	ldr	r0, [pc, #40]	@ (80020d0 <ULTRA_SEND_DIS_REQ+0x1e8>)
 80020a6:	f7fe fcd1 	bl	8000a4c <CAN_voidAddTxMsg>
		break;
 80020aa:	bf00      	nop
	}
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000067 	.word	0x20000067
 80020b4:	20000060 	.word	0x20000060
 80020b8:	20000040 	.word	0x20000040
 80020bc:	200000b0 	.word	0x200000b0
 80020c0:	200000c8 	.word	0x200000c8
 80020c4:	200000e0 	.word	0x200000e0
 80020c8:	200000f8 	.word	0x200000f8
 80020cc:	20000110 	.word	0x20000110
 80020d0:	20000128 	.word	0x20000128

080020d4 <ULTRA_READ_8X>:
void ULTRA_READ_8X(void){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
    HUltrasonic_uint32GetDisX4(ULTRA_2_X4_TIMER_NO_COPY,Copy_uint32DisArray_1);
 80020da:	491a      	ldr	r1, [pc, #104]	@ (8002144 <ULTRA_READ_8X+0x70>)
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff fd6f 	bl	8001bc0 <HUltrasonic_uint32GetDisX4>
    HUltrasonic_uint32GetDisX4(ULTRA_1_X4_TIMER_NO_COPY,Copy_uint32DisArray_2);
 80020e2:	4919      	ldr	r1, [pc, #100]	@ (8002148 <ULTRA_READ_8X+0x74>)
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fd6b 	bl	8001bc0 <HUltrasonic_uint32GetDisX4>
    uint8 i=0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	71fb      	strb	r3, [r7, #7]
    for(i=0;i<=3;i++){
 80020ee:	2300      	movs	r3, #0
 80020f0:	71fb      	strb	r3, [r7, #7]
 80020f2:	e00a      	b.n	800210a <ULTRA_READ_8X+0x36>
    	Global_ULTRA_8X_DISTANCE[i]=Copy_uint32DisArray_1[i];
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	4912      	ldr	r1, [pc, #72]	@ (8002144 <ULTRA_READ_8X+0x70>)
 80020fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80020fe:	4913      	ldr	r1, [pc, #76]	@ (800214c <ULTRA_READ_8X+0x78>)
 8002100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(i=0;i<=3;i++){
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	3301      	adds	r3, #1
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d9f1      	bls.n	80020f4 <ULTRA_READ_8X+0x20>
    }
    for(i=0;i<=3;i++){
 8002110:	2300      	movs	r3, #0
 8002112:	71fb      	strb	r3, [r7, #7]
 8002114:	e00d      	b.n	8002132 <ULTRA_READ_8X+0x5e>
    	Global_ULTRA_8X_DISTANCE[i+4]=Copy_uint32DisArray_1[7-i];
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f1c3 0207 	rsb	r2, r3, #7
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	3304      	adds	r3, #4
 8002120:	4908      	ldr	r1, [pc, #32]	@ (8002144 <ULTRA_READ_8X+0x70>)
 8002122:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002126:	4909      	ldr	r1, [pc, #36]	@ (800214c <ULTRA_READ_8X+0x78>)
 8002128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(i=0;i<=3;i++){
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	3301      	adds	r3, #1
 8002130:	71fb      	strb	r3, [r7, #7]
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d9ee      	bls.n	8002116 <ULTRA_READ_8X+0x42>
    }
   // MUSART_voidSendWord(USART_1,"read ultrasonic");
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000020 	.word	0x20000020
 8002148:	20000030 	.word	0x20000030
 800214c:	20000040 	.word	0x20000040

08002150 <Std_id_High>:
	CAN_voidAddTxMsg(&Tx_header_second_three,global_can_second_three);
}


uint16 Std_id_High(uint16 local_u16Std_Id)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]
	return (local_u16Std_Id << 5);
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	015b      	lsls	r3, r3, #5
 800215e:	b29b      	uxth	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <CAN_FilterConfig>:

void CAN_FilterConfig(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b08a      	sub	sp, #40	@ 0x28
 800216e:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterInit;
	CAN_FilterInit.FilterActivation = ENABLE;
 8002170:	2301      	movs	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
	CAN_FilterInit.FilterBank = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
	CAN_FilterInit.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
	CAN_FilterInit.FilterIdHigh = Std_id_High(0x65d);
 800217c:	f240 605d 	movw	r0, #1629	@ 0x65d
 8002180:	f7ff ffe6 	bl	8002150 <Std_id_High>
 8002184:	4603      	mov	r3, r0
 8002186:	607b      	str	r3, [r7, #4]
	CAN_FilterInit.FilterIdLow = 0x0000;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
	CAN_FilterInit.FilterMaskIdHigh = 0x0000;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
	CAN_FilterInit.FilterMaskIdLow = 0x0000;
 8002190:	2300      	movs	r3, #0
 8002192:	613b      	str	r3, [r7, #16]
	CAN_FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
	CAN_FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8002198:	2301      	movs	r3, #1
 800219a:	623b      	str	r3, [r7, #32]

	CAN_voidConfigFilter(&CAN_FilterInit);
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fd0e 	bl	8000bc0 <CAN_voidConfigFilter>
}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	@ 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <CAN_header_init>:


void CAN_header_init(){
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

	Tx_header_first_three.StdId = first_three_ultrsonic_ID;
 80021b0:	4b45      	ldr	r3, [pc, #276]	@ (80022c8 <CAN_header_init+0x11c>)
 80021b2:	2251      	movs	r2, #81	@ 0x51
 80021b4:	601a      	str	r2, [r3, #0]
	Tx_header_first_three.IDE = CAN_ID_STD;
 80021b6:	4b44      	ldr	r3, [pc, #272]	@ (80022c8 <CAN_header_init+0x11c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
	Tx_header_first_three.RTR = CAN_RTR_DATA;
 80021bc:	4b42      	ldr	r3, [pc, #264]	@ (80022c8 <CAN_header_init+0x11c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
	Tx_header_first_three.DLC = 7;
 80021c2:	4b41      	ldr	r3, [pc, #260]	@ (80022c8 <CAN_header_init+0x11c>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	611a      	str	r2, [r3, #16]
	Tx_header_first_three.TransmitGlobalTime=DISABLE;
 80021c8:	4b3f      	ldr	r3, [pc, #252]	@ (80022c8 <CAN_header_init+0x11c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	751a      	strb	r2, [r3, #20]

	Tx_header_second_three.StdId = second_three_ultrasonic_ID;
 80021ce:	4b3f      	ldr	r3, [pc, #252]	@ (80022cc <CAN_header_init+0x120>)
 80021d0:	2252      	movs	r2, #82	@ 0x52
 80021d2:	601a      	str	r2, [r3, #0]
	Tx_header_second_three.IDE = CAN_ID_STD;
 80021d4:	4b3d      	ldr	r3, [pc, #244]	@ (80022cc <CAN_header_init+0x120>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
	Tx_header_second_three.RTR = CAN_RTR_DATA;
 80021da:	4b3c      	ldr	r3, [pc, #240]	@ (80022cc <CAN_header_init+0x120>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
	Tx_header_second_three.DLC = 7;
 80021e0:	4b3a      	ldr	r3, [pc, #232]	@ (80022cc <CAN_header_init+0x120>)
 80021e2:	2207      	movs	r2, #7
 80021e4:	611a      	str	r2, [r3, #16]
	Tx_header_second_three.TransmitGlobalTime=DISABLE;
 80021e6:	4b39      	ldr	r3, [pc, #228]	@ (80022cc <CAN_header_init+0x120>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	751a      	strb	r2, [r3, #20]

	Tx_header_third_two.StdId = third_two_ultrasonic_Id;
 80021ec:	4b38      	ldr	r3, [pc, #224]	@ (80022d0 <CAN_header_init+0x124>)
 80021ee:	2250      	movs	r2, #80	@ 0x50
 80021f0:	601a      	str	r2, [r3, #0]
	Tx_header_third_two.IDE = CAN_ID_STD;
 80021f2:	4b37      	ldr	r3, [pc, #220]	@ (80022d0 <CAN_header_init+0x124>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
	Tx_header_third_two.RTR = CAN_RTR_DATA;
 80021f8:	4b35      	ldr	r3, [pc, #212]	@ (80022d0 <CAN_header_init+0x124>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
	Tx_header_third_two.DLC = 5;
 80021fe:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <CAN_header_init+0x124>)
 8002200:	2205      	movs	r2, #5
 8002202:	611a      	str	r2, [r3, #16]
	Tx_header_third_two.TransmitGlobalTime=DISABLE;
 8002204:	4b32      	ldr	r3, [pc, #200]	@ (80022d0 <CAN_header_init+0x124>)
 8002206:	2200      	movs	r2, #0
 8002208:	751a      	strb	r2, [r3, #20]

	Tx_header_F.StdId = Tx_header_F_ID;
 800220a:	4b32      	ldr	r3, [pc, #200]	@ (80022d4 <CAN_header_init+0x128>)
 800220c:	2256      	movs	r2, #86	@ 0x56
 800220e:	601a      	str	r2, [r3, #0]
	Tx_header_F.IDE = CAN_ID_STD;
 8002210:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <CAN_header_init+0x128>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
	Tx_header_F.RTR = CAN_RTR_DATA;
 8002216:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <CAN_header_init+0x128>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
	Tx_header_F.DLC = 7;
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <CAN_header_init+0x128>)
 800221e:	2207      	movs	r2, #7
 8002220:	611a      	str	r2, [r3, #16]
	Tx_header_F.TransmitGlobalTime=DISABLE;
 8002222:	4b2c      	ldr	r3, [pc, #176]	@ (80022d4 <CAN_header_init+0x128>)
 8002224:	2200      	movs	r2, #0
 8002226:	751a      	strb	r2, [r3, #20]

	Tx_header_B.StdId = Tx_header_B_ID;
 8002228:	4b2b      	ldr	r3, [pc, #172]	@ (80022d8 <CAN_header_init+0x12c>)
 800222a:	2257      	movs	r2, #87	@ 0x57
 800222c:	601a      	str	r2, [r3, #0]
	Tx_header_B.IDE = CAN_ID_STD;
 800222e:	4b2a      	ldr	r3, [pc, #168]	@ (80022d8 <CAN_header_init+0x12c>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
	Tx_header_B.RTR = CAN_RTR_DATA;
 8002234:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <CAN_header_init+0x12c>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
	Tx_header_B.DLC = 7;
 800223a:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <CAN_header_init+0x12c>)
 800223c:	2207      	movs	r2, #7
 800223e:	611a      	str	r2, [r3, #16]
	Tx_header_B.TransmitGlobalTime=DISABLE;
 8002240:	4b25      	ldr	r3, [pc, #148]	@ (80022d8 <CAN_header_init+0x12c>)
 8002242:	2200      	movs	r2, #0
 8002244:	751a      	strb	r2, [r3, #20]

	Tx_header_F_R.StdId = Tx_header_F_R_ID;
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <CAN_header_init+0x130>)
 8002248:	2258      	movs	r2, #88	@ 0x58
 800224a:	601a      	str	r2, [r3, #0]
	Tx_header_F_R.IDE = CAN_ID_STD;
 800224c:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <CAN_header_init+0x130>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
	Tx_header_F_R.RTR = CAN_RTR_DATA;
 8002252:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <CAN_header_init+0x130>)
 8002254:	2200      	movs	r2, #0
 8002256:	60da      	str	r2, [r3, #12]
	Tx_header_F_R.DLC = 5;
 8002258:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <CAN_header_init+0x130>)
 800225a:	2205      	movs	r2, #5
 800225c:	611a      	str	r2, [r3, #16]
	Tx_header_F_R.TransmitGlobalTime=DISABLE;
 800225e:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <CAN_header_init+0x130>)
 8002260:	2200      	movs	r2, #0
 8002262:	751a      	strb	r2, [r3, #20]

	Tx_header_F_L.StdId = Tx_header_F_L_ID;
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <CAN_header_init+0x134>)
 8002266:	2259      	movs	r2, #89	@ 0x59
 8002268:	601a      	str	r2, [r3, #0]
	Tx_header_F_L.IDE = CAN_ID_STD;
 800226a:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <CAN_header_init+0x134>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
	Tx_header_F_L.RTR = CAN_RTR_DATA;
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <CAN_header_init+0x134>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
	Tx_header_F_L.DLC = 5;
 8002276:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <CAN_header_init+0x134>)
 8002278:	2205      	movs	r2, #5
 800227a:	611a      	str	r2, [r3, #16]
	Tx_header_F_L.TransmitGlobalTime=DISABLE;
 800227c:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <CAN_header_init+0x134>)
 800227e:	2200      	movs	r2, #0
 8002280:	751a      	strb	r2, [r3, #20]

	Tx_header_B_R.StdId = Tx_header_B_R_ID;
 8002282:	4b18      	ldr	r3, [pc, #96]	@ (80022e4 <CAN_header_init+0x138>)
 8002284:	2260      	movs	r2, #96	@ 0x60
 8002286:	601a      	str	r2, [r3, #0]
	Tx_header_B_R.IDE = CAN_ID_STD;
 8002288:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <CAN_header_init+0x138>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
	Tx_header_B_R.RTR = CAN_RTR_DATA;
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <CAN_header_init+0x138>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
	Tx_header_B_R.DLC = 5;
 8002294:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <CAN_header_init+0x138>)
 8002296:	2205      	movs	r2, #5
 8002298:	611a      	str	r2, [r3, #16]
	Tx_header_B_R.TransmitGlobalTime=DISABLE;
 800229a:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <CAN_header_init+0x138>)
 800229c:	2200      	movs	r2, #0
 800229e:	751a      	strb	r2, [r3, #20]

	Tx_header_B_L.StdId = Tx_header_B_L_ID;
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <CAN_header_init+0x13c>)
 80022a2:	2261      	movs	r2, #97	@ 0x61
 80022a4:	601a      	str	r2, [r3, #0]
	Tx_header_B_L.IDE = CAN_ID_STD;
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <CAN_header_init+0x13c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
	Tx_header_B_L.RTR = CAN_RTR_DATA;
 80022ac:	4b0e      	ldr	r3, [pc, #56]	@ (80022e8 <CAN_header_init+0x13c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
	Tx_header_B_L.DLC = 5;
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <CAN_header_init+0x13c>)
 80022b4:	2205      	movs	r2, #5
 80022b6:	611a      	str	r2, [r3, #16]
	Tx_header_B_L.TransmitGlobalTime=DISABLE;
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <CAN_header_init+0x13c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	751a      	strb	r2, [r3, #20]

}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000068 	.word	0x20000068
 80022cc:	20000080 	.word	0x20000080
 80022d0:	20000098 	.word	0x20000098
 80022d4:	200000b0 	.word	0x200000b0
 80022d8:	200000c8 	.word	0x200000c8
 80022dc:	200000e0 	.word	0x200000e0
 80022e0:	200000f8 	.word	0x200000f8
 80022e4:	20000110 	.word	0x20000110
 80022e8:	20000128 	.word	0x20000128

080022ec <main>:



int main(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	MRCC_voidInitClock();
 80022f0:	f7ff fae8 	bl	80018c4 <MRCC_voidInitClock>
	HUltrasonic_voidInitX4(ULTRA_1_X4_TIMER_NO_COPY);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff fbdb 	bl	8001ab0 <HUltrasonic_voidInitX4>
	HUltrasonic_voidInitX4(ULTRA_2_X4_TIMER_NO_COPY);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7ff fbd8 	bl	8001ab0 <HUltrasonic_voidInitX4>
	MAFIO_voidInitAFIO();
 8002300:	f7fe fb24 	bl	800094c <MAFIO_voidInitAFIO>

	HUltrasonic_voidInitX4(ULTRA_1_X4_TIMER_NO_COPY);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fbd3 	bl	8001ab0 <HUltrasonic_voidInitX4>
	HUltrasonic_voidInitX4(ULTRA_2_X4_TIMER_NO_COPY);
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fbd0 	bl	8001ab0 <HUltrasonic_voidInitX4>
	MRCC_voidInitClock();
 8002310:	f7ff fad8 	bl	80018c4 <MRCC_voidInitClock>
	MDIO_INIT(PORTA);
 8002314:	2000      	movs	r0, #0
 8002316:	f7fe fd23 	bl	8000d60 <MDIO_INIT>
	Mdisable_JTAG();
 800231a:	f7fe fb21 	bl	8000960 <Mdisable_JTAG>

	MDIO_voidSetDirection(PORTA ,TX_PIN ,AF_2MHZ_PUSH_PULL);
 800231e:	220a      	movs	r2, #10
 8002320:	2109      	movs	r1, #9
 8002322:	2000      	movs	r0, #0
 8002324:	f7fe fd2e 	bl	8000d84 <MDIO_voidSetDirection>
	MDIO_voidSetDirection(PORTA ,RX_PIN ,INPUT_FLOATING);
 8002328:	2204      	movs	r2, #4
 800232a:	210a      	movs	r1, #10
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fd29 	bl	8000d84 <MDIO_voidSetDirection>


	MRCC_voidEnableClock(RCC_APB2,USART1_EN);
 8002332:	210e      	movs	r1, #14
 8002334:	2002      	movs	r0, #2
 8002336:	f7ff fa85 	bl	8001844 <MRCC_voidEnableClock>
	MUSART_voidInit(USART_1);
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff fae2 	bl	8001904 <MUSART_voidInit>

	MSYSTICK_voidInit();
 8002340:	f7ff fa36 	bl	80017b0 <MSYSTICK_voidInit>
	MUSART_voidSendWord(USART_1,"success");
 8002344:	490d      	ldr	r1, [pc, #52]	@ (800237c <main+0x90>)
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff fb92 	bl	8001a70 <MUSART_voidSendWord>
	REQ_PIN_init();
 800234c:	f7ff fd7c 	bl	8001e48 <REQ_PIN_init>
	CAN_voidInit();
 8002350:	f7fe fb14 	bl	800097c <CAN_voidInit>
		CAN_header_init();
 8002354:	f7ff ff2a 	bl	80021ac <CAN_header_init>
		CAN_FilterConfig();
 8002358:	f7ff ff07 	bl	800216a <CAN_FilterConfig>
		CAN_voidStart();
 800235c:	f7fe fc1a 	bl	8000b94 <CAN_voidStart>

	for(;;){
		REQ_PIN_READ();
 8002360:	f7ff fd8e 	bl	8001e80 <REQ_PIN_READ>
		ULTRA_READ_8X();
 8002364:	f7ff feb6 	bl	80020d4 <ULTRA_READ_8X>
		if(GLOBAL_REQ_PINS_VALUE==0){
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <main+0x94>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <main+0x8a>
			continue;
		}
		else{
			ULTRA_SEND_DIS_REQ();
 8002370:	f7ff fdba 	bl	8001ee8 <ULTRA_SEND_DIS_REQ>
 8002374:	e7f4      	b.n	8002360 <main+0x74>
			continue;
 8002376:	bf00      	nop
		REQ_PIN_READ();
 8002378:	e7f2      	b.n	8002360 <main+0x74>
 800237a:	bf00      	nop
 800237c:	08002444 	.word	0x08002444
 8002380:	20000067 	.word	0x20000067

08002384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002384:	480d      	ldr	r0, [pc, #52]	@ (80023bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002386:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002388:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800238c:	480c      	ldr	r0, [pc, #48]	@ (80023c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800238e:	490d      	ldr	r1, [pc, #52]	@ (80023c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <LoopForever+0xe>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002394:	e002      	b.n	800239c <LoopCopyDataInit>

08002396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239a:	3304      	adds	r3, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a0:	d3f9      	bcc.n	8002396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a4:	4c0a      	ldr	r4, [pc, #40]	@ (80023d0 <LoopForever+0x16>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a8:	e001      	b.n	80023ae <LoopFillZerobss>

080023aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ac:	3204      	adds	r2, #4

080023ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b0:	d3fb      	bcc.n	80023aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023b2:	f000 f811 	bl	80023d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023b6:	f7ff ff99 	bl	80022ec <main>

080023ba <LoopForever>:

LoopForever:
    b LoopForever
 80023ba:	e7fe      	b.n	80023ba <LoopForever>
  ldr   r0, =_estack
 80023bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80023c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80023c8:	08002454 	.word	0x08002454
  ldr r2, =_sbss
 80023cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80023d0:	20000140 	.word	0x20000140

080023d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC1_2_IRQHandler>
	...

080023d8 <__libc_init_array>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	2600      	movs	r6, #0
 80023dc:	4d0c      	ldr	r5, [pc, #48]	@ (8002410 <__libc_init_array+0x38>)
 80023de:	4c0d      	ldr	r4, [pc, #52]	@ (8002414 <__libc_init_array+0x3c>)
 80023e0:	1b64      	subs	r4, r4, r5
 80023e2:	10a4      	asrs	r4, r4, #2
 80023e4:	42a6      	cmp	r6, r4
 80023e6:	d109      	bne.n	80023fc <__libc_init_array+0x24>
 80023e8:	f000 f81a 	bl	8002420 <_init>
 80023ec:	2600      	movs	r6, #0
 80023ee:	4d0a      	ldr	r5, [pc, #40]	@ (8002418 <__libc_init_array+0x40>)
 80023f0:	4c0a      	ldr	r4, [pc, #40]	@ (800241c <__libc_init_array+0x44>)
 80023f2:	1b64      	subs	r4, r4, r5
 80023f4:	10a4      	asrs	r4, r4, #2
 80023f6:	42a6      	cmp	r6, r4
 80023f8:	d105      	bne.n	8002406 <__libc_init_array+0x2e>
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002400:	4798      	blx	r3
 8002402:	3601      	adds	r6, #1
 8002404:	e7ee      	b.n	80023e4 <__libc_init_array+0xc>
 8002406:	f855 3b04 	ldr.w	r3, [r5], #4
 800240a:	4798      	blx	r3
 800240c:	3601      	adds	r6, #1
 800240e:	e7f2      	b.n	80023f6 <__libc_init_array+0x1e>
 8002410:	0800244c 	.word	0x0800244c
 8002414:	0800244c 	.word	0x0800244c
 8002418:	0800244c 	.word	0x0800244c
 800241c:	08002450 	.word	0x08002450

08002420 <_init>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	bf00      	nop
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr

0800242c <_fini>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	bf00      	nop
 8002430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002432:	bc08      	pop	{r3}
 8002434:	469e      	mov	lr, r3
 8002436:	4770      	bx	lr
