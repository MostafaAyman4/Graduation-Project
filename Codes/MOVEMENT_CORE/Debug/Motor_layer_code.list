
Motor_layer_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e20  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ffc  08002ffc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ffc  08002ffc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ffc  08002ffc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08003070  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003070  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028e0  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ed5  00000000  00000000  00022975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000448  00000000  00000000  00023850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000370  00000000  00000000  00023c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003509  00000000  00000000  00024008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003682  00000000  00000000  00027511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ca45  00000000  00000000  0002ab93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000375d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001438  00000000  00000000  00037628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000070 	.word	0x20000070
 800014c:	00000000 	.word	0x00000000
 8000150:	08002f38 	.word	0x08002f38

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000074 	.word	0x20000074
 800016c:	08002f38 	.word	0x08002f38

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <MAFIO_voidInitAFIO>:
#include "../Inc/MCAL/AFIO/AFIO_private.h"
#include "../Inc/MCAL/AFIO/AFIO_config.h"

#include "../Inc/MCAL/RCC/RCC_interface.h"

void MAFIO_voidInitAFIO(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    MRCC_voidInitClock();
 8000a20:	f001 faa8 	bl	8001f74 <MRCC_voidInitClock>
    MRCC_voidEnableClock(RCC_APB2,0);
 8000a24:	2100      	movs	r1, #0
 8000a26:	2002      	movs	r0, #2
 8000a28:	f001 fa64 	bl	8001ef4 <MRCC_voidEnableClock>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <MAFIO_voidSetEXTIConfiguration>:
void MAFIO_voidSetEXTIConfiguration(uint8 Copy_uint8Port,uint8 Copy_uint8Line){
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
    if(Copy_uint8Line < 4){
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d817      	bhi.n	8000a76 <MAFIO_voidSetEXTIConfiguration+0x46>
        AFIO -> EXTICR[0] &= ~((0b1111)<<(Copy_uint8Line * 4));
 8000a46:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	79ba      	ldrb	r2, [r7, #6]
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	210f      	movs	r1, #15
 8000a50:	fa01 f202 	lsl.w	r2, r1, r2
 8000a54:	43d2      	mvns	r2, r2
 8000a56:	4611      	mov	r1, r2
 8000a58:	4a36      	ldr	r2, [pc, #216]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000a5a:	400b      	ands	r3, r1
 8000a5c:	6093      	str	r3, [r2, #8]
        AFIO -> EXTICR[0] |= (Copy_uint8Port<<(Copy_uint8Line * 4));
 8000a5e:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	79f9      	ldrb	r1, [r7, #7]
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	0092      	lsls	r2, r2, #2
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6093      	str	r3, [r2, #8]
        AFIO -> EXTICR[1] |= (Copy_uint8Port<<(Copy_uint8Line * 4));
    }
    else{
        /* Waring Wrong chose of Line*/
    }
}
 8000a74:	e058      	b.n	8000b28 <MAFIO_voidSetEXTIConfiguration+0xf8>
    else if(Copy_uint8Line < 8){
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	d81a      	bhi.n	8000ab2 <MAFIO_voidSetEXTIConfiguration+0x82>
        Copy_uint8Line -=4;
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	71bb      	strb	r3, [r7, #6]
        AFIO -> EXTICR[1] &= ~((0b1111)<<(Copy_uint8Line * 4));
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	79ba      	ldrb	r2, [r7, #6]
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	4611      	mov	r1, r2
 8000a94:	4a27      	ldr	r2, [pc, #156]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000a96:	400b      	ands	r3, r1
 8000a98:	60d3      	str	r3, [r2, #12]
        AFIO -> EXTICR[1] |= (Copy_uint8Port<<(Copy_uint8Line * 4));
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	79f9      	ldrb	r1, [r7, #7]
 8000aa0:	79ba      	ldrb	r2, [r7, #6]
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000aac:	430b      	orrs	r3, r1
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	e03a      	b.n	8000b28 <MAFIO_voidSetEXTIConfiguration+0xf8>
    else if(Copy_uint8Line < 12){
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	2b0b      	cmp	r3, #11
 8000ab6:	d81a      	bhi.n	8000aee <MAFIO_voidSetEXTIConfiguration+0xbe>
        Copy_uint8Line -= 8;
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	3b08      	subs	r3, #8
 8000abc:	71bb      	strb	r3, [r7, #6]
        AFIO -> EXTICR[1] &= ~((0b1111)<<(Copy_uint8Line * 4));
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	79ba      	ldrb	r2, [r7, #6]
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	60d3      	str	r3, [r2, #12]
        AFIO -> EXTICR[1] |= (Copy_uint8Port<<(Copy_uint8Line * 4));
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	79f9      	ldrb	r1, [r7, #7]
 8000adc:	79ba      	ldrb	r2, [r7, #6]
 8000ade:	0092      	lsls	r2, r2, #2
 8000ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000ae8:	430b      	orrs	r3, r1
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	e01c      	b.n	8000b28 <MAFIO_voidSetEXTIConfiguration+0xf8>
    else if(Copy_uint8Line < 16){
 8000aee:	79bb      	ldrb	r3, [r7, #6]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d819      	bhi.n	8000b28 <MAFIO_voidSetEXTIConfiguration+0xf8>
        Copy_uint8Line -= 12;
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	3b0c      	subs	r3, #12
 8000af8:	71bb      	strb	r3, [r7, #6]
        AFIO -> EXTICR[1] &= ~((0b1111)<<(Copy_uint8Line * 4));
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	79ba      	ldrb	r2, [r7, #6]
 8000b00:	0092      	lsls	r2, r2, #2
 8000b02:	210f      	movs	r1, #15
 8000b04:	fa01 f202 	lsl.w	r2, r1, r2
 8000b08:	43d2      	mvns	r2, r2
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000b0e:	400b      	ands	r3, r1
 8000b10:	60d3      	str	r3, [r2, #12]
        AFIO -> EXTICR[1] |= (Copy_uint8Port<<(Copy_uint8Line * 4));
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	79f9      	ldrb	r1, [r7, #7]
 8000b18:	79ba      	ldrb	r2, [r7, #6]
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b20:	4611      	mov	r1, r2
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <MAFIO_voidSetEXTIConfiguration+0x104>)
 8000b24:	430b      	orrs	r3, r1
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40010000 	.word	0x40010000

08000b38 <HBKMOTORS_voidinit>:

#include "../Inc/HAL/BACK_MOTORS/BKMOTORS_interface.h"
#include "../Inc/HAL/BACK_MOTORS/BKMOTORS_config.h"
#include "../Inc/HAL/BACK_MOTORS/BKMOTORS_private.h"

void HBKMOTORS_voidinit(uint8 Copy_uint8MotorNO){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]

	MRCC_voidInitClock();
 8000b42:	f001 fa17 	bl	8001f74 <MRCC_voidInitClock>
	MRCC_voidEnableClock(RCC_APB1,TIMER_3);
 8000b46:	2101      	movs	r1, #1
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f001 f9d3 	bl	8001ef4 <MRCC_voidEnableClock>

	MTimer_voidInitMode(TIMER_3,PWM);
 8000b4e:	2103      	movs	r1, #3
 8000b50:	2001      	movs	r0, #1
 8000b52:	f000 feb1 	bl	80018b8 <MTimer_voidInitMode>
	//MRCC_voidEnableClock(RCC_APB1,TIMER_3);
	//MTimer_voidInitInputCapture(TIMER_2,CHANNEL_1);

	//MDIO_voidSetDirection(PORTA,0,INPUT_FLOATING);

	switch(Copy_uint8MotorNO){
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <HBKMOTORS_voidinit+0x2a>
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d013      	beq.n	8000b88 <HBKMOTORS_voidinit+0x50>
		MDIO_voidSetDirection(LEFT_MOTOR_PORT,LEFT_MOTOR_B_PIN, OUTPUT_10MHZ_PUSH_PULL);
		MDIO_voidSetDirection(PORTA,LEFT_MOTOR_PWM_PIN, AF_10MHZ_PUSH_PULL);
		break;
	}

}
 8000b60:	e025      	b.n	8000bae <HBKMOTORS_voidinit+0x76>
		MDIO_INIT(RIGHT_MOTOR_PORT);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f000 facc 	bl	8001100 <MDIO_INIT>
		MDIO_voidSetDirection(RIGHT_MOTOR_PORT,RIGHT_MOTOR_A_PIN, OUTPUT_10MHZ_PUSH_PULL);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2107      	movs	r1, #7
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f000 fad9 	bl	8001124 <MDIO_voidSetDirection>
		MDIO_voidSetDirection(RIGHT_MOTOR_PORT,RIGHT_MOTOR_B_PIN, OUTPUT_10MHZ_PUSH_PULL);
 8000b72:	2201      	movs	r2, #1
 8000b74:	210c      	movs	r1, #12
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fad4 	bl	8001124 <MDIO_voidSetDirection>
		MDIO_voidSetDirection(PORTA,RIGHT_MOTOR_PWM_PIN, AF_10MHZ_PUSH_PULL);
 8000b7c:	2209      	movs	r2, #9
 8000b7e:	2106      	movs	r1, #6
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 facf 	bl	8001124 <MDIO_voidSetDirection>
		break;
 8000b86:	e012      	b.n	8000bae <HBKMOTORS_voidinit+0x76>
		MDIO_INIT(LEFT_MOTOR_PORT);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 fab9 	bl	8001100 <MDIO_INIT>
		MDIO_voidSetDirection(LEFT_MOTOR_PORT,LEFT_MOTOR_A_PIN, OUTPUT_10MHZ_PUSH_PULL);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2105      	movs	r1, #5
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 fac6 	bl	8001124 <MDIO_voidSetDirection>
		MDIO_voidSetDirection(LEFT_MOTOR_PORT,LEFT_MOTOR_B_PIN, OUTPUT_10MHZ_PUSH_PULL);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 fac1 	bl	8001124 <MDIO_voidSetDirection>
		MDIO_voidSetDirection(PORTA,LEFT_MOTOR_PWM_PIN, AF_10MHZ_PUSH_PULL);
 8000ba2:	2209      	movs	r2, #9
 8000ba4:	2107      	movs	r1, #7
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 fabc 	bl	8001124 <MDIO_voidSetDirection>
		break;
 8000bac:	bf00      	nop
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HBKMOTORS_voidRUN>:
void HBKMOTORS_voidRUN(uint8 Copy_uint8MotorNO,uint8 Copy_uint8MotorDir){
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uint8MotorNO){
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <HBKMOTORS_voidRUN+0x1c>
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d01d      	beq.n	8000c0c <HBKMOTORS_voidRUN+0x56>
					break;
				}
		break;
	}

}
 8000bd0:	e039      	b.n	8000c46 <HBKMOTORS_voidRUN+0x90>
		switch(Copy_uint8MotorDir){
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d002      	beq.n	8000bde <HBKMOTORS_voidRUN+0x28>
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d00b      	beq.n	8000bf4 <HBKMOTORS_voidRUN+0x3e>
		break;
 8000bdc:	e033      	b.n	8000c46 <HBKMOTORS_voidRUN+0x90>
			MDIO_voidWrite_D_pin(RIGHT_MOTOR_PORT,RIGHT_MOTOR_A_PIN,HIGH);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2107      	movs	r1, #7
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 fbd0 	bl	8001388 <MDIO_voidWrite_D_pin>
			MDIO_voidWrite_D_pin(RIGHT_MOTOR_PORT,RIGHT_MOTOR_B_PIN,LOW);
 8000be8:	2200      	movs	r2, #0
 8000bea:	210c      	movs	r1, #12
 8000bec:	2001      	movs	r0, #1
 8000bee:	f000 fbcb 	bl	8001388 <MDIO_voidWrite_D_pin>
			break;
 8000bf2:	e00a      	b.n	8000c0a <HBKMOTORS_voidRUN+0x54>
			MDIO_voidWrite_D_pin(RIGHT_MOTOR_PORT,RIGHT_MOTOR_A_PIN,LOW);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2107      	movs	r1, #7
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fbc5 	bl	8001388 <MDIO_voidWrite_D_pin>
			MDIO_voidWrite_D_pin(RIGHT_MOTOR_PORT,RIGHT_MOTOR_B_PIN,HIGH);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	210c      	movs	r1, #12
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fbc0 	bl	8001388 <MDIO_voidWrite_D_pin>
			break;
 8000c08:	bf00      	nop
		break;
 8000c0a:	e01c      	b.n	8000c46 <HBKMOTORS_voidRUN+0x90>
		switch(Copy_uint8MotorDir){
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d002      	beq.n	8000c18 <HBKMOTORS_voidRUN+0x62>
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d00b      	beq.n	8000c2e <HBKMOTORS_voidRUN+0x78>
		break;
 8000c16:	e015      	b.n	8000c44 <HBKMOTORS_voidRUN+0x8e>
					MDIO_voidWrite_D_pin(LEFT_MOTOR_PORT,LEFT_MOTOR_A_PIN,HIGH);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 fbb3 	bl	8001388 <MDIO_voidWrite_D_pin>
					MDIO_voidWrite_D_pin(LEFT_MOTOR_PORT,LEFT_MOTOR_B_PIN,LOW);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2104      	movs	r1, #4
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fbae 	bl	8001388 <MDIO_voidWrite_D_pin>
					break;
 8000c2c:	e00a      	b.n	8000c44 <HBKMOTORS_voidRUN+0x8e>
					MDIO_voidWrite_D_pin(LEFT_MOTOR_PORT,LEFT_MOTOR_A_PIN,LOW);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2105      	movs	r1, #5
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 fba8 	bl	8001388 <MDIO_voidWrite_D_pin>
					MDIO_voidWrite_D_pin(LEFT_MOTOR_PORT,LEFT_MOTOR_B_PIN,HIGH);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 fba3 	bl	8001388 <MDIO_voidWrite_D_pin>
					break;
 8000c42:	bf00      	nop
		break;
 8000c44:	bf00      	nop
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HBKMOTORS_voidSTOP>:
void HBKMOTORS_voidSTOP(uint8 Copy_uint8MotorNO){
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
	switch(Copy_uint8MotorNO){
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <HBKMOTORS_voidSTOP+0x16>
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d00b      	beq.n	8000c7a <HBKMOTORS_voidSTOP+0x2c>
		case MOTOR_LEFT:
			MDIO_voidWrite_D_pin(LEFT_MOTOR_PORT,LEFT_MOTOR_A_PIN,LOW);
			MDIO_voidWrite_D_pin(LEFT_MOTOR_PORT,LEFT_MOTOR_B_PIN,LOW);
			break;
		}
}
 8000c62:	e015      	b.n	8000c90 <HBKMOTORS_voidSTOP+0x42>
			MDIO_voidWrite_D_pin(RIGHT_MOTOR_PORT,RIGHT_MOTOR_A_PIN,LOW);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2107      	movs	r1, #7
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f000 fb8d 	bl	8001388 <MDIO_voidWrite_D_pin>
			MDIO_voidWrite_D_pin(RIGHT_MOTOR_PORT,RIGHT_MOTOR_B_PIN,LOW);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	210c      	movs	r1, #12
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 fb88 	bl	8001388 <MDIO_voidWrite_D_pin>
			break;
 8000c78:	e00a      	b.n	8000c90 <HBKMOTORS_voidSTOP+0x42>
			MDIO_voidWrite_D_pin(LEFT_MOTOR_PORT,LEFT_MOTOR_A_PIN,LOW);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fb82 	bl	8001388 <MDIO_voidWrite_D_pin>
			MDIO_voidWrite_D_pin(LEFT_MOTOR_PORT,LEFT_MOTOR_B_PIN,LOW);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2104      	movs	r1, #4
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 fb7d 	bl	8001388 <MDIO_voidWrite_D_pin>
			break;
 8000c8e:	bf00      	nop
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HBMOTORS_voidSetSpeed>:

void HBMOTORS_voidSetSpeed(uint8 Copy_uint8MotorNO,uint8 Copy_uint8Speed){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uint8MotorNO){
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <HBMOTORS_voidSetSpeed+0x1c>
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d007      	beq.n	8000cc2 <HBMOTORS_voidSetSpeed+0x2a>
	case MOTOR_LEFT:
		MTIMER_SetPwm_CH_DutyCycle(Copy_uint8Speed,TIMER_3,CHANNEL_2);
		break;
	}

}
 8000cb2:	e00d      	b.n	8000cd0 <HBMOTORS_voidSetSpeed+0x38>
		MTIMER_SetPwm_CH_DutyCycle(Copy_uint8Speed,TIMER_3,CHANNEL_1);
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 feb8 	bl	8001a30 <MTIMER_SetPwm_CH_DutyCycle>
		break;
 8000cc0:	e006      	b.n	8000cd0 <HBMOTORS_voidSetSpeed+0x38>
		MTIMER_SetPwm_CH_DutyCycle(Copy_uint8Speed,TIMER_3,CHANNEL_2);
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 feb1 	bl	8001a30 <MTIMER_SetPwm_CH_DutyCycle>
		break;
 8000cce:	bf00      	nop
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <CAN_voidInit>:


*/

void CAN_voidInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
    /**  Enable the CAN interface clock **/
    //RCC_voidEnableClock(RCC_APB1, APB1_CAN_EN);
    MRCC_voidEnableClock(RCC_APB1,CAN_EN);
 8000cdc:	2119      	movs	r1, #25
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f001 f908 	bl	8001ef4 <MRCC_voidEnableClock>
                        CAN_TX mapped to PB9    */
    //RCC_voidEnableClock(RCC_APB2, APB2_AFIO_EN);
    //AFIO_voidRemapPeripheralPins (CAN_REMAP);
    /* Enable the clock for the CAN GPIOs */
   // RCC_voidEnableClock(RCC_APB2, APB2_GPIOA_EN);
    MRCC_voidEnableClock(RCC_APB2,PORTA_EN);
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f001 f904 	bl	8001ef4 <MRCC_voidEnableClock>
    MDIO_INIT(PORTA);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 fa07 	bl	8001100 <MDIO_INIT>
    MDIO_voidSetDirection(PORTA,PIN11, INPUT_FLOATING);
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	210b      	movs	r1, #11
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 fa14 	bl	8001124 <MDIO_voidSetDirection>
    MDIO_voidSetDirection(PORTA,PIN12, AF_2MHZ_PUSH_PULL);
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	210c      	movs	r1, #12
 8000d00:	2000      	movs	r0, #0
 8000d02:	f000 fa0f 	bl	8001124 <MDIO_voidSetDirection>

   // GPIO_voidSetPinDirection(GPIOA, PIN11, INPUT_FLOATING); //RX
    //GPIO_voidSetPinDirection(GPIOA, PIN12, OUTPUT_SPEED_2MHZ_AFPP); //TX
    /**  exit CAN sleep mode **/
    /* CLEAR SLEEP bit (SLEEP) */
    CLR_BIT(CAN->MCR,1);
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d0c:	f023 0302 	bic.w	r3, r3, #2
 8000d10:	6013      	str	r3, [r2, #0]
    /* wait to exit sleep mode */
    while (!(GET_BIT(CAN->MSR,1) == 0));
 8000d12:	bf00      	nop
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f8      	bne.n	8000d14 <CAN_voidInit+0x3c>
     /**  Set CAN Initialization mode **/
    /* SET Initialization request BIT (INRQ) */
    SET_BIT(CAN->MCR,0);
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6013      	str	r3, [r2, #0]
    /* wait to enter in Initialization mode */
    while(!(GET_BIT(CAN->MSR,0) == 1));
 8000d2e:	bf00      	nop
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d1f9      	bne.n	8000d30 <CAN_voidInit+0x58>
#if TransmitFifoPriority == ENABLE
     /* by the request order */
        SET_BIT(CAN->MCR,2); //TXFP
#else
     /* by the identifier of the message */
        CLR_BIT(CAN->MCR,2); //TXFP
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d42:	f023 0304 	bic.w	r3, r3, #4
 8000d46:	6013      	str	r3, [r2, #0]
         Once a receive FIFO is full the next incoming message will be discarded. */
        SET_BIT(CAN->MCR,3); //RFLM
#else
     /* Receive FIFO not locked on overrun.
         Once a receive FIFO is full the next incoming message will overwrite the previous one. */
        CLR_BIT(CAN->MCR,3); //RFLM
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d4e:	f023 0308 	bic.w	r3, r3, #8
 8000d52:	6013      	str	r3, [r2, #0]
#endif
    /** CHECK automatic retransmission **/
#if AutoRetransmission == ENABLE
        CLR_BIT(CAN->MCR,4); //NART
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d5a:	f023 0310 	bic.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
        SET_BIT(CAN->MCR,4); //NART
#endif

    /** CHECK automatic wakeup mode **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,5); //AWUM
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	6013      	str	r3, [r2, #0]
       CLR_BIT(CAN->MCR,5); //AWUM
#endif

    /** CHECK automatic bus-off management **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,6); //ABOM
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d76:	6013      	str	r3, [r2, #0]

    /** CHECK Time triggered communication mode **/
#if TimeTriggeredMode == ENABLE
        SET_BIT(CAN->MCR,7); //TTCM
#else
        CLR_BIT(CAN->MCR,7); //TTCM
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d82:	6013      	str	r3, [r2, #0]
#endif


     /** Set the bit timing register **/
  WRITE_REG(CAN->BTR, (uint32) (MODE |
 8000d84:	2302      	movs	r3, #2
 8000d86:	3b01      	subs	r3, #1
 8000d88:	051b      	lsls	r3, r3, #20
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	230d      	movs	r3, #13
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	041b      	lsls	r3, r3, #16
 8000d92:	4313      	orrs	r3, r2
 8000d94:	2201      	movs	r2, #1
 8000d96:	3a01      	subs	r2, #1
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4a02      	ldr	r2, [pc, #8]	; (8000da4 <CAN_voidInit+0xcc>)
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	61d3      	str	r3, [r2, #28]
		  ((CAN_bitRateConfig[BOUDRATE].TS2-1) << 20) |
		  ((CAN_bitRateConfig[BOUDRATE].TS1-1) << 16) |
		  (CAN_bitRateConfig[BOUDRATE].BRP-1)));
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40006400 	.word	0x40006400

08000da8 <CAN_voidStart>:
	}
}


void CAN_voidStart(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	/* CLEAR Initialization request BIT (INRQ) */
	CLR_BIT(CAN->MCR,0);
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <CAN_voidStart+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <CAN_voidStart+0x28>)
 8000db2:	f023 0301 	bic.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]
	/* wait to enter in Initialization mode */
	while(!(GET_BIT(CAN->MSR,0) == 0));
 8000db8:	bf00      	nop
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <CAN_voidStart+0x28>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f9      	bne.n	8000dba <CAN_voidStart+0x12>
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40006400 	.word	0x40006400

08000dd4 <CAN_voidGetRxMsg>:


void CAN_voidGetRxMsg(uint32 local_u8RxFifo, CAN_RxHeaderTypeDef *pRxHeader, uint8 Local_u8Data[])
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
    /* Get Identifier extension */
	pRxHeader->IDE =  GET_BIT(CAN->FIFOMailBox[local_u8RxFifo].RIR,2);
 8000de0:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	331b      	adds	r3, #27
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	4413      	add	r3, r2
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	609a      	str	r2, [r3, #8]
    if (pRxHeader->IDE == CAN_ID_STD)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <CAN_voidGetRxMsg+0x3e>
    {/* GET the Id */
      pRxHeader->StdId = CAN->FIFOMailBox[local_u8RxFifo].RIR >> 21;
 8000dfe:	4a49      	ldr	r2, [pc, #292]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	331b      	adds	r3, #27
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	4413      	add	r3, r2
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	0d5a      	lsrs	r2, r3, #21
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e008      	b.n	8000e24 <CAN_voidGetRxMsg+0x50>
    }
    else
    {
      pRxHeader->ExtId = CAN->FIFOMailBox[local_u8RxFifo].RIR >> 3;
 8000e12:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	331b      	adds	r3, #27
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4413      	add	r3, r2
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	605a      	str	r2, [r3, #4]
    }
    /* GET the RTR */
    pRxHeader->RTR = GET_BIT(CAN->FIFOMailBox[local_u8RxFifo].RIR,1);
 8000e24:	4a3f      	ldr	r2, [pc, #252]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	331b      	adds	r3, #27
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4413      	add	r3, r2
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	085b      	lsrs	r3, r3, #1
 8000e32:	f003 0201 	and.w	r2, r3, #1
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	60da      	str	r2, [r3, #12]
    /* GET the DLC */
    pRxHeader->DLC = (CAN->FIFOMailBox[local_u8RxFifo].RDTR & 0xF);
 8000e3a:	4a3a      	ldr	r2, [pc, #232]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	331b      	adds	r3, #27
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	4413      	add	r3, r2
 8000e44:	3304      	adds	r3, #4
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 020f 	and.w	r2, r3, #15
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	611a      	str	r2, [r3, #16]
    /* GET the (FMI) Filter Match Index */
    pRxHeader->FilterMatchIndex = (CAN->FIFOMailBox[local_u8RxFifo].RDTR >> 8) & 0xFF;
 8000e50:	4a34      	ldr	r2, [pc, #208]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	331b      	adds	r3, #27
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	4413      	add	r3, r2
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	619a      	str	r2, [r3, #24]
    /* GET the Time stamp */
    pRxHeader->TimeStamp = (CAN->FIFOMailBox[local_u8RxFifo].RDTR >> 16) & 0XFFFF;
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	331b      	adds	r3, #27
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	4413      	add	r3, r2
 8000e70:	3304      	adds	r3, #4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	0c1b      	lsrs	r3, r3, #16
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	615a      	str	r2, [r3, #20]
    Local_u8Data[4] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR 	  ) & 0XFF);
    Local_u8Data[5] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 8 ) & 0XFF);
    Local_u8Data[6] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 16) & 0XFF);
    Local_u8Data[7] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 24) & 0XFF);
		#else
		for(uint8 i=0 ; i < 8 ; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	75fb      	strb	r3, [r7, #23]
 8000e80:	e007      	b.n	8000e92 <CAN_voidGetRxMsg+0xbe>
		{/*clear buff*/
			Local_u8Data[i] = 0;
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
		for(uint8 i=0 ; i < 8 ; i++)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	75fb      	strb	r3, [r7, #23]
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	d9f4      	bls.n	8000e82 <CAN_voidGetRxMsg+0xae>
		}
		for(uint8 i=0 ; i < pRxHeader->DLC ; i++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75bb      	strb	r3, [r7, #22]
 8000e9c:	e027      	b.n	8000eee <CAN_voidGetRxMsg+0x11a>
		{
			if (i<4)
 8000e9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d810      	bhi.n	8000ec6 <CAN_voidGetRxMsg+0xf2>
				Local_u8Data[i] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDLR >>(i*8) ) & 0XFF);
 8000ea4:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	4413      	add	r3, r2
 8000eac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	7dbb      	ldrb	r3, [r7, #22]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	fa22 f103 	lsr.w	r1, r2, r3
 8000eba:	7dbb      	ldrb	r3, [r7, #22]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2ca      	uxtb	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e010      	b.n	8000ee8 <CAN_voidGetRxMsg+0x114>
			else
				Local_u8Data[i] = (uint8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR 	>>((i-4)*8)  ) & 0XFF);
 8000ec6:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	7dbb      	ldrb	r3, [r7, #22]
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	fa22 f103 	lsr.w	r1, r2, r3
 8000ede:	7dbb      	ldrb	r3, [r7, #22]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b2ca      	uxtb	r2, r1
 8000ee6:	701a      	strb	r2, [r3, #0]
		for(uint8 i=0 ; i < pRxHeader->DLC ; i++)
 8000ee8:	7dbb      	ldrb	r3, [r7, #22]
 8000eea:	3301      	adds	r3, #1
 8000eec:	75bb      	strb	r3, [r7, #22]
 8000eee:	7dba      	ldrb	r2, [r7, #22]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3d2      	bcc.n	8000e9e <CAN_voidGetRxMsg+0xca>
		}
		
		#endif
    /* Release the FIFO */
    if (local_u8RxFifo == CAN_RX_FIFO0)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d106      	bne.n	8000f0c <CAN_voidGetRxMsg+0x138>
    {
      /* Release RX FIFO 0 */
      SET_BIT(CAN->RF0R, 5);
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	60d3      	str	r3, [r2, #12]
    else
    {
      /* Release RX FIFO 1 */
      SET_BIT(CAN->RF1R, 5);
    }
}
 8000f0a:	e005      	b.n	8000f18 <CAN_voidGetRxMsg+0x144>
      SET_BIT(CAN->RF1R, 5);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <CAN_voidGetRxMsg+0x150>)
 8000f12:	f043 0320 	orr.w	r3, r3, #32
 8000f16:	6113      	str	r3, [r2, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40006400 	.word	0x40006400

08000f28 <CAN_voidRXPending>:
/** CAN RX Pending **/
uint8 CAN_voidRXPending(uint8 local_u8RxFifo)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	/* return the Rx FIFO  message pending */
	if (local_u8RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d106      	bne.n	8000f46 <CAN_voidRXPending+0x1e>
	{
		/* return value of the Rx FIFO 0  */
	 return (CAN->RF0R & 0X3);
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <CAN_voidRXPending+0x34>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	e005      	b.n	8000f52 <CAN_voidRXPending+0x2a>

	}
	else /* Rx element is assigned to Rx FIFO 1 */
	{
		/* return value of the Rx FIFO 1  */
		return (CAN->RF1R & 0X3);
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <CAN_voidRXPending+0x34>)
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	b2db      	uxtb	r3, r3
	}
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40006400 	.word	0x40006400

08000f60 <CAN_voidConfigFilter>:
/** CAN CONFIG filter **/
void CAN_voidConfigFilter( CAN_FilterTypeDef *pFilterConfig)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	/* Initialization mode for the filter */
	SET_BIT(CAN->FMR, 0);
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8000f6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f6e:	4a63      	ldr	r2, [pc, #396]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/* Convert filter number into bit position */
	uint32 local_u32FilterBitPos = pFilterConfig->FilterBank ;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	60fb      	str	r3, [r7, #12]

	/* Filter Deactivation */
	CLR_BIT(CAN->FA1R, pFilterConfig->FilterBank);
 8000f7e:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8000f80:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6952      	ldr	r2, [r2, #20]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	43d2      	mvns	r2, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8000f94:	400b      	ands	r3, r1
 8000f96:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/* Filter Scale */
	if (pFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d128      	bne.n	8000ff4 <CAN_voidConfigFilter+0x94>
	{
	  /* 16-bit scale for the filter */
	  CLR_BIT(CAN->FS1R, local_u32FilterBitPos);
 8000fa2:	4b56      	ldr	r3, [pc, #344]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8000fa4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000fa8:	2101      	movs	r1, #1
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	43d2      	mvns	r2, r2
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4a51      	ldr	r2, [pc, #324]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	     * */

	  /* First 16-bit identifier and First 16-bit mask */
	  /* Or First 16-bit identifier and Second 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0419      	lsls	r1, r3, #16
									  (pFilterConfig->FilterIdLow	   & 0x0000FFFF) );
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000fc8:	484c      	ldr	r0, [pc, #304]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 8000fce:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8000fd0:	3348      	adds	r3, #72	; 0x48
 8000fd2:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* Second 16-bit identifier and Second 16-bit mask */
	  /* Or Third 16-bit identifier and Fourth 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	0419      	lsls	r1, r3, #16
			  									  (pFilterConfig->FilterIdHigh 	   & 0x0000FFFF) );
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8000fe2:	4846      	ldr	r0, [pc, #280]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8000fe8:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8000fea:	3348      	adds	r3, #72	; 0x48
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4403      	add	r3, r0
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	e02a      	b.n	800104a <CAN_voidConfigFilter+0xea>
	}

	else if (pFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d126      	bne.n	800104a <CAN_voidConfigFilter+0xea>
	{
	  /* 32-bit scale for the filter */
	  SET_BIT(CAN->FS1R, local_u32FilterBitPos);
 8000ffc:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8000ffe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001002:	2101      	movs	r1, #1
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	fa01 f202 	lsl.w	r2, r1, r2
 800100a:	4611      	mov	r1, r2
 800100c:	4a3b      	ldr	r2, [pc, #236]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 800100e:	430b      	orrs	r3, r1
 8001010:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		 * STID[10:3] STID[2:0] EXID[17:13] EXID[12:5] EXID[4:0] IDE RTR 0
		 * */

	  /* 32-bit identifier or First 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0419      	lsls	r1, r3, #16
											 (pFilterConfig->FilterIdLow  & 0x0000FFFF));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8001020:	4836      	ldr	r0, [pc, #216]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 8001026:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8001028:	3348      	adds	r3, #72	; 0x48
 800102a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* 32-bit mask or Second 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	0419      	lsls	r1, r3, #16
												 (pFilterConfig->FilterMaskIdLow & 0x0000FFFF));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 800103a:	4830      	ldr	r0, [pc, #192]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8001040:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8001042:	3348      	adds	r3, #72	; 0x48
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4403      	add	r3, r0
 8001048:	605a      	str	r2, [r3, #4]
	}

	/* Filter Mode */
	if (pFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10d      	bne.n	800106e <CAN_voidConfigFilter+0x10e>
	{
	  /* Id/Mask mode for the filter*/
	  CLR_BIT(CAN->FM1R, local_u32FilterBitPos);
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8001054:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001058:	2101      	movs	r1, #1
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	fa01 f202 	lsl.w	r2, r1, r2
 8001060:	43d2      	mvns	r2, r2
 8001062:	4611      	mov	r1, r2
 8001064:	4a25      	ldr	r2, [pc, #148]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8001066:	400b      	ands	r3, r1
 8001068:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 800106c:	e00b      	b.n	8001086 <CAN_voidConfigFilter+0x126>
	}
	else
	{
	  /* Identifier list mode for the filter*/
	  SET_BIT(CAN->FM1R, local_u32FilterBitPos);
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8001070:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001074:	2101      	movs	r1, #1
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	fa01 f202 	lsl.w	r2, r1, r2
 800107c:	4611      	mov	r1, r2
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8001080:	430b      	orrs	r3, r1
 8001082:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	/* Filter FIFO assignment */
	if (pFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10d      	bne.n	80010aa <CAN_voidConfigFilter+0x14a>
	{
	  /* FIFO 0 assignation for the filter */
	  CLR_BIT(CAN->FFA1R, local_u32FilterBitPos);
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 8001090:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001094:	2101      	movs	r1, #1
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	43d2      	mvns	r2, r2
 800109e:	4611      	mov	r1, r2
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 80010a2:	400b      	ands	r3, r1
 80010a4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80010a8:	e00b      	b.n	80010c2 <CAN_voidConfigFilter+0x162>
	}
	else
	{
	  /* FIFO 1 assignation for the filter */
	  SET_BIT(CAN->FFA1R, local_u32FilterBitPos);
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 80010ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80010b0:	2101      	movs	r1, #1
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	4611      	mov	r1, r2
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 80010bc:	430b      	orrs	r3, r1
 80010be:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	}

	/* Filter activation */
	if (pFilterConfig->FilterActivation == ENABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d10b      	bne.n	80010e2 <CAN_voidConfigFilter+0x182>
	{
	  SET_BIT(CAN->FA1R, local_u32FilterBitPos);
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 80010cc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80010d0:	2101      	movs	r1, #1
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	4611      	mov	r1, r2
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}

	/* Leave the initialisation mode for the filter */
	CLR_BIT(CAN->FMR, 0);
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 80010e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <CAN_voidConfigFilter+0x19c>)
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	40006400 	.word	0x40006400

08001100 <MDIO_INIT>:

#include "../Inc/MCAL/DIO/DIO_interface.h"
#include "../Inc/MCAL/DIO/DIO_private.h"
#include "../Inc/MCAL/DIO/DIO_config.h"

void MDIO_INIT(uint8 copy_uint8Port){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
			MRCC_voidInitClock();
 800110a:	f000 ff33 	bl	8001f74 <MRCC_voidInitClock>
			MRCC_voidEnableClock(RCC_APB2,copy_uint8Port+2);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	3302      	adds	r3, #2
 8001112:	4619      	mov	r1, r3
 8001114:	2002      	movs	r0, #2
 8001116:	f000 feed 	bl	8001ef4 <MRCC_voidEnableClock>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <MDIO_voidSetDirection>:
void MDIO_voidSetDirection(uint8 copy_uint8Port,uint8 copy_uint8Pin, uint8 copy_uint8Mode){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	460b      	mov	r3, r1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	717b      	strb	r3, [r7, #5]

	switch (copy_uint8Port){
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b02      	cmp	r3, #2
 800113a:	f000 80b3 	beq.w	80012a4 <MDIO_voidSetDirection+0x180>
 800113e:	2b02      	cmp	r3, #2
 8001140:	f300 810a 	bgt.w	8001358 <MDIO_voidSetDirection+0x234>
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <MDIO_voidSetDirection+0x2a>
 8001148:	2b01      	cmp	r3, #1
 800114a:	d056      	beq.n	80011fa <MDIO_voidSetDirection+0xd6>
			else if(copy_uint8Mode == INPUT_PULL_UP){
				SET_BIT(GPIOC_ODR,copy_uint8Pin);
			}
			break;
	}
}
 800114c:	e104      	b.n	8001358 <MDIO_voidSetDirection+0x234>
			if(copy_uint8Pin<8){
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	2b07      	cmp	r3, #7
 8001152:	d817      	bhi.n	8001184 <MDIO_voidSetDirection+0x60>
				GPIOA_CRL &= ~((0b1111)<<(copy_uint8Pin*4));
 8001154:	4b83      	ldr	r3, [pc, #524]	; (8001364 <MDIO_voidSetDirection+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	79ba      	ldrb	r2, [r7, #6]
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	210f      	movs	r1, #15
 800115e:	fa01 f202 	lsl.w	r2, r1, r2
 8001162:	43d2      	mvns	r2, r2
 8001164:	4611      	mov	r1, r2
 8001166:	4a7f      	ldr	r2, [pc, #508]	; (8001364 <MDIO_voidSetDirection+0x240>)
 8001168:	400b      	ands	r3, r1
 800116a:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 800116c:	4b7d      	ldr	r3, [pc, #500]	; (8001364 <MDIO_voidSetDirection+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	7979      	ldrb	r1, [r7, #5]
 8001172:	79ba      	ldrb	r2, [r7, #6]
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	4611      	mov	r1, r2
 800117c:	4a79      	ldr	r2, [pc, #484]	; (8001364 <MDIO_voidSetDirection+0x240>)
 800117e:	430b      	orrs	r3, r1
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e01c      	b.n	80011be <MDIO_voidSetDirection+0x9a>
			else if(copy_uint8Pin<16){
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	d819      	bhi.n	80011be <MDIO_voidSetDirection+0x9a>
				copy_uint8Pin -=8;
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	3b08      	subs	r3, #8
 800118e:	71bb      	strb	r3, [r7, #6]
				GPIOA_CRH &= ~((0b1111)<<(copy_uint8Pin*4));
 8001190:	4b75      	ldr	r3, [pc, #468]	; (8001368 <MDIO_voidSetDirection+0x244>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	79ba      	ldrb	r2, [r7, #6]
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	210f      	movs	r1, #15
 800119a:	fa01 f202 	lsl.w	r2, r1, r2
 800119e:	43d2      	mvns	r2, r2
 80011a0:	4611      	mov	r1, r2
 80011a2:	4a71      	ldr	r2, [pc, #452]	; (8001368 <MDIO_voidSetDirection+0x244>)
 80011a4:	400b      	ands	r3, r1
 80011a6:	6013      	str	r3, [r2, #0]
			    GPIOA_CRH |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 80011a8:	4b6f      	ldr	r3, [pc, #444]	; (8001368 <MDIO_voidSetDirection+0x244>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	7979      	ldrb	r1, [r7, #5]
 80011ae:	79ba      	ldrb	r2, [r7, #6]
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	fa01 f202 	lsl.w	r2, r1, r2
 80011b6:	4611      	mov	r1, r2
 80011b8:	4a6b      	ldr	r2, [pc, #428]	; (8001368 <MDIO_voidSetDirection+0x244>)
 80011ba:	430b      	orrs	r3, r1
 80011bc:	6013      	str	r3, [r2, #0]
			if(copy_uint8Mode == INPUT_PULL_DOWN){
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d10b      	bne.n	80011dc <MDIO_voidSetDirection+0xb8>
			    CLR_BIT(GPIOA_ODR,copy_uint8Pin);
 80011c4:	4b69      	ldr	r3, [pc, #420]	; (800136c <MDIO_voidSetDirection+0x248>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	79ba      	ldrb	r2, [r7, #6]
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	43d2      	mvns	r2, r2
 80011d2:	4611      	mov	r1, r2
 80011d4:	4a65      	ldr	r2, [pc, #404]	; (800136c <MDIO_voidSetDirection+0x248>)
 80011d6:	400b      	ands	r3, r1
 80011d8:	6013      	str	r3, [r2, #0]
			break;
 80011da:	e0b8      	b.n	800134e <MDIO_voidSetDirection+0x22a>
			else if(copy_uint8Mode == INPUT_PULL_UP){
 80011dc:	797b      	ldrb	r3, [r7, #5]
 80011de:	2b08      	cmp	r3, #8
 80011e0:	f040 80b5 	bne.w	800134e <MDIO_voidSetDirection+0x22a>
				SET_BIT(GPIOA_ODR,copy_uint8Pin);
 80011e4:	4b61      	ldr	r3, [pc, #388]	; (800136c <MDIO_voidSetDirection+0x248>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	79ba      	ldrb	r2, [r7, #6]
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	4611      	mov	r1, r2
 80011f2:	4a5e      	ldr	r2, [pc, #376]	; (800136c <MDIO_voidSetDirection+0x248>)
 80011f4:	430b      	orrs	r3, r1
 80011f6:	6013      	str	r3, [r2, #0]
			break;
 80011f8:	e0a9      	b.n	800134e <MDIO_voidSetDirection+0x22a>
			if(copy_uint8Pin<8){
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d817      	bhi.n	8001230 <MDIO_voidSetDirection+0x10c>
				GPIOB_CRL &= ~((0b1111)<<(copy_uint8Pin*4));
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <MDIO_voidSetDirection+0x24c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	79ba      	ldrb	r2, [r7, #6]
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	210f      	movs	r1, #15
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	43d2      	mvns	r2, r2
 8001210:	4611      	mov	r1, r2
 8001212:	4a57      	ldr	r2, [pc, #348]	; (8001370 <MDIO_voidSetDirection+0x24c>)
 8001214:	400b      	ands	r3, r1
 8001216:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8001218:	4b55      	ldr	r3, [pc, #340]	; (8001370 <MDIO_voidSetDirection+0x24c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	7979      	ldrb	r1, [r7, #5]
 800121e:	79ba      	ldrb	r2, [r7, #6]
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	4611      	mov	r1, r2
 8001228:	4a51      	ldr	r2, [pc, #324]	; (8001370 <MDIO_voidSetDirection+0x24c>)
 800122a:	430b      	orrs	r3, r1
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e01c      	b.n	800126a <MDIO_voidSetDirection+0x146>
			else if(copy_uint8Pin<16){
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	d819      	bhi.n	800126a <MDIO_voidSetDirection+0x146>
				copy_uint8Pin -=8;
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	3b08      	subs	r3, #8
 800123a:	71bb      	strb	r3, [r7, #6]
				GPIOB_CRH &= ~((0b1111)<<(copy_uint8Pin*4));
 800123c:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <MDIO_voidSetDirection+0x250>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	79ba      	ldrb	r2, [r7, #6]
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	210f      	movs	r1, #15
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	43d2      	mvns	r2, r2
 800124c:	4611      	mov	r1, r2
 800124e:	4a49      	ldr	r2, [pc, #292]	; (8001374 <MDIO_voidSetDirection+0x250>)
 8001250:	400b      	ands	r3, r1
 8001252:	6013      	str	r3, [r2, #0]
			    GPIOB_CRH |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8001254:	4b47      	ldr	r3, [pc, #284]	; (8001374 <MDIO_voidSetDirection+0x250>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	7979      	ldrb	r1, [r7, #5]
 800125a:	79ba      	ldrb	r2, [r7, #6]
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	4611      	mov	r1, r2
 8001264:	4a43      	ldr	r2, [pc, #268]	; (8001374 <MDIO_voidSetDirection+0x250>)
 8001266:	430b      	orrs	r3, r1
 8001268:	6013      	str	r3, [r2, #0]
			if(copy_uint8Mode == INPUT_PULL_DOWN){
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	2b08      	cmp	r3, #8
 800126e:	d10b      	bne.n	8001288 <MDIO_voidSetDirection+0x164>
				CLR_BIT(GPIOB_ODR,copy_uint8Pin);
 8001270:	4b41      	ldr	r3, [pc, #260]	; (8001378 <MDIO_voidSetDirection+0x254>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	79ba      	ldrb	r2, [r7, #6]
 8001276:	2101      	movs	r1, #1
 8001278:	fa01 f202 	lsl.w	r2, r1, r2
 800127c:	43d2      	mvns	r2, r2
 800127e:	4611      	mov	r1, r2
 8001280:	4a3d      	ldr	r2, [pc, #244]	; (8001378 <MDIO_voidSetDirection+0x254>)
 8001282:	400b      	ands	r3, r1
 8001284:	6013      	str	r3, [r2, #0]
			break;
 8001286:	e064      	b.n	8001352 <MDIO_voidSetDirection+0x22e>
			else if(copy_uint8Mode == INPUT_PULL_UP){
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	2b08      	cmp	r3, #8
 800128c:	d161      	bne.n	8001352 <MDIO_voidSetDirection+0x22e>
				SET_BIT(GPIOB_ODR,copy_uint8Pin);
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <MDIO_voidSetDirection+0x254>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	79ba      	ldrb	r2, [r7, #6]
 8001294:	2101      	movs	r1, #1
 8001296:	fa01 f202 	lsl.w	r2, r1, r2
 800129a:	4611      	mov	r1, r2
 800129c:	4a36      	ldr	r2, [pc, #216]	; (8001378 <MDIO_voidSetDirection+0x254>)
 800129e:	430b      	orrs	r3, r1
 80012a0:	6013      	str	r3, [r2, #0]
			break;
 80012a2:	e056      	b.n	8001352 <MDIO_voidSetDirection+0x22e>
			if(copy_uint8Pin<8){
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	d817      	bhi.n	80012da <MDIO_voidSetDirection+0x1b6>
				GPIOC_CRL &= ~((0b1111)<<(copy_uint8Pin*4));
 80012aa:	4b34      	ldr	r3, [pc, #208]	; (800137c <MDIO_voidSetDirection+0x258>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	79ba      	ldrb	r2, [r7, #6]
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	210f      	movs	r1, #15
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	4611      	mov	r1, r2
 80012bc:	4a2f      	ldr	r2, [pc, #188]	; (800137c <MDIO_voidSetDirection+0x258>)
 80012be:	400b      	ands	r3, r1
 80012c0:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 80012c2:	4b2e      	ldr	r3, [pc, #184]	; (800137c <MDIO_voidSetDirection+0x258>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	7979      	ldrb	r1, [r7, #5]
 80012c8:	79ba      	ldrb	r2, [r7, #6]
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4611      	mov	r1, r2
 80012d2:	4a2a      	ldr	r2, [pc, #168]	; (800137c <MDIO_voidSetDirection+0x258>)
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e01c      	b.n	8001314 <MDIO_voidSetDirection+0x1f0>
			else if(copy_uint8Pin<16){
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d819      	bhi.n	8001314 <MDIO_voidSetDirection+0x1f0>
				copy_uint8Pin -=8;
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	3b08      	subs	r3, #8
 80012e4:	71bb      	strb	r3, [r7, #6]
     			GPIOC_CRH &= ~((0b1111)<<(copy_uint8Pin*4));
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <MDIO_voidSetDirection+0x25c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	210f      	movs	r1, #15
 80012f0:	fa01 f202 	lsl.w	r2, r1, r2
 80012f4:	43d2      	mvns	r2, r2
 80012f6:	4611      	mov	r1, r2
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <MDIO_voidSetDirection+0x25c>)
 80012fa:	400b      	ands	r3, r1
 80012fc:	6013      	str	r3, [r2, #0]
			    GPIOC_CRH |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <MDIO_voidSetDirection+0x25c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7979      	ldrb	r1, [r7, #5]
 8001304:	79ba      	ldrb	r2, [r7, #6]
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	fa01 f202 	lsl.w	r2, r1, r2
 800130c:	4611      	mov	r1, r2
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <MDIO_voidSetDirection+0x25c>)
 8001310:	430b      	orrs	r3, r1
 8001312:	6013      	str	r3, [r2, #0]
			if(copy_uint8Mode == INPUT_PULL_DOWN){
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	2b08      	cmp	r3, #8
 8001318:	d10b      	bne.n	8001332 <MDIO_voidSetDirection+0x20e>
			   CLR_BIT(GPIOC_ODR,copy_uint8Pin);
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MDIO_voidSetDirection+0x260>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	79ba      	ldrb	r2, [r7, #6]
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	43d2      	mvns	r2, r2
 8001328:	4611      	mov	r1, r2
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <MDIO_voidSetDirection+0x260>)
 800132c:	400b      	ands	r3, r1
 800132e:	6013      	str	r3, [r2, #0]
			break;
 8001330:	e011      	b.n	8001356 <MDIO_voidSetDirection+0x232>
			else if(copy_uint8Mode == INPUT_PULL_UP){
 8001332:	797b      	ldrb	r3, [r7, #5]
 8001334:	2b08      	cmp	r3, #8
 8001336:	d10e      	bne.n	8001356 <MDIO_voidSetDirection+0x232>
				SET_BIT(GPIOC_ODR,copy_uint8Pin);
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MDIO_voidSetDirection+0x260>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	79ba      	ldrb	r2, [r7, #6]
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	4611      	mov	r1, r2
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <MDIO_voidSetDirection+0x260>)
 8001348:	430b      	orrs	r3, r1
 800134a:	6013      	str	r3, [r2, #0]
			break;
 800134c:	e003      	b.n	8001356 <MDIO_voidSetDirection+0x232>
			break;
 800134e:	bf00      	nop
 8001350:	e002      	b.n	8001358 <MDIO_voidSetDirection+0x234>
			break;
 8001352:	bf00      	nop
 8001354:	e000      	b.n	8001358 <MDIO_voidSetDirection+0x234>
			break;
 8001356:	bf00      	nop
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40010800 	.word	0x40010800
 8001368:	40010804 	.word	0x40010804
 800136c:	4001080c 	.word	0x4001080c
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40010c04 	.word	0x40010c04
 8001378:	40010c0c 	.word	0x40010c0c
 800137c:	40011000 	.word	0x40011000
 8001380:	40011004 	.word	0x40011004
 8001384:	4001100c 	.word	0x4001100c

08001388 <MDIO_voidWrite_D_pin>:

void MDIO_voidWrite_D_pin(uint8 copy_uint8Port,uint8 copy_uint8Pin, uint8 copy_uint8Value){
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	460b      	mov	r3, r1
 8001394:	71bb      	strb	r3, [r7, #6]
 8001396:	4613      	mov	r3, r2
 8001398:	717b      	strb	r3, [r7, #5]
	switch(copy_uint8Port){
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d040      	beq.n	8001422 <MDIO_voidWrite_D_pin+0x9a>
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	dc60      	bgt.n	8001466 <MDIO_voidWrite_D_pin+0xde>
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <MDIO_voidWrite_D_pin+0x26>
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d01d      	beq.n	80013e8 <MDIO_voidWrite_D_pin+0x60>
			else if(copy_uint8Value == LOW){
					CLR_BIT(GPIOC_ODR,copy_uint8Pin);
			}
		break;
	}
}
 80013ac:	e05b      	b.n	8001466 <MDIO_voidWrite_D_pin+0xde>
				if(copy_uint8Value == HIGH){
 80013ae:	797b      	ldrb	r3, [r7, #5]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d10a      	bne.n	80013ca <MDIO_voidWrite_D_pin+0x42>
					SET_BIT(GPIOA_ODR,copy_uint8Pin);
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <MDIO_voidWrite_D_pin+0xe8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	79ba      	ldrb	r2, [r7, #6]
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	4611      	mov	r1, r2
 80013c2:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <MDIO_voidWrite_D_pin+0xe8>)
 80013c4:	430b      	orrs	r3, r1
 80013c6:	6013      	str	r3, [r2, #0]
		break;
 80013c8:	e048      	b.n	800145c <MDIO_voidWrite_D_pin+0xd4>
				else if(copy_uint8Value == LOW){
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d145      	bne.n	800145c <MDIO_voidWrite_D_pin+0xd4>
					CLR_BIT(GPIOA_ODR,copy_uint8Pin);
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <MDIO_voidWrite_D_pin+0xe8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	79ba      	ldrb	r2, [r7, #6]
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f202 	lsl.w	r2, r1, r2
 80013dc:	43d2      	mvns	r2, r2
 80013de:	4611      	mov	r1, r2
 80013e0:	4a23      	ldr	r2, [pc, #140]	; (8001470 <MDIO_voidWrite_D_pin+0xe8>)
 80013e2:	400b      	ands	r3, r1
 80013e4:	6013      	str	r3, [r2, #0]
		break;
 80013e6:	e039      	b.n	800145c <MDIO_voidWrite_D_pin+0xd4>
				if(copy_uint8Value == HIGH){
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d10a      	bne.n	8001404 <MDIO_voidWrite_D_pin+0x7c>
					SET_BIT(GPIOB_ODR,copy_uint8Pin);
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MDIO_voidWrite_D_pin+0xec>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	79ba      	ldrb	r2, [r7, #6]
 80013f4:	2101      	movs	r1, #1
 80013f6:	fa01 f202 	lsl.w	r2, r1, r2
 80013fa:	4611      	mov	r1, r2
 80013fc:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <MDIO_voidWrite_D_pin+0xec>)
 80013fe:	430b      	orrs	r3, r1
 8001400:	6013      	str	r3, [r2, #0]
		break;
 8001402:	e02d      	b.n	8001460 <MDIO_voidWrite_D_pin+0xd8>
				else if(copy_uint8Value == LOW){
 8001404:	797b      	ldrb	r3, [r7, #5]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d12a      	bne.n	8001460 <MDIO_voidWrite_D_pin+0xd8>
					CLR_BIT(GPIOB_ODR,copy_uint8Pin);
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MDIO_voidWrite_D_pin+0xec>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	79ba      	ldrb	r2, [r7, #6]
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f202 	lsl.w	r2, r1, r2
 8001416:	43d2      	mvns	r2, r2
 8001418:	4611      	mov	r1, r2
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <MDIO_voidWrite_D_pin+0xec>)
 800141c:	400b      	ands	r3, r1
 800141e:	6013      	str	r3, [r2, #0]
		break;
 8001420:	e01e      	b.n	8001460 <MDIO_voidWrite_D_pin+0xd8>
			if(copy_uint8Value == HIGH){
 8001422:	797b      	ldrb	r3, [r7, #5]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d10a      	bne.n	800143e <MDIO_voidWrite_D_pin+0xb6>
					SET_BIT(GPIOC_ODR,copy_uint8Pin);
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <MDIO_voidWrite_D_pin+0xf0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	79ba      	ldrb	r2, [r7, #6]
 800142e:	2101      	movs	r1, #1
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	4611      	mov	r1, r2
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <MDIO_voidWrite_D_pin+0xf0>)
 8001438:	430b      	orrs	r3, r1
 800143a:	6013      	str	r3, [r2, #0]
		break;
 800143c:	e012      	b.n	8001464 <MDIO_voidWrite_D_pin+0xdc>
			else if(copy_uint8Value == LOW){
 800143e:	797b      	ldrb	r3, [r7, #5]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10f      	bne.n	8001464 <MDIO_voidWrite_D_pin+0xdc>
					CLR_BIT(GPIOC_ODR,copy_uint8Pin);
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MDIO_voidWrite_D_pin+0xf0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	79ba      	ldrb	r2, [r7, #6]
 800144a:	2101      	movs	r1, #1
 800144c:	fa01 f202 	lsl.w	r2, r1, r2
 8001450:	43d2      	mvns	r2, r2
 8001452:	4611      	mov	r1, r2
 8001454:	4a08      	ldr	r2, [pc, #32]	; (8001478 <MDIO_voidWrite_D_pin+0xf0>)
 8001456:	400b      	ands	r3, r1
 8001458:	6013      	str	r3, [r2, #0]
		break;
 800145a:	e003      	b.n	8001464 <MDIO_voidWrite_D_pin+0xdc>
		break;
 800145c:	bf00      	nop
 800145e:	e002      	b.n	8001466 <MDIO_voidWrite_D_pin+0xde>
		break;
 8001460:	bf00      	nop
 8001462:	e000      	b.n	8001466 <MDIO_voidWrite_D_pin+0xde>
		break;
 8001464:	bf00      	nop
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	4001080c 	.word	0x4001080c
 8001474:	40010c0c 	.word	0x40010c0c
 8001478:	4001100c 	.word	0x4001100c

0800147c <MEXTI_voidInit>:
static void (*EXTI_LINE6_CALLBACK)(void);
static void (*EXTI_LINE7_CALLBACK)(void);
static void (*EXTI_LINE8_CALLBACK)(void);
static void (*EXTI_LINE9_CALLBACK)(void);

void MEXTI_voidInit(uint8 Copy_uint8EXTINo,uint8 Copy_uint8Event){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
    MAFIO_voidInitAFIO();
 800148c:	f7ff fac6 	bl	8000a1c <MAFIO_voidInitAFIO>
    if(Copy_uint8EXTINo < 20){
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b13      	cmp	r3, #19
 8001494:	d86a      	bhi.n	800156c <MEXTI_voidInit+0xf0>
        /*Port A*/
        /*AFIO initiate*/
        MAFIO_voidSetEXTIConfiguration(PORTA_AFIO,Copy_uint8EXTINo);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4619      	mov	r1, r3
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fac8 	bl	8000a30 <MAFIO_voidSetEXTIConfiguration>
        /*NVIC initiate*/
        if(Copy_uint8EXTINo == 0){
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <MEXTI_voidInit+0x32>
            MNVIC_voidEnableInterrupt(EXTI0_INT_NO);
 80014a6:	2006      	movs	r0, #6
 80014a8:	f000 fcfe 	bl	8001ea8 <MNVIC_voidEnableInterrupt>
 80014ac:	e028      	b.n	8001500 <MEXTI_voidInit+0x84>
        }
        else if(Copy_uint8EXTINo == 1){
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d103      	bne.n	80014bc <MEXTI_voidInit+0x40>
            MNVIC_voidEnableInterrupt(EXTI1_INT_NO);
 80014b4:	2007      	movs	r0, #7
 80014b6:	f000 fcf7 	bl	8001ea8 <MNVIC_voidEnableInterrupt>
 80014ba:	e021      	b.n	8001500 <MEXTI_voidInit+0x84>
        }
        else if(Copy_uint8EXTINo == 2){
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d103      	bne.n	80014ca <MEXTI_voidInit+0x4e>
            MNVIC_voidEnableInterrupt(EXTI2_INT_NO);
 80014c2:	2008      	movs	r0, #8
 80014c4:	f000 fcf0 	bl	8001ea8 <MNVIC_voidEnableInterrupt>
 80014c8:	e01a      	b.n	8001500 <MEXTI_voidInit+0x84>
        }
        else if(Copy_uint8EXTINo == 3){
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d103      	bne.n	80014d8 <MEXTI_voidInit+0x5c>
            MNVIC_voidEnableInterrupt(EXTI3_INT_NO);
 80014d0:	2009      	movs	r0, #9
 80014d2:	f000 fce9 	bl	8001ea8 <MNVIC_voidEnableInterrupt>
 80014d6:	e013      	b.n	8001500 <MEXTI_voidInit+0x84>
        }
        else if(Copy_uint8EXTINo == 4){
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d103      	bne.n	80014e6 <MEXTI_voidInit+0x6a>
            MNVIC_voidEnableInterrupt(EXTI4_INT_NO);
 80014de:	200a      	movs	r0, #10
 80014e0:	f000 fce2 	bl	8001ea8 <MNVIC_voidEnableInterrupt>
 80014e4:	e00c      	b.n	8001500 <MEXTI_voidInit+0x84>
        }
        else if(Copy_uint8EXTINo < 10){
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d803      	bhi.n	80014f4 <MEXTI_voidInit+0x78>
            MNVIC_voidEnableInterrupt(EXTI9_5_INT_NO);
 80014ec:	2017      	movs	r0, #23
 80014ee:	f000 fcdb 	bl	8001ea8 <MNVIC_voidEnableInterrupt>
 80014f2:	e005      	b.n	8001500 <MEXTI_voidInit+0x84>
        }
        else if(Copy_uint8EXTINo < 16){
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	d802      	bhi.n	8001500 <MEXTI_voidInit+0x84>
            MNVIC_voidEnableInterrupt(EXTI15_10_INT_NO);
 80014fa:	2028      	movs	r0, #40	; 0x28
 80014fc:	f000 fcd4 	bl	8001ea8 <MNVIC_voidEnableInterrupt>
        }
        else{
            /*waring wrong interrupt input for nvic selection*/
        }
        /*Interrupt set periorty*/
        switch(Copy_uint8Event){
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d01d      	beq.n	8001542 <MEXTI_voidInit+0xc6>
 8001506:	2b02      	cmp	r3, #2
 8001508:	f300 80b0 	bgt.w	800166c <MEXTI_voidInit+0x1f0>
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <MEXTI_voidInit+0x9a>
 8001510:	2b01      	cmp	r3, #1
 8001512:	d00b      	beq.n	800152c <MEXTI_voidInit+0xb0>
        }
    }
    else{
        /*Waring wrong chose of pins*/
    }
}
 8001514:	e0aa      	b.n	800166c <MEXTI_voidInit+0x1f0>
            SET_BIT(EXTI -> RTSR , Copy_uint8EXTINo);
 8001516:	4b57      	ldr	r3, [pc, #348]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	2101      	movs	r1, #1
 800151e:	fa01 f202 	lsl.w	r2, r1, r2
 8001522:	4611      	mov	r1, r2
 8001524:	4a53      	ldr	r2, [pc, #332]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001526:	430b      	orrs	r3, r1
 8001528:	6093      	str	r3, [r2, #8]
            break;
 800152a:	e09f      	b.n	800166c <MEXTI_voidInit+0x1f0>
            SET_BIT(EXTI -> FTSR , Copy_uint8EXTINo);
 800152c:	4b51      	ldr	r3, [pc, #324]	; (8001674 <MEXTI_voidInit+0x1f8>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	4611      	mov	r1, r2
 800153a:	4a4e      	ldr	r2, [pc, #312]	; (8001674 <MEXTI_voidInit+0x1f8>)
 800153c:	430b      	orrs	r3, r1
 800153e:	60d3      	str	r3, [r2, #12]
            break;
 8001540:	e094      	b.n	800166c <MEXTI_voidInit+0x1f0>
            SET_BIT(EXTI -> RTSR , Copy_uint8EXTINo);
 8001542:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	4611      	mov	r1, r2
 8001550:	4a48      	ldr	r2, [pc, #288]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001552:	430b      	orrs	r3, r1
 8001554:	6093      	str	r3, [r2, #8]
            SET_BIT(EXTI -> FTSR , Copy_uint8EXTINo);   
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	2101      	movs	r1, #1
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	4611      	mov	r1, r2
 8001564:	4a43      	ldr	r2, [pc, #268]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001566:	430b      	orrs	r3, r1
 8001568:	60d3      	str	r3, [r2, #12]
            break;
 800156a:	e07f      	b.n	800166c <MEXTI_voidInit+0x1f0>
    else if(Copy_uint8EXTINo < 40){
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b27      	cmp	r3, #39	; 0x27
 8001570:	d83c      	bhi.n	80015ec <MEXTI_voidInit+0x170>
        Copy_uint8EXTINo -= 20;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	3b14      	subs	r3, #20
 8001576:	71fb      	strb	r3, [r7, #7]
        MAFIO_voidSetEXTIConfiguration(PORTB_AFIO ,Copy_uint8EXTINo);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4619      	mov	r1, r3
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff fa57 	bl	8000a30 <MAFIO_voidSetEXTIConfiguration>
        switch(Copy_uint8Event){
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d01c      	beq.n	80015c2 <MEXTI_voidInit+0x146>
 8001588:	2b02      	cmp	r3, #2
 800158a:	dc6f      	bgt.n	800166c <MEXTI_voidInit+0x1f0>
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <MEXTI_voidInit+0x11a>
 8001590:	2b01      	cmp	r3, #1
 8001592:	d00b      	beq.n	80015ac <MEXTI_voidInit+0x130>
}
 8001594:	e06a      	b.n	800166c <MEXTI_voidInit+0x1f0>
            SET_BIT(EXTI -> RTSR , Copy_uint8EXTINo);
 8001596:	4b37      	ldr	r3, [pc, #220]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	2101      	movs	r1, #1
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	4611      	mov	r1, r2
 80015a4:	4a33      	ldr	r2, [pc, #204]	; (8001674 <MEXTI_voidInit+0x1f8>)
 80015a6:	430b      	orrs	r3, r1
 80015a8:	6093      	str	r3, [r2, #8]
            break;
 80015aa:	e05f      	b.n	800166c <MEXTI_voidInit+0x1f0>
            SET_BIT(EXTI -> FTSR , Copy_uint8EXTINo);
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <MEXTI_voidInit+0x1f8>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	2101      	movs	r1, #1
 80015b4:	fa01 f202 	lsl.w	r2, r1, r2
 80015b8:	4611      	mov	r1, r2
 80015ba:	4a2e      	ldr	r2, [pc, #184]	; (8001674 <MEXTI_voidInit+0x1f8>)
 80015bc:	430b      	orrs	r3, r1
 80015be:	60d3      	str	r3, [r2, #12]
            break;
 80015c0:	e054      	b.n	800166c <MEXTI_voidInit+0x1f0>
            SET_BIT(EXTI -> RTSR , Copy_uint8EXTINo);
 80015c2:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <MEXTI_voidInit+0x1f8>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f202 	lsl.w	r2, r1, r2
 80015ce:	4611      	mov	r1, r2
 80015d0:	4a28      	ldr	r2, [pc, #160]	; (8001674 <MEXTI_voidInit+0x1f8>)
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6093      	str	r3, [r2, #8]
            SET_BIT(EXTI -> FTSR , Copy_uint8EXTINo);   
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MEXTI_voidInit+0x1f8>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	79fa      	ldrb	r2, [r7, #7]
 80015dc:	2101      	movs	r1, #1
 80015de:	fa01 f202 	lsl.w	r2, r1, r2
 80015e2:	4611      	mov	r1, r2
 80015e4:	4a23      	ldr	r2, [pc, #140]	; (8001674 <MEXTI_voidInit+0x1f8>)
 80015e6:	430b      	orrs	r3, r1
 80015e8:	60d3      	str	r3, [r2, #12]
            break;
 80015ea:	e03f      	b.n	800166c <MEXTI_voidInit+0x1f0>
    else if(Copy_uint8EXTINo < 60){
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b3b      	cmp	r3, #59	; 0x3b
 80015f0:	d83c      	bhi.n	800166c <MEXTI_voidInit+0x1f0>
        Copy_uint8EXTINo -= 40;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	3b28      	subs	r3, #40	; 0x28
 80015f6:	71fb      	strb	r3, [r7, #7]
        MAFIO_voidSetEXTIConfiguration(PORTC_AFIO,Copy_uint8EXTINo);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4619      	mov	r1, r3
 80015fc:	2002      	movs	r0, #2
 80015fe:	f7ff fa17 	bl	8000a30 <MAFIO_voidSetEXTIConfiguration>
        switch(Copy_uint8Event){
 8001602:	79bb      	ldrb	r3, [r7, #6]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d01c      	beq.n	8001642 <MEXTI_voidInit+0x1c6>
 8001608:	2b02      	cmp	r3, #2
 800160a:	dc2f      	bgt.n	800166c <MEXTI_voidInit+0x1f0>
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <MEXTI_voidInit+0x19a>
 8001610:	2b01      	cmp	r3, #1
 8001612:	d00b      	beq.n	800162c <MEXTI_voidInit+0x1b0>
}
 8001614:	e02a      	b.n	800166c <MEXTI_voidInit+0x1f0>
            SET_BIT(EXTI -> RTSR , Copy_uint8EXTINo);
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	2101      	movs	r1, #1
 800161e:	fa01 f202 	lsl.w	r2, r1, r2
 8001622:	4611      	mov	r1, r2
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001626:	430b      	orrs	r3, r1
 8001628:	6093      	str	r3, [r2, #8]
            break;
 800162a:	e01f      	b.n	800166c <MEXTI_voidInit+0x1f0>
            SET_BIT(EXTI -> FTSR , Copy_uint8EXTINo);
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MEXTI_voidInit+0x1f8>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	79fa      	ldrb	r2, [r7, #7]
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	4611      	mov	r1, r2
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <MEXTI_voidInit+0x1f8>)
 800163c:	430b      	orrs	r3, r1
 800163e:	60d3      	str	r3, [r2, #12]
            break;
 8001640:	e014      	b.n	800166c <MEXTI_voidInit+0x1f0>
            SET_BIT(EXTI -> RTSR , Copy_uint8EXTINo);
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f202 	lsl.w	r2, r1, r2
 800164e:	4611      	mov	r1, r2
 8001650:	4a08      	ldr	r2, [pc, #32]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001652:	430b      	orrs	r3, r1
 8001654:	6093      	str	r3, [r2, #8]
            SET_BIT(EXTI -> FTSR , Copy_uint8EXTINo);   
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	4611      	mov	r1, r2
 8001664:	4a03      	ldr	r2, [pc, #12]	; (8001674 <MEXTI_voidInit+0x1f8>)
 8001666:	430b      	orrs	r3, r1
 8001668:	60d3      	str	r3, [r2, #12]
            break;
 800166a:	bf00      	nop
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40010400 	.word	0x40010400

08001678 <MEXTI_voidSetCallback>:
    else{
        /*Waring wrong chose of pins*/
    }
}

void MEXTI_voidSetCallback(uint8 A_uint8LineNo ,void (*A_voidfptr)(void)){
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]

	switch(A_uint8LineNo){
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b09      	cmp	r3, #9
 8001688:	d83e      	bhi.n	8001708 <MEXTI_voidSetCallback+0x90>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <MEXTI_voidSetCallback+0x18>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016b9 	.word	0x080016b9
 8001694:	080016c1 	.word	0x080016c1
 8001698:	080016c9 	.word	0x080016c9
 800169c:	080016d1 	.word	0x080016d1
 80016a0:	080016d9 	.word	0x080016d9
 80016a4:	080016e1 	.word	0x080016e1
 80016a8:	080016e9 	.word	0x080016e9
 80016ac:	080016f1 	.word	0x080016f1
 80016b0:	080016f9 	.word	0x080016f9
 80016b4:	08001701 	.word	0x08001701
	case 0:
		EXTI_LINE0_CALLBACK = A_voidfptr;
 80016b8:	4a16      	ldr	r2, [pc, #88]	; (8001714 <MEXTI_voidSetCallback+0x9c>)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	6013      	str	r3, [r2, #0]
	break;
 80016be:	e023      	b.n	8001708 <MEXTI_voidSetCallback+0x90>
	case 1:
		EXTI_LINE1_CALLBACK = A_voidfptr;
 80016c0:	4a15      	ldr	r2, [pc, #84]	; (8001718 <MEXTI_voidSetCallback+0xa0>)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6013      	str	r3, [r2, #0]
	break;
 80016c6:	e01f      	b.n	8001708 <MEXTI_voidSetCallback+0x90>
	case 2:
		EXTI_LINE2_CALLBACK = A_voidfptr;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <MEXTI_voidSetCallback+0xa4>)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6013      	str	r3, [r2, #0]
	break;
 80016ce:	e01b      	b.n	8001708 <MEXTI_voidSetCallback+0x90>
	case 3:
		EXTI_LINE3_CALLBACK = A_voidfptr;
 80016d0:	4a13      	ldr	r2, [pc, #76]	; (8001720 <MEXTI_voidSetCallback+0xa8>)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6013      	str	r3, [r2, #0]
	break;
 80016d6:	e017      	b.n	8001708 <MEXTI_voidSetCallback+0x90>
	case 4:
		EXTI_LINE4_CALLBACK = A_voidfptr;
 80016d8:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MEXTI_voidSetCallback+0xac>)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	6013      	str	r3, [r2, #0]
	break;
 80016de:	e013      	b.n	8001708 <MEXTI_voidSetCallback+0x90>
	case 5:
		EXTI_LINE5_CALLBACK = A_voidfptr;
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <MEXTI_voidSetCallback+0xb0>)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	6013      	str	r3, [r2, #0]
	break;
 80016e6:	e00f      	b.n	8001708 <MEXTI_voidSetCallback+0x90>
	case 6:
		EXTI_LINE6_CALLBACK = A_voidfptr;
 80016e8:	4a10      	ldr	r2, [pc, #64]	; (800172c <MEXTI_voidSetCallback+0xb4>)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	6013      	str	r3, [r2, #0]
	break;
 80016ee:	e00b      	b.n	8001708 <MEXTI_voidSetCallback+0x90>
	case 7:
		EXTI_LINE7_CALLBACK = A_voidfptr;
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <MEXTI_voidSetCallback+0xb8>)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6013      	str	r3, [r2, #0]
	break;
 80016f6:	e007      	b.n	8001708 <MEXTI_voidSetCallback+0x90>
	case 8:
		EXTI_LINE8_CALLBACK = A_voidfptr;
 80016f8:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <MEXTI_voidSetCallback+0xbc>)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6013      	str	r3, [r2, #0]
	break;
 80016fe:	e003      	b.n	8001708 <MEXTI_voidSetCallback+0x90>
	case 9:
		EXTI_LINE9_CALLBACK = A_voidfptr;
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <MEXTI_voidSetCallback+0xc0>)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6013      	str	r3, [r2, #0]
	break;
 8001706:	bf00      	nop

	}
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000008c 	.word	0x2000008c
 8001718:	20000090 	.word	0x20000090
 800171c:	20000094 	.word	0x20000094
 8001720:	20000098 	.word	0x20000098
 8001724:	2000009c 	.word	0x2000009c
 8001728:	200000a0 	.word	0x200000a0
 800172c:	200000a4 	.word	0x200000a4
 8001730:	200000a8 	.word	0x200000a8
 8001734:	200000ac 	.word	0x200000ac
 8001738:	200000b0 	.word	0x200000b0

0800173c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	EXTI_LINE0_CALLBACK();
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <EXTI0_IRQHandler+0x1c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4798      	blx	r3
	SET_BIT(EXTI->PR, 0);
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <EXTI0_IRQHandler+0x20>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <EXTI0_IRQHandler+0x20>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6153      	str	r3, [r2, #20]
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000008c 	.word	0x2000008c
 800175c:	40010400 	.word	0x40010400

08001760 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	EXTI_LINE1_CALLBACK();
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <EXTI1_IRQHandler+0x1c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4798      	blx	r3
	SET_BIT(EXTI->PR, 1);
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <EXTI1_IRQHandler+0x20>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <EXTI1_IRQHandler+0x20>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6153      	str	r3, [r2, #20]
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000090 	.word	0x20000090
 8001780:	40010400 	.word	0x40010400

08001784 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	EXTI_LINE2_CALLBACK();
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <EXTI2_IRQHandler+0x1c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4798      	blx	r3
	SET_BIT(EXTI->PR, 2);
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <EXTI2_IRQHandler+0x20>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <EXTI2_IRQHandler+0x20>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6153      	str	r3, [r2, #20]
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000094 	.word	0x20000094
 80017a4:	40010400 	.word	0x40010400

080017a8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	EXTI_LINE3_CALLBACK();
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <EXTI3_IRQHandler+0x1c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4798      	blx	r3
	SET_BIT(EXTI->PR, 3);
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <EXTI3_IRQHandler+0x20>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <EXTI3_IRQHandler+0x20>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	6153      	str	r3, [r2, #20]
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000098 	.word	0x20000098
 80017c8:	40010400 	.word	0x40010400

080017cc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	EXTI_LINE4_CALLBACK();
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <EXTI4_IRQHandler+0x1c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4798      	blx	r3
	SET_BIT(EXTI->PR, 4);
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <EXTI4_IRQHandler+0x20>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <EXTI4_IRQHandler+0x20>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	6153      	str	r3, [r2, #20]
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000009c 	.word	0x2000009c
 80017ec:	40010400 	.word	0x40010400

080017f0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	if(GET_BIT(EXTI->PR,5)==1)
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d109      	bne.n	8001816 <EXTI9_5_IRQHandler+0x26>
	{
		EXTI_LINE5_CALLBACK();
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <EXTI9_5_IRQHandler+0xb4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4798      	blx	r3
		SET_BIT(EXTI->PR,5);
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 800180e:	f043 0320 	orr.w	r3, r3, #32
 8001812:	6153      	str	r3, [r2, #20]
	}
	else
		{

		}
}
 8001814:	e042      	b.n	800189c <EXTI9_5_IRQHandler+0xac>
	else if(GET_BIT(EXTI->PR,6)==1)
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d109      	bne.n	8001838 <EXTI9_5_IRQHandler+0x48>
		EXTI_LINE6_CALLBACK();
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <EXTI9_5_IRQHandler+0xb8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4798      	blx	r3
		SET_BIT(EXTI->PR,6);
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 8001830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001834:	6153      	str	r3, [r2, #20]
}
 8001836:	e031      	b.n	800189c <EXTI9_5_IRQHandler+0xac>
	else if(GET_BIT(EXTI->PR,7)==1)
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	09db      	lsrs	r3, r3, #7
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d109      	bne.n	800185a <EXTI9_5_IRQHandler+0x6a>
		EXTI_LINE7_CALLBACK();
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <EXTI9_5_IRQHandler+0xbc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4798      	blx	r3
		SET_BIT(EXTI->PR,7);
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 8001852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001856:	6153      	str	r3, [r2, #20]
}
 8001858:	e020      	b.n	800189c <EXTI9_5_IRQHandler+0xac>
	else if(GET_BIT(EXTI->PR,8)==1)
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d109      	bne.n	800187c <EXTI9_5_IRQHandler+0x8c>
		EXTI_LINE8_CALLBACK();
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <EXTI9_5_IRQHandler+0xc0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4798      	blx	r3
		SET_BIT(EXTI->PR,8);
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6153      	str	r3, [r2, #20]
}
 800187a:	e00f      	b.n	800189c <EXTI9_5_IRQHandler+0xac>
	else if(GET_BIT(EXTI->PR,9)==1)
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	0a5b      	lsrs	r3, r3, #9
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d108      	bne.n	800189c <EXTI9_5_IRQHandler+0xac>
		EXTI_LINE9_CALLBACK();
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <EXTI9_5_IRQHandler+0xc4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4798      	blx	r3
		SET_BIT(EXTI->PR,9);
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	4a02      	ldr	r2, [pc, #8]	; (80018a0 <EXTI9_5_IRQHandler+0xb0>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189a:	6153      	str	r3, [r2, #20]
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40010400 	.word	0x40010400
 80018a4:	200000a0 	.word	0x200000a0
 80018a8:	200000a4 	.word	0x200000a4
 80018ac:	200000a8 	.word	0x200000a8
 80018b0:	200000ac 	.word	0x200000ac
 80018b4:	200000b0 	.word	0x200000b0

080018b8 <MTimer_voidInitMode>:

#include "../Inc/MCAL/GENERAL_PURPOSE_TIMERS/GENRERALTIMERS_interface.h"
#include "../Inc/MCAL/GENERAL_PURPOSE_TIMERS/GENRERALTIMERS_private.h"
#include "../Inc/MCAL/GENERAL_PURPOSE_TIMERS/GENRERALTIMERS_config.h"

void MTimer_voidInitMode(uint8 Copy_uint8TimerNo,uint8 Copy_uint8Mode){
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71bb      	strb	r3, [r7, #6]
    switch (Copy_uint8TimerNo)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d071      	beq.n	80019b2 <MTimer_voidInitMode+0xfa>
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	f300 80a4 	bgt.w	8001a1c <MTimer_voidInitMode+0x164>
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <MTimer_voidInitMode+0x26>
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d03b      	beq.n	8001954 <MTimer_voidInitMode+0x9c>
            TIMER4->ARR = PWM4_WIDTH;
            break;
        }
        break;
    }
}
 80018dc:	e09e      	b.n	8001a1c <MTimer_voidInitMode+0x164>
        switch (Copy_uint8Mode)
 80018de:	79bb      	ldrb	r3, [r7, #6]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d01c      	beq.n	800191e <MTimer_voidInitMode+0x66>
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	f300 8094 	bgt.w	8001a12 <MTimer_voidInitMode+0x15a>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <MTimer_voidInitMode+0x3c>
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d02e      	beq.n	8001950 <MTimer_voidInitMode+0x98>
        break;
 80018f2:	e08e      	b.n	8001a12 <MTimer_voidInitMode+0x15a>
            CLR_BIT(TIMER2->CR1,4);
 80018f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fe:	f023 0310 	bic.w	r3, r3, #16
 8001902:	6013      	str	r3, [r2, #0]
            CLR_BIT(TIMER2->CR1,1); 
 8001904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190e:	f023 0302 	bic.w	r3, r3, #2
 8001912:	6013      	str	r3, [r2, #0]
            TIMER2->PSC = TIMER2_PRESCALER;
 8001914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001918:	2207      	movs	r2, #7
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 800191c:	e019      	b.n	8001952 <MTimer_voidInitMode+0x9a>
            CLR_BIT(TIMER2->CR1,4);
 800191e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001928:	f023 0310 	bic.w	r3, r3, #16
 800192c:	6013      	str	r3, [r2, #0]
            SET_BIT(TIMER2->CR1,7);
 800192e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193c:	6013      	str	r3, [r2, #0]
            TIMER2->PSC = TIMER2_PRESCALER;
 800193e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001942:	2207      	movs	r2, #7
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
            TIMER2->ARR = PWM2_WIDTH;
 8001946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800194a:	22fe      	movs	r2, #254	; 0xfe
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800194e:	e000      	b.n	8001952 <MTimer_voidInitMode+0x9a>
        break;
 8001950:	bf00      	nop
        break;
 8001952:	e05e      	b.n	8001a12 <MTimer_voidInitMode+0x15a>
    switch (Copy_uint8Mode)
 8001954:	79bb      	ldrb	r3, [r7, #6]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d016      	beq.n	8001988 <MTimer_voidInitMode+0xd0>
 800195a:	2b03      	cmp	r3, #3
 800195c:	dc5b      	bgt.n	8001a16 <MTimer_voidInitMode+0x15e>
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <MTimer_voidInitMode+0xb0>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d023      	beq.n	80019ae <MTimer_voidInitMode+0xf6>
        break;
 8001966:	e056      	b.n	8001a16 <MTimer_voidInitMode+0x15e>
            CLR_BIT(TIMER3->CR1,4);
 8001968:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <MTimer_voidInitMode+0x170>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <MTimer_voidInitMode+0x170>)
 800196e:	f023 0310 	bic.w	r3, r3, #16
 8001972:	6013      	str	r3, [r2, #0]
            CLR_BIT(TIMER3->CR1,1); 
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <MTimer_voidInitMode+0x170>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2b      	ldr	r2, [pc, #172]	; (8001a28 <MTimer_voidInitMode+0x170>)
 800197a:	f023 0302 	bic.w	r3, r3, #2
 800197e:	6013      	str	r3, [r2, #0]
            TIMER3->PSC = TIMER3_PRESCALER;
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <MTimer_voidInitMode+0x170>)
 8001982:	2207      	movs	r2, #7
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8001986:	e013      	b.n	80019b0 <MTimer_voidInitMode+0xf8>
            CLR_BIT(TIMER3->CR1,4);
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <MTimer_voidInitMode+0x170>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <MTimer_voidInitMode+0x170>)
 800198e:	f023 0310 	bic.w	r3, r3, #16
 8001992:	6013      	str	r3, [r2, #0]
            SET_BIT(TIMER3->CR1,7);
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <MTimer_voidInitMode+0x170>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <MTimer_voidInitMode+0x170>)
 800199a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199e:	6013      	str	r3, [r2, #0]
            TIMER3->PSC = TIMER3_PRESCALER;
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <MTimer_voidInitMode+0x170>)
 80019a2:	2207      	movs	r2, #7
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
            TIMER3->ARR = PWM3_WIDTH;
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <MTimer_voidInitMode+0x170>)
 80019a8:	22fe      	movs	r2, #254	; 0xfe
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 80019ac:	e000      	b.n	80019b0 <MTimer_voidInitMode+0xf8>
        break;
 80019ae:	bf00      	nop
        break;
 80019b0:	e031      	b.n	8001a16 <MTimer_voidInitMode+0x15e>
    switch (Copy_uint8Mode)
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d016      	beq.n	80019e6 <MTimer_voidInitMode+0x12e>
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	dc2e      	bgt.n	8001a1a <MTimer_voidInitMode+0x162>
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <MTimer_voidInitMode+0x10e>
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d024      	beq.n	8001a0e <MTimer_voidInitMode+0x156>
        break;
 80019c4:	e029      	b.n	8001a1a <MTimer_voidInitMode+0x162>
            CLR_BIT(TIMER4->CR1,4);
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MTimer_voidInitMode+0x174>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <MTimer_voidInitMode+0x174>)
 80019cc:	f023 0310 	bic.w	r3, r3, #16
 80019d0:	6013      	str	r3, [r2, #0]
            CLR_BIT(TIMER4->CR1,1); 
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MTimer_voidInitMode+0x174>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <MTimer_voidInitMode+0x174>)
 80019d8:	f023 0302 	bic.w	r3, r3, #2
 80019dc:	6013      	str	r3, [r2, #0]
            TIMER4->PSC = TIMER4_PRESCALER;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MTimer_voidInitMode+0x174>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80019e4:	e014      	b.n	8001a10 <MTimer_voidInitMode+0x158>
            CLR_BIT(TIMER4->CR1,4);
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MTimer_voidInitMode+0x174>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <MTimer_voidInitMode+0x174>)
 80019ec:	f023 0310 	bic.w	r3, r3, #16
 80019f0:	6013      	str	r3, [r2, #0]
            SET_BIT(TIMER4->CR1,7);
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MTimer_voidInitMode+0x174>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <MTimer_voidInitMode+0x174>)
 80019f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fc:	6013      	str	r3, [r2, #0]
            TIMER4->PSC = TIMER4_PRESCALER;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MTimer_voidInitMode+0x174>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
            TIMER4->ARR = PWM4_WIDTH;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MTimer_voidInitMode+0x174>)
 8001a06:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8001a0c:	e000      	b.n	8001a10 <MTimer_voidInitMode+0x158>
        break;
 8001a0e:	bf00      	nop
        break;
 8001a10:	e003      	b.n	8001a1a <MTimer_voidInitMode+0x162>
        break;
 8001a12:	bf00      	nop
 8001a14:	e002      	b.n	8001a1c <MTimer_voidInitMode+0x164>
        break;
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <MTimer_voidInitMode+0x164>
        break;
 8001a1a:	bf00      	nop
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40000400 	.word	0x40000400
 8001a2c:	40000800 	.word	0x40000800

08001a30 <MTIMER_SetPwm_CH_DutyCycle>:
    case TIMER_4:
        CLR_BIT(TIMER3->CR1,0);
        break;    
    }
}
void MTIMER_SetPwm_CH_DutyCycle(uint32 Copy_uint32DutyCycle,uint8 Copy_uint8TimerNo,uint8 Copy_uint8TimerChannel){
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	70bb      	strb	r3, [r7, #2]
    switch (Copy_uint8TimerNo)
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	f000 8181 	beq.w	8001d4a <MTIMER_SetPwm_CH_DutyCycle+0x31a>
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	f300 8226 	bgt.w	8001e9a <MTIMER_SetPwm_CH_DutyCycle+0x46a>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <MTIMER_SetPwm_CH_DutyCycle+0x2a>
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	f000 80d5 	beq.w	8001c02 <MTIMER_SetPwm_CH_DutyCycle+0x1d2>
	    SET_BIT(TIMER4->CR1,CEN);
        break;
    }
        /*configure GPIO
*/
}
 8001a58:	e21f      	b.n	8001e9a <MTIMER_SetPwm_CH_DutyCycle+0x46a>
        switch (Copy_uint8TimerChannel)
 8001a5a:	78bb      	ldrb	r3, [r7, #2]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	f200 80bf 	bhi.w	8001be0 <MTIMER_SetPwm_CH_DutyCycle+0x1b0>
 8001a62:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <MTIMER_SetPwm_CH_DutyCycle+0x38>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001ad3 	.word	0x08001ad3
 8001a70:	08001b2d 	.word	0x08001b2d
 8001a74:	08001b87 	.word	0x08001b87
        CLR_BIT(TIMER2->CCMR1,4);
 8001a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a82:	f023 0310 	bic.w	r3, r3, #16
 8001a86:	6193      	str	r3, [r2, #24]
        SET_BIT(TIMER2->CCMR1,5);
 8001a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a92:	f043 0320 	orr.w	r3, r3, #32
 8001a96:	6193      	str	r3, [r2, #24]
        SET_BIT(TIMER2->CCMR1,6);
 8001a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa6:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER2->CCER,CC1E);
 8001aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER2->CCMR1,OC1PE);
 8001ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	6193      	str	r3, [r2, #24]
            TIMER2->CCR1=Copy_uint32DutyCycle;
 8001ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8001ad0:	e086      	b.n	8001be0 <MTIMER_SetPwm_CH_DutyCycle+0x1b0>
        	CLR_BIT(TIMER2->CCMR1,12);
 8001ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ae0:	6193      	str	r3, [r2, #24]
    		SET_BIT(TIMER2->CCMR1,13);
 8001ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001af0:	6193      	str	r3, [r2, #24]
        	SET_BIT(TIMER2->CCMR1,14);
 8001af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER2->CCER,CC2E);
 8001b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b0c:	f043 0310 	orr.w	r3, r3, #16
 8001b10:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER2->CCMR1,OC2PE);
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b20:	6193      	str	r3, [r2, #24]
            TIMER2->CCR2=Copy_uint32DutyCycle;
 8001b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6393      	str	r3, [r2, #56]	; 0x38
            break;
 8001b2a:	e059      	b.n	8001be0 <MTIMER_SetPwm_CH_DutyCycle+0x1b0>
        	CLR_BIT(TIMER2->CCMR2,4);
 8001b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b36:	f023 0310 	bic.w	r3, r3, #16
 8001b3a:	61d3      	str	r3, [r2, #28]
    		SET_BIT(TIMER2->CCMR2,5);
 8001b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b46:	f043 0320 	orr.w	r3, r3, #32
 8001b4a:	61d3      	str	r3, [r2, #28]
        	SET_BIT(TIMER2->CCMR2,6);
 8001b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5a:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER2->CCER,CC3E);
 8001b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER2->CCMR2,OC3PE);
 8001b6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b76:	f043 0308 	orr.w	r3, r3, #8
 8001b7a:	61d3      	str	r3, [r2, #28]
            TIMER2->CCR3=Copy_uint32DutyCycle;
 8001b7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	63d3      	str	r3, [r2, #60]	; 0x3c
            break;
 8001b84:	e02c      	b.n	8001be0 <MTIMER_SetPwm_CH_DutyCycle+0x1b0>
        	CLR_BIT(TIMER2->CCMR2,12);
 8001b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b94:	61d3      	str	r3, [r2, #28]
    		SET_BIT(TIMER2->CCMR2,13);
 8001b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ba4:	61d3      	str	r3, [r2, #28]
        	SET_BIT(TIMER2->CCMR2,14);
 8001ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER2->CCER,CC4E);
 8001bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc4:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER2->CCMR2,OC4PE);
 8001bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bd4:	61d3      	str	r3, [r2, #28]
            TIMER2->CCR4=Copy_uint32DutyCycle;
 8001bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
        break;
 8001bde:	bf00      	nop
           SET_BIT(TIMER2->EGR,UG);
 8001be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6153      	str	r3, [r2, #20]
	    SET_BIT(TIMER2->CR1,CEN);
 8001bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]
        break;
 8001c00:	e14b      	b.n	8001e9a <MTIMER_SetPwm_CH_DutyCycle+0x46a>
        switch (Copy_uint8TimerChannel)
 8001c02:	78bb      	ldrb	r3, [r7, #2]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	f200 8093 	bhi.w	8001d30 <MTIMER_SetPwm_CH_DutyCycle+0x300>
 8001c0a:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <MTIMER_SetPwm_CH_DutyCycle+0x1e0>)
 8001c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c65 	.word	0x08001c65
 8001c18:	08001ca9 	.word	0x08001ca9
 8001c1c:	08001ced 	.word	0x08001ced
            CLR_BIT(TIMER3->CCMR1,4);
 8001c20:	4b84      	ldr	r3, [pc, #528]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a83      	ldr	r2, [pc, #524]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c26:	f023 0310 	bic.w	r3, r3, #16
 8001c2a:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER3->CCMR1,5);
 8001c2c:	4b81      	ldr	r3, [pc, #516]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a80      	ldr	r2, [pc, #512]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c32:	f043 0320 	orr.w	r3, r3, #32
 8001c36:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER3->CCMR1,6);
 8001c38:	4b7e      	ldr	r3, [pc, #504]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a7d      	ldr	r2, [pc, #500]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c42:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER3->CCER,CC1E);
 8001c44:	4b7b      	ldr	r3, [pc, #492]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a7a      	ldr	r2, [pc, #488]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER3->CCMR1,OC1PE);
 8001c50:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a77      	ldr	r2, [pc, #476]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	6193      	str	r3, [r2, #24]
            TIMER3->CCR1=Copy_uint32DutyCycle;
 8001c5c:	4a75      	ldr	r2, [pc, #468]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8001c62:	e065      	b.n	8001d30 <MTIMER_SetPwm_CH_DutyCycle+0x300>
        	CLR_BIT(TIMER3->CCMR1,12);
 8001c64:	4b73      	ldr	r3, [pc, #460]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a72      	ldr	r2, [pc, #456]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c6e:	6193      	str	r3, [r2, #24]
    		SET_BIT(TIMER3->CCMR1,13);
 8001c70:	4b70      	ldr	r3, [pc, #448]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a6f      	ldr	r2, [pc, #444]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c7a:	6193      	str	r3, [r2, #24]
        	SET_BIT(TIMER3->CCMR1,14);
 8001c7c:	4b6d      	ldr	r3, [pc, #436]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a6c      	ldr	r2, [pc, #432]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c86:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER3->CCER,CC2E);
 8001c88:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a69      	ldr	r2, [pc, #420]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c8e:	f043 0310 	orr.w	r3, r3, #16
 8001c92:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER3->CCMR1,OC2PE);
 8001c94:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a66      	ldr	r2, [pc, #408]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001c9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c9e:	6193      	str	r3, [r2, #24]
            TIMER3->CCR2=Copy_uint32DutyCycle;
 8001ca0:	4a64      	ldr	r2, [pc, #400]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6393      	str	r3, [r2, #56]	; 0x38
            break;
 8001ca6:	e043      	b.n	8001d30 <MTIMER_SetPwm_CH_DutyCycle+0x300>
        	CLR_BIT(TIMER3->CCMR2,4);
 8001ca8:	4b62      	ldr	r3, [pc, #392]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	4a61      	ldr	r2, [pc, #388]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cae:	f023 0310 	bic.w	r3, r3, #16
 8001cb2:	61d3      	str	r3, [r2, #28]
    		SET_BIT(TIMER3->CCMR2,5);
 8001cb4:	4b5f      	ldr	r3, [pc, #380]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	4a5e      	ldr	r2, [pc, #376]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cba:	f043 0320 	orr.w	r3, r3, #32
 8001cbe:	61d3      	str	r3, [r2, #28]
        	SET_BIT(TIMER3->CCMR2,6);
 8001cc0:	4b5c      	ldr	r3, [pc, #368]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	4a5b      	ldr	r2, [pc, #364]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cca:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER3->CCER,CC3E);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER3->CCMR2,OC3PE);
 8001cd8:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	4a55      	ldr	r2, [pc, #340]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	61d3      	str	r3, [r2, #28]
            TIMER3->CCR3=Copy_uint32DutyCycle;
 8001ce4:	4a53      	ldr	r2, [pc, #332]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	63d3      	str	r3, [r2, #60]	; 0x3c
            break;
 8001cea:	e021      	b.n	8001d30 <MTIMER_SetPwm_CH_DutyCycle+0x300>
        	CLR_BIT(TIMER3->CCMR2,12);
 8001cec:	4b51      	ldr	r3, [pc, #324]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	4a50      	ldr	r2, [pc, #320]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf6:	61d3      	str	r3, [r2, #28]
    		SET_BIT(TIMER3->CCMR2,13);
 8001cf8:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001cfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d02:	61d3      	str	r3, [r2, #28]
        	SET_BIT(TIMER3->CCMR2,14);
 8001d04:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0e:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER3->CCER,CC4E);
 8001d10:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a47      	ldr	r2, [pc, #284]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d1a:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER3->CCMR2,OC4PE);
 8001d1c:	4b45      	ldr	r3, [pc, #276]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4a44      	ldr	r2, [pc, #272]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d26:	61d3      	str	r3, [r2, #28]
            TIMER3->CCR4=Copy_uint32DutyCycle;
 8001d28:	4a42      	ldr	r2, [pc, #264]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
        break;
 8001d2e:	bf00      	nop
         SET_BIT(TIMER3->EGR,UG);
 8001d30:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	4a3f      	ldr	r2, [pc, #252]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6153      	str	r3, [r2, #20]
	    SET_BIT(TIMER3->CR1,CEN);
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a3c      	ldr	r2, [pc, #240]	; (8001e34 <MTIMER_SetPwm_CH_DutyCycle+0x404>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]
        break;
 8001d48:	e0a7      	b.n	8001e9a <MTIMER_SetPwm_CH_DutyCycle+0x46a>
        switch (Copy_uint8TimerChannel)
 8001d4a:	78bb      	ldrb	r3, [r7, #2]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	f200 8097 	bhi.w	8001e80 <MTIMER_SetPwm_CH_DutyCycle+0x450>
 8001d52:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <MTIMER_SetPwm_CH_DutyCycle+0x328>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001d69 	.word	0x08001d69
 8001d5c:	08001dad 	.word	0x08001dad
 8001d60:	08001df1 	.word	0x08001df1
 8001d64:	08001e3d 	.word	0x08001e3d
            CLR_BIT(TIMER4->CCMR1,4);
 8001d68:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d6e:	f023 0310 	bic.w	r3, r3, #16
 8001d72:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER4->CCMR1,5);
 8001d74:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d7a:	f043 0320 	orr.w	r3, r3, #32
 8001d7e:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER4->CCMR1,6);
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d8a:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER4->CCER,CC1E);
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a29      	ldr	r2, [pc, #164]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER4->CCMR1,OC1PE);
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a26      	ldr	r2, [pc, #152]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001d9e:	f043 0308 	orr.w	r3, r3, #8
 8001da2:	6193      	str	r3, [r2, #24]
            TIMER4->CCR1=Copy_uint32DutyCycle;
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8001daa:	e069      	b.n	8001e80 <MTIMER_SetPwm_CH_DutyCycle+0x450>
        	CLR_BIT(TIMER4->CCMR1,12);
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001db6:	6193      	str	r3, [r2, #24]
    		SET_BIT(TIMER4->CCMR1,13);
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a1e      	ldr	r2, [pc, #120]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dc2:	6193      	str	r3, [r2, #24]
        	SET_BIT(TIMER4->CCMR1,14);
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dce:	6193      	str	r3, [r2, #24]
			SET_BIT(TIMER4->CCER,CC2E);
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER4->CCMR1,OC2PE);
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001de2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de6:	6193      	str	r3, [r2, #24]
            TIMER4->CCR2=Copy_uint32DutyCycle;
 8001de8:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6393      	str	r3, [r2, #56]	; 0x38
            break;
 8001dee:	e047      	b.n	8001e80 <MTIMER_SetPwm_CH_DutyCycle+0x450>
        	CLR_BIT(TIMER4->CCMR2,4);
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001df6:	f023 0310 	bic.w	r3, r3, #16
 8001dfa:	61d3      	str	r3, [r2, #28]
    		SET_BIT(TIMER4->CCMR2,5);
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	61d3      	str	r3, [r2, #28]
        	SET_BIT(TIMER4->CCMR2,6);
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e12:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER4->CCER,CC3E);
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1e:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER4->CCMR2,OC3PE);
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	61d3      	str	r3, [r2, #28]
            TIMER4->CCR3=Copy_uint32DutyCycle;
 8001e2c:	4a02      	ldr	r2, [pc, #8]	; (8001e38 <MTIMER_SetPwm_CH_DutyCycle+0x408>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	63d3      	str	r3, [r2, #60]	; 0x3c
            break;
 8001e32:	e025      	b.n	8001e80 <MTIMER_SetPwm_CH_DutyCycle+0x450>
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40000800 	.word	0x40000800
        	CLR_BIT(TIMER4->CCMR2,12);
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e46:	61d3      	str	r3, [r2, #28]
    		SET_BIT(TIMER4->CCMR2,13);
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e52:	61d3      	str	r3, [r2, #28]
        	SET_BIT(TIMER4->CCMR2,14);
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5e:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIMER4->CCER,CC4E);
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e6a:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIMER4->CCMR2,OC4PE);
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e76:	61d3      	str	r3, [r2, #28]
            TIMER4->CCR4=Copy_uint32DutyCycle;
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
        break;
 8001e7e:	bf00      	nop
        SET_BIT(TIMER4->EGR,UG);
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6153      	str	r3, [r2, #20]
	    SET_BIT(TIMER4->CR1,CEN);
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <MTIMER_SetPwm_CH_DutyCycle+0x474>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]
        break;
 8001e98:	bf00      	nop
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	40000800 	.word	0x40000800

08001ea8 <MNVIC_voidEnableInterrupt>:

#include "../Inc/MCAL/NVIC/MNVIC_interface.h"
#include "../Inc/MCAL/NVIC/MNVIC_private.h"
#include "../Inc/MCAL/NVIC/MNVIC_config.h"

void MNVIC_voidEnableInterrupt(uint8 Copy_uint8IntNumber){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
    if(Copy_uint8IntNumber>= 0 && Copy_uint8IntNumber <32){
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b1f      	cmp	r3, #31
 8001eb6:	d805      	bhi.n	8001ec4 <MNVIC_voidEnableInterrupt+0x1c>
        NVIC_ISER0 = (1<<Copy_uint8IntNumber);
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MNVIC_voidEnableInterrupt+0x44>)
 8001ec0:	601a      	str	r2, [r3, #0]
    }
    else if(Copy_uint8IntNumber>=32 && Copy_uint8IntNumber<=59){
        Copy_uint8IntNumber -= 32;
        NVIC_ISER1 = (1<<Copy_uint8IntNumber);
    }
}
 8001ec2:	e00d      	b.n	8001ee0 <MNVIC_voidEnableInterrupt+0x38>
    else if(Copy_uint8IntNumber>=32 && Copy_uint8IntNumber<=59){
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2b1f      	cmp	r3, #31
 8001ec8:	d90a      	bls.n	8001ee0 <MNVIC_voidEnableInterrupt+0x38>
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2b3b      	cmp	r3, #59	; 0x3b
 8001ece:	d807      	bhi.n	8001ee0 <MNVIC_voidEnableInterrupt+0x38>
        Copy_uint8IntNumber -= 32;
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	3b20      	subs	r3, #32
 8001ed4:	71fb      	strb	r3, [r7, #7]
        NVIC_ISER1 = (1<<Copy_uint8IntNumber);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <MNVIC_voidEnableInterrupt+0x48>)
 8001ede:	601a      	str	r2, [r3, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000e104 	.word	0xe000e104

08001ef4 <MRCC_voidEnableClock>:
#include "../Inc/MCAL/RCC/RCC_interface.h"
#include "../Inc/MCAL/RCC/RCC_private.h"
#include "../Inc/MCAL/RCC/RCC_config.h"


void MRCC_voidEnableClock(uint8  copy_uint8BusId,uint32 copy_uint32PeriId ){
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
    if(copy_uint32PeriId<32){
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2b1f      	cmp	r3, #31
 8001f04:	d82a      	bhi.n	8001f5c <MRCC_voidEnableClock+0x68>
        switch(copy_uint8BusId){
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d01c      	beq.n	8001f46 <MRCC_voidEnableClock+0x52>
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	dc25      	bgt.n	8001f5c <MRCC_voidEnableClock+0x68>
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <MRCC_voidEnableClock+0x26>
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d00b      	beq.n	8001f30 <MRCC_voidEnableClock+0x3c>
        }
    }
    else{
        /*return error*/
    }
}
 8001f18:	e020      	b.n	8001f5c <MRCC_voidEnableClock+0x68>
            case RCC_AHB: SET_BIT(RCC_AHBENR,copy_uint32PeriId);     break;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <MRCC_voidEnableClock+0x74>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	fa01 f202 	lsl.w	r2, r1, r2
 8001f26:	4611      	mov	r1, r2
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <MRCC_voidEnableClock+0x74>)
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e015      	b.n	8001f5c <MRCC_voidEnableClock+0x68>
            case RCC_APB1: SET_BIT(RCC_APB1ENR,copy_uint32PeriId);     break;
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MRCC_voidEnableClock+0x78>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <MRCC_voidEnableClock+0x78>)
 8001f40:	430b      	orrs	r3, r1
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e00a      	b.n	8001f5c <MRCC_voidEnableClock+0x68>
            case RCC_APB2: SET_BIT(RCC_APB2ENR,copy_uint32PeriId);     break;
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <MRCC_voidEnableClock+0x7c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f52:	4611      	mov	r1, r2
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <MRCC_voidEnableClock+0x7c>)
 8001f56:	430b      	orrs	r3, r1
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	bf00      	nop
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021014 	.word	0x40021014
 8001f6c:	4002101c 	.word	0x4002101c
 8001f70:	40021018 	.word	0x40021018

08001f74 <MRCC_voidInitClock>:
    }
    else{
        /*return error*/
    }
}
void MRCC_voidInitClock(void){
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
    #if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
    RCC_CR = 0x00010000;     //Enable HSE With Crystal no bybass
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MRCC_voidInitClock+0x38>)
 8001f7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f7e:	601a      	str	r2, [r3, #0]
    #endif 

    #if         SYSTEM_CLOCK_SOURCE == SYSTEM_CLOCK_HSI
                RCC_CFGR |= 0x00000000;
    #elif       SYSTEM_CLOCK_SOURCE == SYSTEM_CLOCK_HSE
                RCC_CFGR |= 0x00000001;
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MRCC_voidInitClock+0x3c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <MRCC_voidInitClock+0x3c>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6013      	str	r3, [r2, #0]
                RCC_CFGR |= 0x00000003;
    #else 
                #error("You chosed wrong SYSTEM INPUT CLOCK")
    #endif
                /*SET APB1 , APB2, AHB PRESCALLERS*/
                RCC_CFGR |= ( RCC_AHB_PRESCALLER<< 4);
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MRCC_voidInitClock+0x3c>)
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <MRCC_voidInitClock+0x3c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6013      	str	r3, [r2, #0]
                RCC_CFGR |= ( RCC_APB1_PRESCALLER<< 8);
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MRCC_voidInitClock+0x3c>)
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <MRCC_voidInitClock+0x3c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6013      	str	r3, [r2, #0]
                RCC_CFGR |= ( RCC_APB2_PRESCALLER<< 11);
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <MRCC_voidInitClock+0x3c>)
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <MRCC_voidInitClock+0x3c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40021004 	.word	0x40021004

08001fb4 <HSERVO_VOIDINIT>:

#include "../Inc/HAL/SERVO/SERVO_interface.h"
#include "../Inc/HAL/SERVO/SERVO_config.h"
#include "../Inc/HAL/SERVO/SERVO_private.h"

void HSERVO_VOIDINIT(void){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

	MRCC_voidInitClock();
 8001fb8:	f7ff ffdc 	bl	8001f74 <MRCC_voidInitClock>

	MRCC_voidEnableClock(RCC_APB1,TIMER_4);
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7ff ff98 	bl	8001ef4 <MRCC_voidEnableClock>

	MTimer_voidInitMode(TIMER_4,PWM);
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	f7ff fc76 	bl	80018b8 <MTimer_voidInitMode>

	MDIO_voidSetDirection(SERVO_PWM_PORT,SERVO_PWM_PIN, AF_10MHZ_PUSH_PULL);
 8001fcc:	2209      	movs	r2, #9
 8001fce:	2106      	movs	r1, #6
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7ff f8a7 	bl	8001124 <MDIO_voidSetDirection>

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HSERVO_VOID_SETANGLE>:
void HSERVO_VOID_SETANGLE(uint16 copy_uint8angle){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
	copy_uint8angle =((copy_uint8angle*1900)/180);
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	f240 726c 	movw	r2, #1900	; 0x76c
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <HSERVO_VOID_SETANGLE+0x40>)
 8001ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff6:	441a      	add	r2, r3
 8001ff8:	11d2      	asrs	r2, r2, #7
 8001ffa:	17db      	asrs	r3, r3, #31
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	80fb      	strh	r3, [r7, #6]
	copy_uint8angle += 500;
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002006:	80fb      	strh	r3, [r7, #6]
	MTIMER_SetPwm_CH_DutyCycle(copy_uint8angle,TIMER_4,CHANNEL_1);
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	2200      	movs	r2, #0
 800200c:	2102      	movs	r1, #2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fd0e 	bl	8001a30 <MTIMER_SetPwm_CH_DutyCycle>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	b60b60b7 	.word	0xb60b60b7

08002020 <SysTick_Handler>:
		/* Enable STk Interrupt */
		SET_BIT(STK->CTRL, 1);

}
void SysTick_Handler (void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
	uint8 Local_u8Temporary;

	if (STk_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <SysTick_Handler+0x30>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <SysTick_Handler+0x12>
	{ /* Stop Interval */
		STK_voidStopInterval();
 800202e:	f000 f815 	bl	800205c <STK_voidStopInterval>
	}

	/* CallBack notification */
	STK_CallBack();
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <SysTick_Handler+0x34>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4798      	blx	r3

	/* Clear Interrupt Flag */
	Local_u8Temporary = GET_BIT(STK->CTRL, 16);
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <SysTick_Handler+0x38>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	71fb      	strb	r3, [r7, #7]
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200000b8 	.word	0x200000b8
 8002054:	200000b4 	.word	0x200000b4
 8002058:	e000e010 	.word	0xe000e010

0800205c <STK_voidStopInterval>:
/*************	 Function OF Stop Interval  **************************/

void STK_voidStopInterval (void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
	/* Disable STk Interrupt */
	CLR_BIT(STK->CTRL, 1);
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <STK_voidStopInterval+0x30>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <STK_voidStopInterval+0x30>)
 8002066:	f023 0302 	bic.w	r3, r3, #2
 800206a:	6013      	str	r3, [r2, #0]

	/* Stop Timer */
	CLR_BIT(STK->CTRL, 0);
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <STK_voidStopInterval+0x30>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <STK_voidStopInterval+0x30>)
 8002072:	f023 0301 	bic.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]
	STK->LOAD = 0 ;
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <STK_voidStopInterval+0x30>)
 800207a:	2200      	movs	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
	STK->VAL = 0;
 800207e:	4b03      	ldr	r3, [pc, #12]	; (800208c <STK_voidStopInterval+0x30>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	e000e010 	.word	0xe000e010

08002090 <MUSART_voidInit>:

#include "../Inc/MCAL/USART/UART_interface.h"
#include "../Inc/MCAL/USART/UART_private.h"
#include "../Inc/MCAL/USART/UART_config.h"

void MUSART_voidInit(uint8 Copy_uint8USARTNo){
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
    switch (Copy_uint8USARTNo)
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d044      	beq.n	800212a <MUSART_voidInit+0x9a>
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	dc61      	bgt.n	8002168 <MUSART_voidInit+0xd8>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <MUSART_voidInit+0x1e>
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d01f      	beq.n	80020ec <MUSART_voidInit+0x5c>
        USART3->BRR |= (USART3_BAUDRATE_MANTISA<<4);
        //enable Transmission
        SET_BIT(USART3->CR1,TE_BIT);
        break;
    }
}
 80020ac:	e05c      	b.n	8002168 <MUSART_voidInit+0xd8>
        SET_BIT(USART1->CR1,UE_BIT);
 80020ae:	4b31      	ldr	r3, [pc, #196]	; (8002174 <MUSART_voidInit+0xe4>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	4a30      	ldr	r2, [pc, #192]	; (8002174 <MUSART_voidInit+0xe4>)
 80020b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020b8:	60d3      	str	r3, [r2, #12]
        CLR_BIT(USART1->CR1,M_BIT);
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <MUSART_voidInit+0xe4>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <MUSART_voidInit+0xe4>)
 80020c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020c4:	60d3      	str	r3, [r2, #12]
        USART1->BRR |= USART1_BAUDRATE_DIV;
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <MUSART_voidInit+0xe4>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4a2a      	ldr	r2, [pc, #168]	; (8002174 <MUSART_voidInit+0xe4>)
 80020cc:	f043 0306 	orr.w	r3, r3, #6
 80020d0:	6093      	str	r3, [r2, #8]
        USART1->BRR |= (USART1_BAUDRATE_MANTISA<<4);
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <MUSART_voidInit+0xe4>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4a27      	ldr	r2, [pc, #156]	; (8002174 <MUSART_voidInit+0xe4>)
 80020d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020dc:	6093      	str	r3, [r2, #8]
        SET_BIT(USART1->CR1,TE_BIT);
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <MUSART_voidInit+0xe4>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a24      	ldr	r2, [pc, #144]	; (8002174 <MUSART_voidInit+0xe4>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	60d3      	str	r3, [r2, #12]
        break;
 80020ea:	e03d      	b.n	8002168 <MUSART_voidInit+0xd8>
        SET_BIT(USART2->CR1,UE_BIT);
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <MUSART_voidInit+0xe8>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a21      	ldr	r2, [pc, #132]	; (8002178 <MUSART_voidInit+0xe8>)
 80020f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020f6:	60d3      	str	r3, [r2, #12]
        CLR_BIT(USART2->CR1,M_BIT);
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <MUSART_voidInit+0xe8>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <MUSART_voidInit+0xe8>)
 80020fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002102:	60d3      	str	r3, [r2, #12]
        USART2->BRR |= USART2_BAUDRATE_DIV;
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <MUSART_voidInit+0xe8>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <MUSART_voidInit+0xe8>)
 800210a:	f043 0306 	orr.w	r3, r3, #6
 800210e:	6093      	str	r3, [r2, #8]
        USART2->BRR |= (USART2_BAUDRATE_MANTISA<<4);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <MUSART_voidInit+0xe8>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <MUSART_voidInit+0xe8>)
 8002116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211a:	6093      	str	r3, [r2, #8]
        SET_BIT(USART2->CR1,TE_BIT);
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <MUSART_voidInit+0xe8>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a15      	ldr	r2, [pc, #84]	; (8002178 <MUSART_voidInit+0xe8>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	60d3      	str	r3, [r2, #12]
        break;
 8002128:	e01e      	b.n	8002168 <MUSART_voidInit+0xd8>
        SET_BIT(USART3->CR1,UE_BIT);
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <MUSART_voidInit+0xec>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	4a13      	ldr	r2, [pc, #76]	; (800217c <MUSART_voidInit+0xec>)
 8002130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002134:	60d3      	str	r3, [r2, #12]
        CLR_BIT(USART3->CR1,M_BIT);
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MUSART_voidInit+0xec>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <MUSART_voidInit+0xec>)
 800213c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002140:	60d3      	str	r3, [r2, #12]
        USART3->BRR |= USART3_BAUDRATE_DIV;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MUSART_voidInit+0xec>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4a0d      	ldr	r2, [pc, #52]	; (800217c <MUSART_voidInit+0xec>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6093      	str	r3, [r2, #8]
        USART3->BRR |= (USART3_BAUDRATE_MANTISA<<4);
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <MUSART_voidInit+0xec>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <MUSART_voidInit+0xec>)
 8002154:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 8002158:	6093      	str	r3, [r2, #8]
        SET_BIT(USART3->CR1,TE_BIT);
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <MUSART_voidInit+0xec>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4a07      	ldr	r2, [pc, #28]	; (800217c <MUSART_voidInit+0xec>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	60d3      	str	r3, [r2, #12]
        break;
 8002166:	bf00      	nop
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40013800 	.word	0x40013800
 8002178:	40004400 	.word	0x40004400
 800217c:	40004800 	.word	0x40004800

08002180 <MUSART_voidSendByte>:
void MUSART_voidSendByte(uint8 Copy_uint8USARTNo,uint8 Copy_uint8Data){
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	460a      	mov	r2, r1
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	4613      	mov	r3, r2
 800218e:	71bb      	strb	r3, [r7, #6]
    switch (Copy_uint8USARTNo)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d01e      	beq.n	80021d4 <MUSART_voidSendByte+0x54>
 8002196:	2b02      	cmp	r3, #2
 8002198:	dc28      	bgt.n	80021ec <MUSART_voidSendByte+0x6c>
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <MUSART_voidSendByte+0x24>
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d00c      	beq.n	80021bc <MUSART_voidSendByte+0x3c>
        while(GET_BIT(USART3->SR,TC_FLAG)==0);
        //LOAD DATA
        USART3->DR=Copy_uint8Data;
        break;
    }
}
 80021a2:	e023      	b.n	80021ec <MUSART_voidSendByte+0x6c>
        while(GET_BIT(USART1->SR,TC_FLAG)==0);
 80021a4:	bf00      	nop
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <MUSART_voidSendByte+0x78>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	099b      	lsrs	r3, r3, #6
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f8      	beq.n	80021a6 <MUSART_voidSendByte+0x26>
        USART1->DR=Copy_uint8Data;
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <MUSART_voidSendByte+0x78>)
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	6053      	str	r3, [r2, #4]
        break;
 80021ba:	e017      	b.n	80021ec <MUSART_voidSendByte+0x6c>
        while(GET_BIT(USART2->SR,TC_FLAG)==0);
 80021bc:	bf00      	nop
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MUSART_voidSendByte+0x7c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f8      	beq.n	80021be <MUSART_voidSendByte+0x3e>
        USART2->DR=Copy_uint8Data;
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <MUSART_voidSendByte+0x7c>)
 80021ce:	79bb      	ldrb	r3, [r7, #6]
 80021d0:	6053      	str	r3, [r2, #4]
        break;
 80021d2:	e00b      	b.n	80021ec <MUSART_voidSendByte+0x6c>
        while(GET_BIT(USART3->SR,TC_FLAG)==0);
 80021d4:	bf00      	nop
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <MUSART_voidSendByte+0x80>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	099b      	lsrs	r3, r3, #6
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f8      	beq.n	80021d6 <MUSART_voidSendByte+0x56>
        USART3->DR=Copy_uint8Data;
 80021e4:	4a06      	ldr	r2, [pc, #24]	; (8002200 <MUSART_voidSendByte+0x80>)
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	6053      	str	r3, [r2, #4]
        break;
 80021ea:	bf00      	nop
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40004400 	.word	0x40004400
 8002200:	40004800 	.word	0x40004800

08002204 <MUSART_voidSendWord>:
    	        CLR_BIT(USART3->CR1,RE_BIT);
        break;
    }
    return Local_data;
}
void MUSART_voidSendWord(uint8 Copy_uint8USARTNo,uint8 *Copyuint8String){
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
	uint8 i = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
	while (Copyuint8String[i] != '\0')
 8002214:	e00b      	b.n	800222e <MUSART_voidSendWord+0x2a>
	{
		MUSART_voidSendByte(Copy_uint8USARTNo,Copyuint8String[i]);
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ffac 	bl	8002180 <MUSART_voidSendByte>
		i++;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	3301      	adds	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
	while (Copyuint8String[i] != '\0')
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ed      	bne.n	8002216 <MUSART_voidSendWord+0x12>
	}
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <MUSART_voidSendInt>:
void MUSART_voidSendInt(uint8 Copy_uint8USARTNo,int Copy_uint8Data){
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
		char Local_str[17];
		sprintf(Local_str,"%d",Copy_uint8Data);
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	4907      	ldr	r1, [pc, #28]	; (8002274 <MUSART_voidSendInt+0x30>)
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f9f3 	bl	8002644 <siprintf>
		MUSART_voidSendWord(Copy_uint8USARTNo,Local_str);
 800225e:	f107 020c 	add.w	r2, r7, #12
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ffcc 	bl	8002204 <MUSART_voidSendWord>
}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	08002f50 	.word	0x08002f50

08002278 <main>:
void BACK_MOTORS_STOP(void);
/**************************************************************
 * ************ * main function* ************************
 **************************************************************/
int main(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	MRCC_voidInitClock();
 800227c:	f7ff fe7a 	bl	8001f74 <MRCC_voidInitClock>

	MRCC_voidEnableClock(RCC_APB1,UASRT3_EN);
 8002280:	2112      	movs	r1, #18
 8002282:	2001      	movs	r0, #1
 8002284:	f7ff fe36 	bl	8001ef4 <MRCC_voidEnableClock>
	MUSART_voidInit(USART_3);
 8002288:	2002      	movs	r0, #2
 800228a:	f7ff ff01 	bl	8002090 <MUSART_voidInit>
	MDIO_INIT(PORTA);
 800228e:	2000      	movs	r0, #0
 8002290:	f7fe ff36 	bl	8001100 <MDIO_INIT>
	MDIO_INIT(PORTB);
 8002294:	2001      	movs	r0, #1
 8002296:	f7fe ff33 	bl	8001100 <MDIO_INIT>
	MEXTI_voidInit(MOTOR_ENCODER_PIN,RISING_ENGE);
 800229a:	2100      	movs	r1, #0
 800229c:	2000      	movs	r0, #0
 800229e:	f7ff f8ed 	bl	800147c <MEXTI_voidInit>
	MEXTI_voidSetCallback(0,Encoder_INT_POSITION);
 80022a2:	493d      	ldr	r1, [pc, #244]	; (8002398 <main+0x120>)
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff f9e7 	bl	8001678 <MEXTI_voidSetCallback>


	MDIO_voidSetDirection(PORTA,MOTOR_ENCODER_PIN, INPUT_FLOATING);
 80022aa:	2204      	movs	r2, #4
 80022ac:	2100      	movs	r1, #0
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7fe ff38 	bl	8001124 <MDIO_voidSetDirection>
	//INPUT_PULL_DOWN

	MDIO_voidSetDirection(PORTB ,TX_PIN ,AF_2MHZ_PUSH_PULL);
 80022b4:	220a      	movs	r2, #10
 80022b6:	210a      	movs	r1, #10
 80022b8:	2001      	movs	r0, #1
 80022ba:	f7fe ff33 	bl	8001124 <MDIO_voidSetDirection>
	MDIO_voidSetDirection(PORTB ,RX_PIN ,INPUT_FLOATING);
 80022be:	2204      	movs	r2, #4
 80022c0:	210b      	movs	r1, #11
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7fe ff2e 	bl	8001124 <MDIO_voidSetDirection>
	MDIO_voidSetDirection(PORTB,0, OUTPUT_10MHZ_PUSH_PULL);
 80022c8:	2201      	movs	r2, #1
 80022ca:	2100      	movs	r1, #0
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7fe ff29 	bl	8001124 <MDIO_voidSetDirection>
	MDIO_voidWrite_D_pin(PORTB,0,HIGH);
 80022d2:	2201      	movs	r2, #1
 80022d4:	2100      	movs	r1, #0
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff f856 	bl	8001388 <MDIO_voidWrite_D_pin>

	/************************
	 * can initiation
	 * /* CAN init */
	CAN_voidInit();
 80022dc:	f7fe fcfc 	bl	8000cd8 <CAN_voidInit>
	/* CAN Filter set */
	CAN_FilterConfig();
 80022e0:	f000 f88f 	bl	8002402 <CAN_FilterConfig>
	//CAN_Interrupt();
	/* CAN Start */
	CAN_voidStart();
 80022e4:	f7fe fd60 	bl	8000da8 <CAN_voidStart>

	MUSART_voidSendWord(USART_3,"node start\n");
 80022e8:	492c      	ldr	r1, [pc, #176]	; (800239c <main+0x124>)
 80022ea:	2002      	movs	r0, #2
 80022ec:	f7ff ff8a 	bl	8002204 <MUSART_voidSendWord>

	//MEXTI_voidInit(PA6,RISING_ENGE);
	HBKMOTORS_voidinit(MOTOR_LEFT);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7fe fc21 	bl	8000b38 <HBKMOTORS_voidinit>
	//STK_voidStartMicros();

	//MEXTI_voidEnable(MOTOR_ENCODER_PIN);
	//move_distance(0.20420352248,RIGHT,255);
	//HBKMOTORS_voidRUN(MOTOR_LEFT,RIGHT);
	BACK_MOTORS_INIT();
 80022f6:	f000 f8e3 	bl	80024c0 <BACK_MOTORS_INIT>
	HSERVO_VOIDINIT();
 80022fa:	f7ff fe5b 	bl	8001fb4 <HSERVO_VOIDINIT>
	//BACK_MOTORS_MOVE(125,125,FORWARD, FORWARD);
	for(;;){
		CAN_RX();
 80022fe:	f000 f857 	bl	80023b0 <CAN_RX>
		MUSART_voidSendWord(USART_3,"CAN FINISH\n");
 8002302:	4927      	ldr	r1, [pc, #156]	; (80023a0 <main+0x128>)
 8002304:	2002      	movs	r0, #2
 8002306:	f7ff ff7d 	bl	8002204 <MUSART_voidSendWord>
		if(GLOBAL_CAN_data_RX[0]=='A'){
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <main+0x12c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b41      	cmp	r3, #65	; 0x41
 8002310:	d1f5      	bne.n	80022fe <main+0x86>
			HSERVO_VOID_SETANGLE(GLOBAL_Servo_angles_LOOKUP_T[GLOBAL_CAN_data_RX[1]]);
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <main+0x12c>)
 8002314:	785b      	ldrb	r3, [r3, #1]
 8002316:	461a      	mov	r2, r3
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <main+0x130>)
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b29b      	uxth	r3, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fe5c 	bl	8001fdc <HSERVO_VOID_SETANGLE>
			BACK_MOTORS_MOVE(GLOBAL_CAN_data_RX[2],GLOBAL_CAN_data_RX[2],GLOBAL_CAN_data_RX[4],GLOBAL_CAN_data_RX[4]);
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <main+0x12c>)
 8002326:	7898      	ldrb	r0, [r3, #2]
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <main+0x12c>)
 800232a:	7899      	ldrb	r1, [r3, #2]
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <main+0x12c>)
 800232e:	791a      	ldrb	r2, [r3, #4]
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <main+0x12c>)
 8002332:	791b      	ldrb	r3, [r3, #4]
 8002334:	f000 f8d4 	bl	80024e0 <BACK_MOTORS_MOVE>
			MUSART_voidSendWord(USART_3,"CAN RECEIVE A \n");
 8002338:	491c      	ldr	r1, [pc, #112]	; (80023ac <main+0x134>)
 800233a:	2002      	movs	r0, #2
 800233c:	f7ff ff62 	bl	8002204 <MUSART_voidSendWord>
			MUSART_voidSendByte(USART_3,GLOBAL_CAN_data_RX[0]);
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <main+0x12c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	2002      	movs	r0, #2
 8002348:	f7ff ff1a 	bl	8002180 <MUSART_voidSendByte>
			MUSART_voidSendByte(USART_3,'-');
 800234c:	212d      	movs	r1, #45	; 0x2d
 800234e:	2002      	movs	r0, #2
 8002350:	f7ff ff16 	bl	8002180 <MUSART_voidSendByte>
			MUSART_voidSendInt(USART_3,GLOBAL_Servo_angles_LOOKUP_T[GLOBAL_CAN_data_RX[1]]);
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <main+0x12c>)
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	461a      	mov	r2, r3
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <main+0x130>)
 800235c:	5c9b      	ldrb	r3, [r3, r2]
 800235e:	4619      	mov	r1, r3
 8002360:	2002      	movs	r0, #2
 8002362:	f7ff ff6f 	bl	8002244 <MUSART_voidSendInt>
			MUSART_voidSendByte(USART_3,'-');
 8002366:	212d      	movs	r1, #45	; 0x2d
 8002368:	2002      	movs	r0, #2
 800236a:	f7ff ff09 	bl	8002180 <MUSART_voidSendByte>
			MUSART_voidSendInt(USART_3,GLOBAL_CAN_data_RX[4]);
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <main+0x12c>)
 8002370:	791b      	ldrb	r3, [r3, #4]
 8002372:	4619      	mov	r1, r3
 8002374:	2002      	movs	r0, #2
 8002376:	f7ff ff65 	bl	8002244 <MUSART_voidSendInt>
			MUSART_voidSendByte(USART_3,'-');
 800237a:	212d      	movs	r1, #45	; 0x2d
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff feff 	bl	8002180 <MUSART_voidSendByte>
			MUSART_voidSendInt(USART_3,GLOBAL_CAN_data_RX[2]);
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <main+0x12c>)
 8002384:	789b      	ldrb	r3, [r3, #2]
 8002386:	4619      	mov	r1, r3
 8002388:	2002      	movs	r0, #2
 800238a:	f7ff ff5b 	bl	8002244 <MUSART_voidSendInt>
			MUSART_voidSendByte(USART_3,'\n');
 800238e:	210a      	movs	r1, #10
 8002390:	2002      	movs	r0, #2
 8002392:	f7ff fef5 	bl	8002180 <MUSART_voidSendByte>
		CAN_RX();
 8002396:	e7b2      	b.n	80022fe <main+0x86>
 8002398:	08002449 	.word	0x08002449
 800239c:	08002f54 	.word	0x08002f54
 80023a0:	08002f60 	.word	0x08002f60
 80023a4:	200000d4 	.word	0x200000d4
 80023a8:	20000000 	.word	0x20000000
 80023ac:	08002f6c 	.word	0x08002f6c

080023b0 <CAN_RX>:

	CAN_voidAddTxMsg(&tx_header,DATA);
	CAN_voidAddTxMsg(&tx_header1,DATA1);
}
void CAN_RX(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
	MUSART_voidSendWord(USART_3, "/////////////");
 80023b6:	490a      	ldr	r1, [pc, #40]	; (80023e0 <CAN_RX+0x30>)
 80023b8:	2002      	movs	r0, #2
 80023ba:	f7ff ff23 	bl	8002204 <MUSART_voidSendWord>
	CAN_RxHeaderTypeDef Rx_header;
	while(CAN_voidRXPending(CAN_RX_FIFO0) == 0);
 80023be:	bf00      	nop
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fdb1 	bl	8000f28 <CAN_voidRXPending>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f9      	beq.n	80023c0 <CAN_RX+0x10>
	//MUSART_voidSendInt(USART_3,Rx_header.StdId);

	CAN_voidGetRxMsg(CAN_RX_FIFO0,&Rx_header,GLOBAL_CAN_data_RX);
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <CAN_RX+0x34>)
 80023d0:	4619      	mov	r1, r3
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe fcfe 	bl	8000dd4 <CAN_voidGetRxMsg>
	MUSART_voidSendInt(USART_3,GLOBAL_CAN_data_RX[2]);
	MUSART_voidSendByte(USART_3,'\n');
*/
	//MUSART_voidSendWord(USART_3, GLOBAL_CAN_data_RX);
	//MUSART_voidSendWord(USART_3, "\n");
}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	08002f84 	.word	0x08002f84
 80023e4:	200000d4 	.word	0x200000d4

080023e8 <Std_id_High>:
uint16 Std_id_High(uint16 local_u16Std_Id)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
	return (local_u16Std_Id << 5);
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	015b      	lsls	r3, r3, #5
 80023f6:	b29b      	uxth	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <CAN_FilterConfig>:
void CAN_FilterConfig(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b08a      	sub	sp, #40	; 0x28
 8002406:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterInit;
	CAN_FilterInit.FilterActivation = ENABLE;
 8002408:	2301      	movs	r3, #1
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterInit.FilterBank = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
	CAN_FilterInit.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
	CAN_FilterInit.FilterIdHigh = Std_id_High(0x65d);
 8002414:	f240 605d 	movw	r0, #1629	; 0x65d
 8002418:	f7ff ffe6 	bl	80023e8 <Std_id_High>
 800241c:	4603      	mov	r3, r0
 800241e:	607b      	str	r3, [r7, #4]
	CAN_FilterInit.FilterIdLow = 0x0000;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
	CAN_FilterInit.FilterMaskIdHigh = 0x0000;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
	CAN_FilterInit.FilterMaskIdLow = 0x0000;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
	CAN_FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
	CAN_FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8002430:	2301      	movs	r3, #1
 8002432:	623b      	str	r3, [r7, #32]

	CAN_voidConfigFilter(&CAN_FilterInit);
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fd92 	bl	8000f60 <CAN_voidConfigFilter>
}
 800243c:	bf00      	nop
 800243e:	3728      	adds	r7, #40	; 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	0000      	movs	r0, r0
	...

08002448 <Encoder_INT_POSITION>:
	HBMOTORS_voidSetSpeed(MOTOR_LEFT,copy_uint8speed);
	HBKMOTORS_voidRUN(MOTOR_LEFT,copy_uint8Direction);

}

void Encoder_INT_POSITION(void){
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	if(counter_pulses >= 458){
		HBKMOTORS_voidSTOP(MOTOR_LEFT);
		MUSART_voidSendInt(USART_3,counter_pulses);
	}*/

	if(Distance>=desired_distance){
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <Encoder_INT_POSITION+0x68>)
 800244e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <Encoder_INT_POSITION+0x6c>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe facc 	bl	80009f4 <__aeabi_dcmpge>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <Encoder_INT_POSITION+0x28>
		HBKMOTORS_voidSTOP(MOTOR_LEFT);
 8002462:	2001      	movs	r0, #1
 8002464:	f7fe fbf3 	bl	8000c4e <HBKMOTORS_voidSTOP>
		move_flag =0;
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <Encoder_INT_POSITION+0x70>)
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
	Distance = (long double)DIS_TOTAL_PULSES * 0.00044585922;
	//MUSART_voidSendByte(USART_3,'H');
	//MUSART_voidSendByte(USART_3,'\n');
	}

}
 800246e:	e016      	b.n	800249e <Encoder_INT_POSITION+0x56>
	move_flag =1;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <Encoder_INT_POSITION+0x70>)
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
	DIS_TOTAL_PULSES++;
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <Encoder_INT_POSITION+0x74>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3301      	adds	r3, #1
 800247c:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <Encoder_INT_POSITION+0x74>)
 800247e:	6013      	str	r3, [r2, #0]
	Distance = (long double)DIS_TOTAL_PULSES * 0.00044585922;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <Encoder_INT_POSITION+0x74>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd ffb5 	bl	80003f4 <__aeabi_ui2d>
 800248a:	a307      	add	r3, pc, #28	; (adr r3, 80024a8 <Encoder_INT_POSITION+0x60>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fe f82a 	bl	80004e8 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4905      	ldr	r1, [pc, #20]	; (80024b0 <Encoder_INT_POSITION+0x68>)
 800249a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	f3af 8000 	nop.w
 80024a8:	c4bdbb33 	.word	0xc4bdbb33
 80024ac:	3f3d3846 	.word	0x3f3d3846
 80024b0:	200000c8 	.word	0x200000c8
 80024b4:	200000c0 	.word	0x200000c0
 80024b8:	200000d0 	.word	0x200000d0
 80024bc:	200000bc 	.word	0x200000bc

080024c0 <BACK_MOTORS_INIT>:
void Encoder_INT_SPEED(void){

}


void BACK_MOTORS_INIT(void){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	MDIO_INIT(PORTA);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fe1b 	bl	8001100 <MDIO_INIT>
	MDIO_INIT(PORTB);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fe fe18 	bl	8001100 <MDIO_INIT>
	HBKMOTORS_voidinit(MOTOR_RIGHT);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fb31 	bl	8000b38 <HBKMOTORS_voidinit>
	HBKMOTORS_voidinit(MOTOR_LEFT);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7fe fb2e 	bl	8000b38 <HBKMOTORS_voidinit>
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <BACK_MOTORS_MOVE>:
void BACK_MOTORS_MOVE(uint8 copy_uint8_M_R_speed,uint8 copy_uint8_M_L_speed,uint8 copy_uint8_M_R_DIR, uint8 copy_uint8_M_L_DIR){
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4604      	mov	r4, r0
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4623      	mov	r3, r4
 80024f0:	71fb      	strb	r3, [r7, #7]
 80024f2:	4603      	mov	r3, r0
 80024f4:	71bb      	strb	r3, [r7, #6]
 80024f6:	460b      	mov	r3, r1
 80024f8:	717b      	strb	r3, [r7, #5]
 80024fa:	4613      	mov	r3, r2
 80024fc:	713b      	strb	r3, [r7, #4]
	HBKMOTORS_voidRUN(MOTOR_RIGHT,copy_uint8_M_R_DIR);
 80024fe:	797b      	ldrb	r3, [r7, #5]
 8002500:	4619      	mov	r1, r3
 8002502:	2000      	movs	r0, #0
 8002504:	f7fe fb57 	bl	8000bb6 <HBKMOTORS_voidRUN>
	HBKMOTORS_voidRUN(MOTOR_LEFT,copy_uint8_M_L_DIR);
 8002508:	793b      	ldrb	r3, [r7, #4]
 800250a:	4619      	mov	r1, r3
 800250c:	2001      	movs	r0, #1
 800250e:	f7fe fb52 	bl	8000bb6 <HBKMOTORS_voidRUN>
	HBMOTORS_voidSetSpeed(MOTOR_RIGHT,copy_uint8_M_R_speed);
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4619      	mov	r1, r3
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fbbe 	bl	8000c98 <HBMOTORS_voidSetSpeed>
	HBMOTORS_voidSetSpeed(MOTOR_LEFT,copy_uint8_M_L_speed);
 800251c:	79bb      	ldrb	r3, [r7, #6]
 800251e:	4619      	mov	r1, r3
 8002520:	2001      	movs	r0, #1
 8002522:	f7fe fbb9 	bl	8000c98 <HBMOTORS_voidSetSpeed>
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bd90      	pop	{r4, r7, pc}
	...

08002530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <_sbrk+0x5c>)
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <_sbrk+0x60>)
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <_sbrk+0x64>)
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <_sbrk+0x68>)
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002560:	f000 f846 	bl	80025f0 <__errno>
 8002564:	4603      	mov	r3, r0
 8002566:	220c      	movs	r2, #12
 8002568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	e009      	b.n	8002584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <_sbrk+0x64>)
 8002580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20005000 	.word	0x20005000
 8002590:	00000400 	.word	0x00000400
 8002594:	200000dc 	.word	0x200000dc
 8002598:	200000f0 	.word	0x200000f0

0800259c <Reset_Handler>:
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <LoopForever+0x2>)
 800259e:	4685      	mov	sp, r0
 80025a0:	f3af 8000 	nop.w
 80025a4:	480c      	ldr	r0, [pc, #48]	; (80025d8 <LoopForever+0x6>)
 80025a6:	490d      	ldr	r1, [pc, #52]	; (80025dc <LoopForever+0xa>)
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <LoopForever+0xe>)
 80025aa:	2300      	movs	r3, #0
 80025ac:	e002      	b.n	80025b4 <LoopCopyDataInit>

080025ae <CopyDataInit>:
 80025ae:	58d4      	ldr	r4, [r2, r3]
 80025b0:	50c4      	str	r4, [r0, r3]
 80025b2:	3304      	adds	r3, #4

080025b4 <LoopCopyDataInit>:
 80025b4:	18c4      	adds	r4, r0, r3
 80025b6:	428c      	cmp	r4, r1
 80025b8:	d3f9      	bcc.n	80025ae <CopyDataInit>
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <LoopForever+0x12>)
 80025bc:	4c0a      	ldr	r4, [pc, #40]	; (80025e8 <LoopForever+0x16>)
 80025be:	2300      	movs	r3, #0
 80025c0:	e001      	b.n	80025c6 <LoopFillZerobss>

080025c2 <FillZerobss>:
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	3204      	adds	r2, #4

080025c6 <LoopFillZerobss>:
 80025c6:	42a2      	cmp	r2, r4
 80025c8:	d3fb      	bcc.n	80025c2 <FillZerobss>
 80025ca:	f000 f817 	bl	80025fc <__libc_init_array>
 80025ce:	f7ff fe53 	bl	8002278 <main>

080025d2 <LoopForever>:
 80025d2:	e7fe      	b.n	80025d2 <LoopForever>
 80025d4:	20005000 	.word	0x20005000
 80025d8:	20000000 	.word	0x20000000
 80025dc:	2000006c 	.word	0x2000006c
 80025e0:	08003004 	.word	0x08003004
 80025e4:	20000070 	.word	0x20000070
 80025e8:	200000f0 	.word	0x200000f0

080025ec <ADC1_2_IRQHandler>:
 80025ec:	e7fe      	b.n	80025ec <ADC1_2_IRQHandler>
	...

080025f0 <__errno>:
 80025f0:	4b01      	ldr	r3, [pc, #4]	; (80025f8 <__errno+0x8>)
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000008 	.word	0x20000008

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	2600      	movs	r6, #0
 8002600:	4d0c      	ldr	r5, [pc, #48]	; (8002634 <__libc_init_array+0x38>)
 8002602:	4c0d      	ldr	r4, [pc, #52]	; (8002638 <__libc_init_array+0x3c>)
 8002604:	1b64      	subs	r4, r4, r5
 8002606:	10a4      	asrs	r4, r4, #2
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	f000 fc94 	bl	8002f38 <_init>
 8002610:	2600      	movs	r6, #0
 8002612:	4d0a      	ldr	r5, [pc, #40]	; (800263c <__libc_init_array+0x40>)
 8002614:	4c0a      	ldr	r4, [pc, #40]	; (8002640 <__libc_init_array+0x44>)
 8002616:	1b64      	subs	r4, r4, r5
 8002618:	10a4      	asrs	r4, r4, #2
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	08002ffc 	.word	0x08002ffc
 8002638:	08002ffc 	.word	0x08002ffc
 800263c:	08002ffc 	.word	0x08002ffc
 8002640:	08003000 	.word	0x08003000

08002644 <siprintf>:
 8002644:	b40e      	push	{r1, r2, r3}
 8002646:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800264a:	b500      	push	{lr}
 800264c:	b09c      	sub	sp, #112	; 0x70
 800264e:	ab1d      	add	r3, sp, #116	; 0x74
 8002650:	9002      	str	r0, [sp, #8]
 8002652:	9006      	str	r0, [sp, #24]
 8002654:	9107      	str	r1, [sp, #28]
 8002656:	9104      	str	r1, [sp, #16]
 8002658:	4808      	ldr	r0, [pc, #32]	; (800267c <siprintf+0x38>)
 800265a:	4909      	ldr	r1, [pc, #36]	; (8002680 <siprintf+0x3c>)
 800265c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002660:	9105      	str	r1, [sp, #20]
 8002662:	6800      	ldr	r0, [r0, #0]
 8002664:	a902      	add	r1, sp, #8
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	f000 f868 	bl	800273c <_svfiprintf_r>
 800266c:	2200      	movs	r2, #0
 800266e:	9b02      	ldr	r3, [sp, #8]
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	b01c      	add	sp, #112	; 0x70
 8002674:	f85d eb04 	ldr.w	lr, [sp], #4
 8002678:	b003      	add	sp, #12
 800267a:	4770      	bx	lr
 800267c:	20000008 	.word	0x20000008
 8002680:	ffff0208 	.word	0xffff0208

08002684 <__ssputs_r>:
 8002684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002688:	688e      	ldr	r6, [r1, #8]
 800268a:	4682      	mov	sl, r0
 800268c:	429e      	cmp	r6, r3
 800268e:	460c      	mov	r4, r1
 8002690:	4690      	mov	r8, r2
 8002692:	461f      	mov	r7, r3
 8002694:	d838      	bhi.n	8002708 <__ssputs_r+0x84>
 8002696:	898a      	ldrh	r2, [r1, #12]
 8002698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800269c:	d032      	beq.n	8002704 <__ssputs_r+0x80>
 800269e:	6825      	ldr	r5, [r4, #0]
 80026a0:	6909      	ldr	r1, [r1, #16]
 80026a2:	3301      	adds	r3, #1
 80026a4:	eba5 0901 	sub.w	r9, r5, r1
 80026a8:	6965      	ldr	r5, [r4, #20]
 80026aa:	444b      	add	r3, r9
 80026ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80026b4:	106d      	asrs	r5, r5, #1
 80026b6:	429d      	cmp	r5, r3
 80026b8:	bf38      	it	cc
 80026ba:	461d      	movcc	r5, r3
 80026bc:	0553      	lsls	r3, r2, #21
 80026be:	d531      	bpl.n	8002724 <__ssputs_r+0xa0>
 80026c0:	4629      	mov	r1, r5
 80026c2:	f000 fb6f 	bl	8002da4 <_malloc_r>
 80026c6:	4606      	mov	r6, r0
 80026c8:	b950      	cbnz	r0, 80026e0 <__ssputs_r+0x5c>
 80026ca:	230c      	movs	r3, #12
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f8ca 3000 	str.w	r3, [sl]
 80026d4:	89a3      	ldrh	r3, [r4, #12]
 80026d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026da:	81a3      	strh	r3, [r4, #12]
 80026dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026e0:	464a      	mov	r2, r9
 80026e2:	6921      	ldr	r1, [r4, #16]
 80026e4:	f000 face 	bl	8002c84 <memcpy>
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80026ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f2:	81a3      	strh	r3, [r4, #12]
 80026f4:	6126      	str	r6, [r4, #16]
 80026f6:	444e      	add	r6, r9
 80026f8:	6026      	str	r6, [r4, #0]
 80026fa:	463e      	mov	r6, r7
 80026fc:	6165      	str	r5, [r4, #20]
 80026fe:	eba5 0509 	sub.w	r5, r5, r9
 8002702:	60a5      	str	r5, [r4, #8]
 8002704:	42be      	cmp	r6, r7
 8002706:	d900      	bls.n	800270a <__ssputs_r+0x86>
 8002708:	463e      	mov	r6, r7
 800270a:	4632      	mov	r2, r6
 800270c:	4641      	mov	r1, r8
 800270e:	6820      	ldr	r0, [r4, #0]
 8002710:	f000 fac6 	bl	8002ca0 <memmove>
 8002714:	68a3      	ldr	r3, [r4, #8]
 8002716:	2000      	movs	r0, #0
 8002718:	1b9b      	subs	r3, r3, r6
 800271a:	60a3      	str	r3, [r4, #8]
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	4433      	add	r3, r6
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	e7db      	b.n	80026dc <__ssputs_r+0x58>
 8002724:	462a      	mov	r2, r5
 8002726:	f000 fbb1 	bl	8002e8c <_realloc_r>
 800272a:	4606      	mov	r6, r0
 800272c:	2800      	cmp	r0, #0
 800272e:	d1e1      	bne.n	80026f4 <__ssputs_r+0x70>
 8002730:	4650      	mov	r0, sl
 8002732:	6921      	ldr	r1, [r4, #16]
 8002734:	f000 face 	bl	8002cd4 <_free_r>
 8002738:	e7c7      	b.n	80026ca <__ssputs_r+0x46>
	...

0800273c <_svfiprintf_r>:
 800273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002740:	4698      	mov	r8, r3
 8002742:	898b      	ldrh	r3, [r1, #12]
 8002744:	4607      	mov	r7, r0
 8002746:	061b      	lsls	r3, r3, #24
 8002748:	460d      	mov	r5, r1
 800274a:	4614      	mov	r4, r2
 800274c:	b09d      	sub	sp, #116	; 0x74
 800274e:	d50e      	bpl.n	800276e <_svfiprintf_r+0x32>
 8002750:	690b      	ldr	r3, [r1, #16]
 8002752:	b963      	cbnz	r3, 800276e <_svfiprintf_r+0x32>
 8002754:	2140      	movs	r1, #64	; 0x40
 8002756:	f000 fb25 	bl	8002da4 <_malloc_r>
 800275a:	6028      	str	r0, [r5, #0]
 800275c:	6128      	str	r0, [r5, #16]
 800275e:	b920      	cbnz	r0, 800276a <_svfiprintf_r+0x2e>
 8002760:	230c      	movs	r3, #12
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	e0d1      	b.n	800290e <_svfiprintf_r+0x1d2>
 800276a:	2340      	movs	r3, #64	; 0x40
 800276c:	616b      	str	r3, [r5, #20]
 800276e:	2300      	movs	r3, #0
 8002770:	9309      	str	r3, [sp, #36]	; 0x24
 8002772:	2320      	movs	r3, #32
 8002774:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002778:	2330      	movs	r3, #48	; 0x30
 800277a:	f04f 0901 	mov.w	r9, #1
 800277e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002782:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002928 <_svfiprintf_r+0x1ec>
 8002786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800278a:	4623      	mov	r3, r4
 800278c:	469a      	mov	sl, r3
 800278e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002792:	b10a      	cbz	r2, 8002798 <_svfiprintf_r+0x5c>
 8002794:	2a25      	cmp	r2, #37	; 0x25
 8002796:	d1f9      	bne.n	800278c <_svfiprintf_r+0x50>
 8002798:	ebba 0b04 	subs.w	fp, sl, r4
 800279c:	d00b      	beq.n	80027b6 <_svfiprintf_r+0x7a>
 800279e:	465b      	mov	r3, fp
 80027a0:	4622      	mov	r2, r4
 80027a2:	4629      	mov	r1, r5
 80027a4:	4638      	mov	r0, r7
 80027a6:	f7ff ff6d 	bl	8002684 <__ssputs_r>
 80027aa:	3001      	adds	r0, #1
 80027ac:	f000 80aa 	beq.w	8002904 <_svfiprintf_r+0x1c8>
 80027b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027b2:	445a      	add	r2, fp
 80027b4:	9209      	str	r2, [sp, #36]	; 0x24
 80027b6:	f89a 3000 	ldrb.w	r3, [sl]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80a2 	beq.w	8002904 <_svfiprintf_r+0x1c8>
 80027c0:	2300      	movs	r3, #0
 80027c2:	f04f 32ff 	mov.w	r2, #4294967295
 80027c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027ca:	f10a 0a01 	add.w	sl, sl, #1
 80027ce:	9304      	str	r3, [sp, #16]
 80027d0:	9307      	str	r3, [sp, #28]
 80027d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027d6:	931a      	str	r3, [sp, #104]	; 0x68
 80027d8:	4654      	mov	r4, sl
 80027da:	2205      	movs	r2, #5
 80027dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027e0:	4851      	ldr	r0, [pc, #324]	; (8002928 <_svfiprintf_r+0x1ec>)
 80027e2:	f000 fa41 	bl	8002c68 <memchr>
 80027e6:	9a04      	ldr	r2, [sp, #16]
 80027e8:	b9d8      	cbnz	r0, 8002822 <_svfiprintf_r+0xe6>
 80027ea:	06d0      	lsls	r0, r2, #27
 80027ec:	bf44      	itt	mi
 80027ee:	2320      	movmi	r3, #32
 80027f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027f4:	0711      	lsls	r1, r2, #28
 80027f6:	bf44      	itt	mi
 80027f8:	232b      	movmi	r3, #43	; 0x2b
 80027fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002802:	2b2a      	cmp	r3, #42	; 0x2a
 8002804:	d015      	beq.n	8002832 <_svfiprintf_r+0xf6>
 8002806:	4654      	mov	r4, sl
 8002808:	2000      	movs	r0, #0
 800280a:	f04f 0c0a 	mov.w	ip, #10
 800280e:	9a07      	ldr	r2, [sp, #28]
 8002810:	4621      	mov	r1, r4
 8002812:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002816:	3b30      	subs	r3, #48	; 0x30
 8002818:	2b09      	cmp	r3, #9
 800281a:	d94e      	bls.n	80028ba <_svfiprintf_r+0x17e>
 800281c:	b1b0      	cbz	r0, 800284c <_svfiprintf_r+0x110>
 800281e:	9207      	str	r2, [sp, #28]
 8002820:	e014      	b.n	800284c <_svfiprintf_r+0x110>
 8002822:	eba0 0308 	sub.w	r3, r0, r8
 8002826:	fa09 f303 	lsl.w	r3, r9, r3
 800282a:	4313      	orrs	r3, r2
 800282c:	46a2      	mov	sl, r4
 800282e:	9304      	str	r3, [sp, #16]
 8002830:	e7d2      	b.n	80027d8 <_svfiprintf_r+0x9c>
 8002832:	9b03      	ldr	r3, [sp, #12]
 8002834:	1d19      	adds	r1, r3, #4
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	9103      	str	r1, [sp, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	bfbb      	ittet	lt
 800283e:	425b      	neglt	r3, r3
 8002840:	f042 0202 	orrlt.w	r2, r2, #2
 8002844:	9307      	strge	r3, [sp, #28]
 8002846:	9307      	strlt	r3, [sp, #28]
 8002848:	bfb8      	it	lt
 800284a:	9204      	strlt	r2, [sp, #16]
 800284c:	7823      	ldrb	r3, [r4, #0]
 800284e:	2b2e      	cmp	r3, #46	; 0x2e
 8002850:	d10c      	bne.n	800286c <_svfiprintf_r+0x130>
 8002852:	7863      	ldrb	r3, [r4, #1]
 8002854:	2b2a      	cmp	r3, #42	; 0x2a
 8002856:	d135      	bne.n	80028c4 <_svfiprintf_r+0x188>
 8002858:	9b03      	ldr	r3, [sp, #12]
 800285a:	3402      	adds	r4, #2
 800285c:	1d1a      	adds	r2, r3, #4
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	9203      	str	r2, [sp, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	bfb8      	it	lt
 8002866:	f04f 33ff 	movlt.w	r3, #4294967295
 800286a:	9305      	str	r3, [sp, #20]
 800286c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800292c <_svfiprintf_r+0x1f0>
 8002870:	2203      	movs	r2, #3
 8002872:	4650      	mov	r0, sl
 8002874:	7821      	ldrb	r1, [r4, #0]
 8002876:	f000 f9f7 	bl	8002c68 <memchr>
 800287a:	b140      	cbz	r0, 800288e <_svfiprintf_r+0x152>
 800287c:	2340      	movs	r3, #64	; 0x40
 800287e:	eba0 000a 	sub.w	r0, r0, sl
 8002882:	fa03 f000 	lsl.w	r0, r3, r0
 8002886:	9b04      	ldr	r3, [sp, #16]
 8002888:	3401      	adds	r4, #1
 800288a:	4303      	orrs	r3, r0
 800288c:	9304      	str	r3, [sp, #16]
 800288e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002892:	2206      	movs	r2, #6
 8002894:	4826      	ldr	r0, [pc, #152]	; (8002930 <_svfiprintf_r+0x1f4>)
 8002896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800289a:	f000 f9e5 	bl	8002c68 <memchr>
 800289e:	2800      	cmp	r0, #0
 80028a0:	d038      	beq.n	8002914 <_svfiprintf_r+0x1d8>
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <_svfiprintf_r+0x1f8>)
 80028a4:	bb1b      	cbnz	r3, 80028ee <_svfiprintf_r+0x1b2>
 80028a6:	9b03      	ldr	r3, [sp, #12]
 80028a8:	3307      	adds	r3, #7
 80028aa:	f023 0307 	bic.w	r3, r3, #7
 80028ae:	3308      	adds	r3, #8
 80028b0:	9303      	str	r3, [sp, #12]
 80028b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028b4:	4433      	add	r3, r6
 80028b6:	9309      	str	r3, [sp, #36]	; 0x24
 80028b8:	e767      	b.n	800278a <_svfiprintf_r+0x4e>
 80028ba:	460c      	mov	r4, r1
 80028bc:	2001      	movs	r0, #1
 80028be:	fb0c 3202 	mla	r2, ip, r2, r3
 80028c2:	e7a5      	b.n	8002810 <_svfiprintf_r+0xd4>
 80028c4:	2300      	movs	r3, #0
 80028c6:	f04f 0c0a 	mov.w	ip, #10
 80028ca:	4619      	mov	r1, r3
 80028cc:	3401      	adds	r4, #1
 80028ce:	9305      	str	r3, [sp, #20]
 80028d0:	4620      	mov	r0, r4
 80028d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028d6:	3a30      	subs	r2, #48	; 0x30
 80028d8:	2a09      	cmp	r2, #9
 80028da:	d903      	bls.n	80028e4 <_svfiprintf_r+0x1a8>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0c5      	beq.n	800286c <_svfiprintf_r+0x130>
 80028e0:	9105      	str	r1, [sp, #20]
 80028e2:	e7c3      	b.n	800286c <_svfiprintf_r+0x130>
 80028e4:	4604      	mov	r4, r0
 80028e6:	2301      	movs	r3, #1
 80028e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80028ec:	e7f0      	b.n	80028d0 <_svfiprintf_r+0x194>
 80028ee:	ab03      	add	r3, sp, #12
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	462a      	mov	r2, r5
 80028f4:	4638      	mov	r0, r7
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <_svfiprintf_r+0x1fc>)
 80028f8:	a904      	add	r1, sp, #16
 80028fa:	f3af 8000 	nop.w
 80028fe:	1c42      	adds	r2, r0, #1
 8002900:	4606      	mov	r6, r0
 8002902:	d1d6      	bne.n	80028b2 <_svfiprintf_r+0x176>
 8002904:	89ab      	ldrh	r3, [r5, #12]
 8002906:	065b      	lsls	r3, r3, #25
 8002908:	f53f af2c 	bmi.w	8002764 <_svfiprintf_r+0x28>
 800290c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800290e:	b01d      	add	sp, #116	; 0x74
 8002910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002914:	ab03      	add	r3, sp, #12
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	462a      	mov	r2, r5
 800291a:	4638      	mov	r0, r7
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <_svfiprintf_r+0x1fc>)
 800291e:	a904      	add	r1, sp, #16
 8002920:	f000 f87c 	bl	8002a1c <_printf_i>
 8002924:	e7eb      	b.n	80028fe <_svfiprintf_r+0x1c2>
 8002926:	bf00      	nop
 8002928:	08002fc6 	.word	0x08002fc6
 800292c:	08002fcc 	.word	0x08002fcc
 8002930:	08002fd0 	.word	0x08002fd0
 8002934:	00000000 	.word	0x00000000
 8002938:	08002685 	.word	0x08002685

0800293c <_printf_common>:
 800293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002940:	4616      	mov	r6, r2
 8002942:	4699      	mov	r9, r3
 8002944:	688a      	ldr	r2, [r1, #8]
 8002946:	690b      	ldr	r3, [r1, #16]
 8002948:	4607      	mov	r7, r0
 800294a:	4293      	cmp	r3, r2
 800294c:	bfb8      	it	lt
 800294e:	4613      	movlt	r3, r2
 8002950:	6033      	str	r3, [r6, #0]
 8002952:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002956:	460c      	mov	r4, r1
 8002958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800295c:	b10a      	cbz	r2, 8002962 <_printf_common+0x26>
 800295e:	3301      	adds	r3, #1
 8002960:	6033      	str	r3, [r6, #0]
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	0699      	lsls	r1, r3, #26
 8002966:	bf42      	ittt	mi
 8002968:	6833      	ldrmi	r3, [r6, #0]
 800296a:	3302      	addmi	r3, #2
 800296c:	6033      	strmi	r3, [r6, #0]
 800296e:	6825      	ldr	r5, [r4, #0]
 8002970:	f015 0506 	ands.w	r5, r5, #6
 8002974:	d106      	bne.n	8002984 <_printf_common+0x48>
 8002976:	f104 0a19 	add.w	sl, r4, #25
 800297a:	68e3      	ldr	r3, [r4, #12]
 800297c:	6832      	ldr	r2, [r6, #0]
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	42ab      	cmp	r3, r5
 8002982:	dc28      	bgt.n	80029d6 <_printf_common+0x9a>
 8002984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002988:	1e13      	subs	r3, r2, #0
 800298a:	6822      	ldr	r2, [r4, #0]
 800298c:	bf18      	it	ne
 800298e:	2301      	movne	r3, #1
 8002990:	0692      	lsls	r2, r2, #26
 8002992:	d42d      	bmi.n	80029f0 <_printf_common+0xb4>
 8002994:	4649      	mov	r1, r9
 8002996:	4638      	mov	r0, r7
 8002998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800299c:	47c0      	blx	r8
 800299e:	3001      	adds	r0, #1
 80029a0:	d020      	beq.n	80029e4 <_printf_common+0xa8>
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	68e5      	ldr	r5, [r4, #12]
 80029a6:	f003 0306 	and.w	r3, r3, #6
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	bf18      	it	ne
 80029ae:	2500      	movne	r5, #0
 80029b0:	6832      	ldr	r2, [r6, #0]
 80029b2:	f04f 0600 	mov.w	r6, #0
 80029b6:	68a3      	ldr	r3, [r4, #8]
 80029b8:	bf08      	it	eq
 80029ba:	1aad      	subeq	r5, r5, r2
 80029bc:	6922      	ldr	r2, [r4, #16]
 80029be:	bf08      	it	eq
 80029c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029c4:	4293      	cmp	r3, r2
 80029c6:	bfc4      	itt	gt
 80029c8:	1a9b      	subgt	r3, r3, r2
 80029ca:	18ed      	addgt	r5, r5, r3
 80029cc:	341a      	adds	r4, #26
 80029ce:	42b5      	cmp	r5, r6
 80029d0:	d11a      	bne.n	8002a08 <_printf_common+0xcc>
 80029d2:	2000      	movs	r0, #0
 80029d4:	e008      	b.n	80029e8 <_printf_common+0xac>
 80029d6:	2301      	movs	r3, #1
 80029d8:	4652      	mov	r2, sl
 80029da:	4649      	mov	r1, r9
 80029dc:	4638      	mov	r0, r7
 80029de:	47c0      	blx	r8
 80029e0:	3001      	adds	r0, #1
 80029e2:	d103      	bne.n	80029ec <_printf_common+0xb0>
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ec:	3501      	adds	r5, #1
 80029ee:	e7c4      	b.n	800297a <_printf_common+0x3e>
 80029f0:	2030      	movs	r0, #48	; 0x30
 80029f2:	18e1      	adds	r1, r4, r3
 80029f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029fe:	4422      	add	r2, r4
 8002a00:	3302      	adds	r3, #2
 8002a02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a06:	e7c5      	b.n	8002994 <_printf_common+0x58>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	4638      	mov	r0, r7
 8002a10:	47c0      	blx	r8
 8002a12:	3001      	adds	r0, #1
 8002a14:	d0e6      	beq.n	80029e4 <_printf_common+0xa8>
 8002a16:	3601      	adds	r6, #1
 8002a18:	e7d9      	b.n	80029ce <_printf_common+0x92>
	...

08002a1c <_printf_i>:
 8002a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a20:	7e0f      	ldrb	r7, [r1, #24]
 8002a22:	4691      	mov	r9, r2
 8002a24:	2f78      	cmp	r7, #120	; 0x78
 8002a26:	4680      	mov	r8, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a32:	d807      	bhi.n	8002a44 <_printf_i+0x28>
 8002a34:	2f62      	cmp	r7, #98	; 0x62
 8002a36:	d80a      	bhi.n	8002a4e <_printf_i+0x32>
 8002a38:	2f00      	cmp	r7, #0
 8002a3a:	f000 80d9 	beq.w	8002bf0 <_printf_i+0x1d4>
 8002a3e:	2f58      	cmp	r7, #88	; 0x58
 8002a40:	f000 80a4 	beq.w	8002b8c <_printf_i+0x170>
 8002a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a4c:	e03a      	b.n	8002ac4 <_printf_i+0xa8>
 8002a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a52:	2b15      	cmp	r3, #21
 8002a54:	d8f6      	bhi.n	8002a44 <_printf_i+0x28>
 8002a56:	a101      	add	r1, pc, #4	; (adr r1, 8002a5c <_printf_i+0x40>)
 8002a58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a5c:	08002ab5 	.word	0x08002ab5
 8002a60:	08002ac9 	.word	0x08002ac9
 8002a64:	08002a45 	.word	0x08002a45
 8002a68:	08002a45 	.word	0x08002a45
 8002a6c:	08002a45 	.word	0x08002a45
 8002a70:	08002a45 	.word	0x08002a45
 8002a74:	08002ac9 	.word	0x08002ac9
 8002a78:	08002a45 	.word	0x08002a45
 8002a7c:	08002a45 	.word	0x08002a45
 8002a80:	08002a45 	.word	0x08002a45
 8002a84:	08002a45 	.word	0x08002a45
 8002a88:	08002bd7 	.word	0x08002bd7
 8002a8c:	08002af9 	.word	0x08002af9
 8002a90:	08002bb9 	.word	0x08002bb9
 8002a94:	08002a45 	.word	0x08002a45
 8002a98:	08002a45 	.word	0x08002a45
 8002a9c:	08002bf9 	.word	0x08002bf9
 8002aa0:	08002a45 	.word	0x08002a45
 8002aa4:	08002af9 	.word	0x08002af9
 8002aa8:	08002a45 	.word	0x08002a45
 8002aac:	08002a45 	.word	0x08002a45
 8002ab0:	08002bc1 	.word	0x08002bc1
 8002ab4:	682b      	ldr	r3, [r5, #0]
 8002ab6:	1d1a      	adds	r2, r3, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	602a      	str	r2, [r5, #0]
 8002abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0a4      	b.n	8002c12 <_printf_i+0x1f6>
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	6829      	ldr	r1, [r5, #0]
 8002acc:	0606      	lsls	r6, r0, #24
 8002ace:	f101 0304 	add.w	r3, r1, #4
 8002ad2:	d50a      	bpl.n	8002aea <_printf_i+0xce>
 8002ad4:	680e      	ldr	r6, [r1, #0]
 8002ad6:	602b      	str	r3, [r5, #0]
 8002ad8:	2e00      	cmp	r6, #0
 8002ada:	da03      	bge.n	8002ae4 <_printf_i+0xc8>
 8002adc:	232d      	movs	r3, #45	; 0x2d
 8002ade:	4276      	negs	r6, r6
 8002ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	485e      	ldr	r0, [pc, #376]	; (8002c60 <_printf_i+0x244>)
 8002ae8:	e019      	b.n	8002b1e <_printf_i+0x102>
 8002aea:	680e      	ldr	r6, [r1, #0]
 8002aec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002af0:	602b      	str	r3, [r5, #0]
 8002af2:	bf18      	it	ne
 8002af4:	b236      	sxthne	r6, r6
 8002af6:	e7ef      	b.n	8002ad8 <_printf_i+0xbc>
 8002af8:	682b      	ldr	r3, [r5, #0]
 8002afa:	6820      	ldr	r0, [r4, #0]
 8002afc:	1d19      	adds	r1, r3, #4
 8002afe:	6029      	str	r1, [r5, #0]
 8002b00:	0601      	lsls	r1, r0, #24
 8002b02:	d501      	bpl.n	8002b08 <_printf_i+0xec>
 8002b04:	681e      	ldr	r6, [r3, #0]
 8002b06:	e002      	b.n	8002b0e <_printf_i+0xf2>
 8002b08:	0646      	lsls	r6, r0, #25
 8002b0a:	d5fb      	bpl.n	8002b04 <_printf_i+0xe8>
 8002b0c:	881e      	ldrh	r6, [r3, #0]
 8002b0e:	2f6f      	cmp	r7, #111	; 0x6f
 8002b10:	bf0c      	ite	eq
 8002b12:	2308      	moveq	r3, #8
 8002b14:	230a      	movne	r3, #10
 8002b16:	4852      	ldr	r0, [pc, #328]	; (8002c60 <_printf_i+0x244>)
 8002b18:	2100      	movs	r1, #0
 8002b1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b1e:	6865      	ldr	r5, [r4, #4]
 8002b20:	2d00      	cmp	r5, #0
 8002b22:	bfa8      	it	ge
 8002b24:	6821      	ldrge	r1, [r4, #0]
 8002b26:	60a5      	str	r5, [r4, #8]
 8002b28:	bfa4      	itt	ge
 8002b2a:	f021 0104 	bicge.w	r1, r1, #4
 8002b2e:	6021      	strge	r1, [r4, #0]
 8002b30:	b90e      	cbnz	r6, 8002b36 <_printf_i+0x11a>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	d04d      	beq.n	8002bd2 <_printf_i+0x1b6>
 8002b36:	4615      	mov	r5, r2
 8002b38:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b3c:	fb03 6711 	mls	r7, r3, r1, r6
 8002b40:	5dc7      	ldrb	r7, [r0, r7]
 8002b42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b46:	4637      	mov	r7, r6
 8002b48:	42bb      	cmp	r3, r7
 8002b4a:	460e      	mov	r6, r1
 8002b4c:	d9f4      	bls.n	8002b38 <_printf_i+0x11c>
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d10b      	bne.n	8002b6a <_printf_i+0x14e>
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	07de      	lsls	r6, r3, #31
 8002b56:	d508      	bpl.n	8002b6a <_printf_i+0x14e>
 8002b58:	6923      	ldr	r3, [r4, #16]
 8002b5a:	6861      	ldr	r1, [r4, #4]
 8002b5c:	4299      	cmp	r1, r3
 8002b5e:	bfde      	ittt	le
 8002b60:	2330      	movle	r3, #48	; 0x30
 8002b62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b6a:	1b52      	subs	r2, r2, r5
 8002b6c:	6122      	str	r2, [r4, #16]
 8002b6e:	464b      	mov	r3, r9
 8002b70:	4621      	mov	r1, r4
 8002b72:	4640      	mov	r0, r8
 8002b74:	f8cd a000 	str.w	sl, [sp]
 8002b78:	aa03      	add	r2, sp, #12
 8002b7a:	f7ff fedf 	bl	800293c <_printf_common>
 8002b7e:	3001      	adds	r0, #1
 8002b80:	d14c      	bne.n	8002c1c <_printf_i+0x200>
 8002b82:	f04f 30ff 	mov.w	r0, #4294967295
 8002b86:	b004      	add	sp, #16
 8002b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8c:	4834      	ldr	r0, [pc, #208]	; (8002c60 <_printf_i+0x244>)
 8002b8e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b92:	6829      	ldr	r1, [r5, #0]
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b9a:	6029      	str	r1, [r5, #0]
 8002b9c:	061d      	lsls	r5, r3, #24
 8002b9e:	d514      	bpl.n	8002bca <_printf_i+0x1ae>
 8002ba0:	07df      	lsls	r7, r3, #31
 8002ba2:	bf44      	itt	mi
 8002ba4:	f043 0320 	orrmi.w	r3, r3, #32
 8002ba8:	6023      	strmi	r3, [r4, #0]
 8002baa:	b91e      	cbnz	r6, 8002bb4 <_printf_i+0x198>
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	f023 0320 	bic.w	r3, r3, #32
 8002bb2:	6023      	str	r3, [r4, #0]
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	e7af      	b.n	8002b18 <_printf_i+0xfc>
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	f043 0320 	orr.w	r3, r3, #32
 8002bbe:	6023      	str	r3, [r4, #0]
 8002bc0:	2378      	movs	r3, #120	; 0x78
 8002bc2:	4828      	ldr	r0, [pc, #160]	; (8002c64 <_printf_i+0x248>)
 8002bc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bc8:	e7e3      	b.n	8002b92 <_printf_i+0x176>
 8002bca:	0659      	lsls	r1, r3, #25
 8002bcc:	bf48      	it	mi
 8002bce:	b2b6      	uxthmi	r6, r6
 8002bd0:	e7e6      	b.n	8002ba0 <_printf_i+0x184>
 8002bd2:	4615      	mov	r5, r2
 8002bd4:	e7bb      	b.n	8002b4e <_printf_i+0x132>
 8002bd6:	682b      	ldr	r3, [r5, #0]
 8002bd8:	6826      	ldr	r6, [r4, #0]
 8002bda:	1d18      	adds	r0, r3, #4
 8002bdc:	6961      	ldr	r1, [r4, #20]
 8002bde:	6028      	str	r0, [r5, #0]
 8002be0:	0635      	lsls	r5, r6, #24
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	d501      	bpl.n	8002bea <_printf_i+0x1ce>
 8002be6:	6019      	str	r1, [r3, #0]
 8002be8:	e002      	b.n	8002bf0 <_printf_i+0x1d4>
 8002bea:	0670      	lsls	r0, r6, #25
 8002bec:	d5fb      	bpl.n	8002be6 <_printf_i+0x1ca>
 8002bee:	8019      	strh	r1, [r3, #0]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	4615      	mov	r5, r2
 8002bf4:	6123      	str	r3, [r4, #16]
 8002bf6:	e7ba      	b.n	8002b6e <_printf_i+0x152>
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	1d1a      	adds	r2, r3, #4
 8002bfe:	602a      	str	r2, [r5, #0]
 8002c00:	681d      	ldr	r5, [r3, #0]
 8002c02:	6862      	ldr	r2, [r4, #4]
 8002c04:	4628      	mov	r0, r5
 8002c06:	f000 f82f 	bl	8002c68 <memchr>
 8002c0a:	b108      	cbz	r0, 8002c10 <_printf_i+0x1f4>
 8002c0c:	1b40      	subs	r0, r0, r5
 8002c0e:	6060      	str	r0, [r4, #4]
 8002c10:	6863      	ldr	r3, [r4, #4]
 8002c12:	6123      	str	r3, [r4, #16]
 8002c14:	2300      	movs	r3, #0
 8002c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c1a:	e7a8      	b.n	8002b6e <_printf_i+0x152>
 8002c1c:	462a      	mov	r2, r5
 8002c1e:	4649      	mov	r1, r9
 8002c20:	4640      	mov	r0, r8
 8002c22:	6923      	ldr	r3, [r4, #16]
 8002c24:	47d0      	blx	sl
 8002c26:	3001      	adds	r0, #1
 8002c28:	d0ab      	beq.n	8002b82 <_printf_i+0x166>
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	079b      	lsls	r3, r3, #30
 8002c2e:	d413      	bmi.n	8002c58 <_printf_i+0x23c>
 8002c30:	68e0      	ldr	r0, [r4, #12]
 8002c32:	9b03      	ldr	r3, [sp, #12]
 8002c34:	4298      	cmp	r0, r3
 8002c36:	bfb8      	it	lt
 8002c38:	4618      	movlt	r0, r3
 8002c3a:	e7a4      	b.n	8002b86 <_printf_i+0x16a>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	4632      	mov	r2, r6
 8002c40:	4649      	mov	r1, r9
 8002c42:	4640      	mov	r0, r8
 8002c44:	47d0      	blx	sl
 8002c46:	3001      	adds	r0, #1
 8002c48:	d09b      	beq.n	8002b82 <_printf_i+0x166>
 8002c4a:	3501      	adds	r5, #1
 8002c4c:	68e3      	ldr	r3, [r4, #12]
 8002c4e:	9903      	ldr	r1, [sp, #12]
 8002c50:	1a5b      	subs	r3, r3, r1
 8002c52:	42ab      	cmp	r3, r5
 8002c54:	dcf2      	bgt.n	8002c3c <_printf_i+0x220>
 8002c56:	e7eb      	b.n	8002c30 <_printf_i+0x214>
 8002c58:	2500      	movs	r5, #0
 8002c5a:	f104 0619 	add.w	r6, r4, #25
 8002c5e:	e7f5      	b.n	8002c4c <_printf_i+0x230>
 8002c60:	08002fd7 	.word	0x08002fd7
 8002c64:	08002fe8 	.word	0x08002fe8

08002c68 <memchr>:
 8002c68:	4603      	mov	r3, r0
 8002c6a:	b510      	push	{r4, lr}
 8002c6c:	b2c9      	uxtb	r1, r1
 8002c6e:	4402      	add	r2, r0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	d101      	bne.n	8002c7a <memchr+0x12>
 8002c76:	2000      	movs	r0, #0
 8002c78:	e003      	b.n	8002c82 <memchr+0x1a>
 8002c7a:	7804      	ldrb	r4, [r0, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	428c      	cmp	r4, r1
 8002c80:	d1f6      	bne.n	8002c70 <memchr+0x8>
 8002c82:	bd10      	pop	{r4, pc}

08002c84 <memcpy>:
 8002c84:	440a      	add	r2, r1
 8002c86:	4291      	cmp	r1, r2
 8002c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c8c:	d100      	bne.n	8002c90 <memcpy+0xc>
 8002c8e:	4770      	bx	lr
 8002c90:	b510      	push	{r4, lr}
 8002c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c96:	4291      	cmp	r1, r2
 8002c98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c9c:	d1f9      	bne.n	8002c92 <memcpy+0xe>
 8002c9e:	bd10      	pop	{r4, pc}

08002ca0 <memmove>:
 8002ca0:	4288      	cmp	r0, r1
 8002ca2:	b510      	push	{r4, lr}
 8002ca4:	eb01 0402 	add.w	r4, r1, r2
 8002ca8:	d902      	bls.n	8002cb0 <memmove+0x10>
 8002caa:	4284      	cmp	r4, r0
 8002cac:	4623      	mov	r3, r4
 8002cae:	d807      	bhi.n	8002cc0 <memmove+0x20>
 8002cb0:	1e43      	subs	r3, r0, #1
 8002cb2:	42a1      	cmp	r1, r4
 8002cb4:	d008      	beq.n	8002cc8 <memmove+0x28>
 8002cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cbe:	e7f8      	b.n	8002cb2 <memmove+0x12>
 8002cc0:	4601      	mov	r1, r0
 8002cc2:	4402      	add	r2, r0
 8002cc4:	428a      	cmp	r2, r1
 8002cc6:	d100      	bne.n	8002cca <memmove+0x2a>
 8002cc8:	bd10      	pop	{r4, pc}
 8002cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002cd2:	e7f7      	b.n	8002cc4 <memmove+0x24>

08002cd4 <_free_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	2900      	cmp	r1, #0
 8002cda:	d040      	beq.n	8002d5e <_free_r+0x8a>
 8002cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ce0:	1f0c      	subs	r4, r1, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bfb8      	it	lt
 8002ce6:	18e4      	addlt	r4, r4, r3
 8002ce8:	f000 f910 	bl	8002f0c <__malloc_lock>
 8002cec:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <_free_r+0x8c>)
 8002cee:	6813      	ldr	r3, [r2, #0]
 8002cf0:	b933      	cbnz	r3, 8002d00 <_free_r+0x2c>
 8002cf2:	6063      	str	r3, [r4, #4]
 8002cf4:	6014      	str	r4, [r2, #0]
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cfc:	f000 b90c 	b.w	8002f18 <__malloc_unlock>
 8002d00:	42a3      	cmp	r3, r4
 8002d02:	d908      	bls.n	8002d16 <_free_r+0x42>
 8002d04:	6820      	ldr	r0, [r4, #0]
 8002d06:	1821      	adds	r1, r4, r0
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	bf01      	itttt	eq
 8002d0c:	6819      	ldreq	r1, [r3, #0]
 8002d0e:	685b      	ldreq	r3, [r3, #4]
 8002d10:	1809      	addeq	r1, r1, r0
 8002d12:	6021      	streq	r1, [r4, #0]
 8002d14:	e7ed      	b.n	8002cf2 <_free_r+0x1e>
 8002d16:	461a      	mov	r2, r3
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	b10b      	cbz	r3, 8002d20 <_free_r+0x4c>
 8002d1c:	42a3      	cmp	r3, r4
 8002d1e:	d9fa      	bls.n	8002d16 <_free_r+0x42>
 8002d20:	6811      	ldr	r1, [r2, #0]
 8002d22:	1850      	adds	r0, r2, r1
 8002d24:	42a0      	cmp	r0, r4
 8002d26:	d10b      	bne.n	8002d40 <_free_r+0x6c>
 8002d28:	6820      	ldr	r0, [r4, #0]
 8002d2a:	4401      	add	r1, r0
 8002d2c:	1850      	adds	r0, r2, r1
 8002d2e:	4283      	cmp	r3, r0
 8002d30:	6011      	str	r1, [r2, #0]
 8002d32:	d1e0      	bne.n	8002cf6 <_free_r+0x22>
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4401      	add	r1, r0
 8002d3a:	6011      	str	r1, [r2, #0]
 8002d3c:	6053      	str	r3, [r2, #4]
 8002d3e:	e7da      	b.n	8002cf6 <_free_r+0x22>
 8002d40:	d902      	bls.n	8002d48 <_free_r+0x74>
 8002d42:	230c      	movs	r3, #12
 8002d44:	602b      	str	r3, [r5, #0]
 8002d46:	e7d6      	b.n	8002cf6 <_free_r+0x22>
 8002d48:	6820      	ldr	r0, [r4, #0]
 8002d4a:	1821      	adds	r1, r4, r0
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	bf01      	itttt	eq
 8002d50:	6819      	ldreq	r1, [r3, #0]
 8002d52:	685b      	ldreq	r3, [r3, #4]
 8002d54:	1809      	addeq	r1, r1, r0
 8002d56:	6021      	streq	r1, [r4, #0]
 8002d58:	6063      	str	r3, [r4, #4]
 8002d5a:	6054      	str	r4, [r2, #4]
 8002d5c:	e7cb      	b.n	8002cf6 <_free_r+0x22>
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
 8002d60:	200000e0 	.word	0x200000e0

08002d64 <sbrk_aligned>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	4e0e      	ldr	r6, [pc, #56]	; (8002da0 <sbrk_aligned+0x3c>)
 8002d68:	460c      	mov	r4, r1
 8002d6a:	6831      	ldr	r1, [r6, #0]
 8002d6c:	4605      	mov	r5, r0
 8002d6e:	b911      	cbnz	r1, 8002d76 <sbrk_aligned+0x12>
 8002d70:	f000 f8bc 	bl	8002eec <_sbrk_r>
 8002d74:	6030      	str	r0, [r6, #0]
 8002d76:	4621      	mov	r1, r4
 8002d78:	4628      	mov	r0, r5
 8002d7a:	f000 f8b7 	bl	8002eec <_sbrk_r>
 8002d7e:	1c43      	adds	r3, r0, #1
 8002d80:	d00a      	beq.n	8002d98 <sbrk_aligned+0x34>
 8002d82:	1cc4      	adds	r4, r0, #3
 8002d84:	f024 0403 	bic.w	r4, r4, #3
 8002d88:	42a0      	cmp	r0, r4
 8002d8a:	d007      	beq.n	8002d9c <sbrk_aligned+0x38>
 8002d8c:	1a21      	subs	r1, r4, r0
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f000 f8ac 	bl	8002eec <_sbrk_r>
 8002d94:	3001      	adds	r0, #1
 8002d96:	d101      	bne.n	8002d9c <sbrk_aligned+0x38>
 8002d98:	f04f 34ff 	mov.w	r4, #4294967295
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
 8002da0:	200000e4 	.word	0x200000e4

08002da4 <_malloc_r>:
 8002da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da8:	1ccd      	adds	r5, r1, #3
 8002daa:	f025 0503 	bic.w	r5, r5, #3
 8002dae:	3508      	adds	r5, #8
 8002db0:	2d0c      	cmp	r5, #12
 8002db2:	bf38      	it	cc
 8002db4:	250c      	movcc	r5, #12
 8002db6:	2d00      	cmp	r5, #0
 8002db8:	4607      	mov	r7, r0
 8002dba:	db01      	blt.n	8002dc0 <_malloc_r+0x1c>
 8002dbc:	42a9      	cmp	r1, r5
 8002dbe:	d905      	bls.n	8002dcc <_malloc_r+0x28>
 8002dc0:	230c      	movs	r3, #12
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dcc:	4e2e      	ldr	r6, [pc, #184]	; (8002e88 <_malloc_r+0xe4>)
 8002dce:	f000 f89d 	bl	8002f0c <__malloc_lock>
 8002dd2:	6833      	ldr	r3, [r6, #0]
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	bb34      	cbnz	r4, 8002e26 <_malloc_r+0x82>
 8002dd8:	4629      	mov	r1, r5
 8002dda:	4638      	mov	r0, r7
 8002ddc:	f7ff ffc2 	bl	8002d64 <sbrk_aligned>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	4604      	mov	r4, r0
 8002de4:	d14d      	bne.n	8002e82 <_malloc_r+0xde>
 8002de6:	6834      	ldr	r4, [r6, #0]
 8002de8:	4626      	mov	r6, r4
 8002dea:	2e00      	cmp	r6, #0
 8002dec:	d140      	bne.n	8002e70 <_malloc_r+0xcc>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	4631      	mov	r1, r6
 8002df2:	4638      	mov	r0, r7
 8002df4:	eb04 0803 	add.w	r8, r4, r3
 8002df8:	f000 f878 	bl	8002eec <_sbrk_r>
 8002dfc:	4580      	cmp	r8, r0
 8002dfe:	d13a      	bne.n	8002e76 <_malloc_r+0xd2>
 8002e00:	6821      	ldr	r1, [r4, #0]
 8002e02:	3503      	adds	r5, #3
 8002e04:	1a6d      	subs	r5, r5, r1
 8002e06:	f025 0503 	bic.w	r5, r5, #3
 8002e0a:	3508      	adds	r5, #8
 8002e0c:	2d0c      	cmp	r5, #12
 8002e0e:	bf38      	it	cc
 8002e10:	250c      	movcc	r5, #12
 8002e12:	4638      	mov	r0, r7
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7ff ffa5 	bl	8002d64 <sbrk_aligned>
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d02b      	beq.n	8002e76 <_malloc_r+0xd2>
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	442b      	add	r3, r5
 8002e22:	6023      	str	r3, [r4, #0]
 8002e24:	e00e      	b.n	8002e44 <_malloc_r+0xa0>
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	1b52      	subs	r2, r2, r5
 8002e2a:	d41e      	bmi.n	8002e6a <_malloc_r+0xc6>
 8002e2c:	2a0b      	cmp	r2, #11
 8002e2e:	d916      	bls.n	8002e5e <_malloc_r+0xba>
 8002e30:	1961      	adds	r1, r4, r5
 8002e32:	42a3      	cmp	r3, r4
 8002e34:	6025      	str	r5, [r4, #0]
 8002e36:	bf18      	it	ne
 8002e38:	6059      	strne	r1, [r3, #4]
 8002e3a:	6863      	ldr	r3, [r4, #4]
 8002e3c:	bf08      	it	eq
 8002e3e:	6031      	streq	r1, [r6, #0]
 8002e40:	5162      	str	r2, [r4, r5]
 8002e42:	604b      	str	r3, [r1, #4]
 8002e44:	4638      	mov	r0, r7
 8002e46:	f104 060b 	add.w	r6, r4, #11
 8002e4a:	f000 f865 	bl	8002f18 <__malloc_unlock>
 8002e4e:	f026 0607 	bic.w	r6, r6, #7
 8002e52:	1d23      	adds	r3, r4, #4
 8002e54:	1af2      	subs	r2, r6, r3
 8002e56:	d0b6      	beq.n	8002dc6 <_malloc_r+0x22>
 8002e58:	1b9b      	subs	r3, r3, r6
 8002e5a:	50a3      	str	r3, [r4, r2]
 8002e5c:	e7b3      	b.n	8002dc6 <_malloc_r+0x22>
 8002e5e:	6862      	ldr	r2, [r4, #4]
 8002e60:	42a3      	cmp	r3, r4
 8002e62:	bf0c      	ite	eq
 8002e64:	6032      	streq	r2, [r6, #0]
 8002e66:	605a      	strne	r2, [r3, #4]
 8002e68:	e7ec      	b.n	8002e44 <_malloc_r+0xa0>
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	6864      	ldr	r4, [r4, #4]
 8002e6e:	e7b2      	b.n	8002dd6 <_malloc_r+0x32>
 8002e70:	4634      	mov	r4, r6
 8002e72:	6876      	ldr	r6, [r6, #4]
 8002e74:	e7b9      	b.n	8002dea <_malloc_r+0x46>
 8002e76:	230c      	movs	r3, #12
 8002e78:	4638      	mov	r0, r7
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	f000 f84c 	bl	8002f18 <__malloc_unlock>
 8002e80:	e7a1      	b.n	8002dc6 <_malloc_r+0x22>
 8002e82:	6025      	str	r5, [r4, #0]
 8002e84:	e7de      	b.n	8002e44 <_malloc_r+0xa0>
 8002e86:	bf00      	nop
 8002e88:	200000e0 	.word	0x200000e0

08002e8c <_realloc_r>:
 8002e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e90:	4680      	mov	r8, r0
 8002e92:	4614      	mov	r4, r2
 8002e94:	460e      	mov	r6, r1
 8002e96:	b921      	cbnz	r1, 8002ea2 <_realloc_r+0x16>
 8002e98:	4611      	mov	r1, r2
 8002e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9e:	f7ff bf81 	b.w	8002da4 <_malloc_r>
 8002ea2:	b92a      	cbnz	r2, 8002eb0 <_realloc_r+0x24>
 8002ea4:	f7ff ff16 	bl	8002cd4 <_free_r>
 8002ea8:	4625      	mov	r5, r4
 8002eaa:	4628      	mov	r0, r5
 8002eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eb0:	f000 f838 	bl	8002f24 <_malloc_usable_size_r>
 8002eb4:	4284      	cmp	r4, r0
 8002eb6:	4607      	mov	r7, r0
 8002eb8:	d802      	bhi.n	8002ec0 <_realloc_r+0x34>
 8002eba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ebe:	d812      	bhi.n	8002ee6 <_realloc_r+0x5a>
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	4640      	mov	r0, r8
 8002ec4:	f7ff ff6e 	bl	8002da4 <_malloc_r>
 8002ec8:	4605      	mov	r5, r0
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d0ed      	beq.n	8002eaa <_realloc_r+0x1e>
 8002ece:	42bc      	cmp	r4, r7
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	4631      	mov	r1, r6
 8002ed4:	bf28      	it	cs
 8002ed6:	463a      	movcs	r2, r7
 8002ed8:	f7ff fed4 	bl	8002c84 <memcpy>
 8002edc:	4631      	mov	r1, r6
 8002ede:	4640      	mov	r0, r8
 8002ee0:	f7ff fef8 	bl	8002cd4 <_free_r>
 8002ee4:	e7e1      	b.n	8002eaa <_realloc_r+0x1e>
 8002ee6:	4635      	mov	r5, r6
 8002ee8:	e7df      	b.n	8002eaa <_realloc_r+0x1e>
	...

08002eec <_sbrk_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4d05      	ldr	r5, [pc, #20]	; (8002f08 <_sbrk_r+0x1c>)
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	602b      	str	r3, [r5, #0]
 8002ef8:	f7ff fb1a 	bl	8002530 <_sbrk>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_sbrk_r+0x1a>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_sbrk_r+0x1a>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	200000e8 	.word	0x200000e8

08002f0c <__malloc_lock>:
 8002f0c:	4801      	ldr	r0, [pc, #4]	; (8002f14 <__malloc_lock+0x8>)
 8002f0e:	f000 b811 	b.w	8002f34 <__retarget_lock_acquire_recursive>
 8002f12:	bf00      	nop
 8002f14:	200000ec 	.word	0x200000ec

08002f18 <__malloc_unlock>:
 8002f18:	4801      	ldr	r0, [pc, #4]	; (8002f20 <__malloc_unlock+0x8>)
 8002f1a:	f000 b80c 	b.w	8002f36 <__retarget_lock_release_recursive>
 8002f1e:	bf00      	nop
 8002f20:	200000ec 	.word	0x200000ec

08002f24 <_malloc_usable_size_r>:
 8002f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f28:	1f18      	subs	r0, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bfbc      	itt	lt
 8002f2e:	580b      	ldrlt	r3, [r1, r0]
 8002f30:	18c0      	addlt	r0, r0, r3
 8002f32:	4770      	bx	lr

08002f34 <__retarget_lock_acquire_recursive>:
 8002f34:	4770      	bx	lr

08002f36 <__retarget_lock_release_recursive>:
 8002f36:	4770      	bx	lr

08002f38 <_init>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	bf00      	nop
 8002f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3e:	bc08      	pop	{r3}
 8002f40:	469e      	mov	lr, r3
 8002f42:	4770      	bx	lr

08002f44 <_fini>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr
