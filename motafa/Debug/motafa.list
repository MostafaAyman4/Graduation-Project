
motafa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b0c  08000b14  00010b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b0c  08000b0c  00010b14  2**0
                  CONTENTS
  4 .ARM          00000000  08000b0c  08000b0c  00010b14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b0c  08000b14  00010b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b0c  08000b0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b10  08000b10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000b14  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000b14  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b14  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b0a  00000000  00000000  00010b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003f9  00000000  00000000  00011647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000a84  00000000  00000000  00011a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  000124c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000148  00000000  00000000  00012668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000b79  00000000  00000000  000127b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001170  00000000  00000000  00013329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005d83  00000000  00000000  00014499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001a21c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000530  00000000  00000000  0001a26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000af4 	.word	0x08000af4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000af4 	.word	0x08000af4

08000170 <MDIO_INIT>:

#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void MDIO_INIT(uint8 copy_uint8Port){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
			MRCC_voidInitClock();
 800017a:	f000 fc21 	bl	80009c0 <MRCC_voidInitClock>
			MRCC_voidEnableClock(RCC_APB2,copy_uint8Port+2);
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	3302      	adds	r3, #2
 8000182:	4619      	mov	r1, r3
 8000184:	2002      	movs	r0, #2
 8000186:	f000 fbdb 	bl	8000940 <MRCC_voidEnableClock>
}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
	...

08000194 <MDIO_voidSetDirection>:
void MDIO_voidSetDirection(uint8 copy_uint8Port,uint8 copy_uint8Pin, uint8 copy_uint8Mode){
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
 800019e:	460b      	mov	r3, r1
 80001a0:	71bb      	strb	r3, [r7, #6]
 80001a2:	4613      	mov	r3, r2
 80001a4:	717b      	strb	r3, [r7, #5]

	switch (copy_uint8Port){
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	2b02      	cmp	r3, #2
 80001aa:	f000 80b3 	beq.w	8000314 <MDIO_voidSetDirection+0x180>
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	f300 810a 	bgt.w	80003c8 <MDIO_voidSetDirection+0x234>
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d002      	beq.n	80001be <MDIO_voidSetDirection+0x2a>
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d056      	beq.n	800026a <MDIO_voidSetDirection+0xd6>
			else if(copy_uint8Mode == INPUT_PULL_UP){
				SET_BIT(GPIOC_ODR,copy_uint8Pin);
			}
			break;
	}
}
 80001bc:	e104      	b.n	80003c8 <MDIO_voidSetDirection+0x234>
			if(copy_uint8Pin<8){
 80001be:	79bb      	ldrb	r3, [r7, #6]
 80001c0:	2b07      	cmp	r3, #7
 80001c2:	d817      	bhi.n	80001f4 <MDIO_voidSetDirection+0x60>
				GPIOA_CRL &= ~((0b1111)<<(copy_uint8Pin*4));
 80001c4:	4b83      	ldr	r3, [pc, #524]	; (80003d4 <MDIO_voidSetDirection+0x240>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	79ba      	ldrb	r2, [r7, #6]
 80001ca:	0092      	lsls	r2, r2, #2
 80001cc:	210f      	movs	r1, #15
 80001ce:	fa01 f202 	lsl.w	r2, r1, r2
 80001d2:	43d2      	mvns	r2, r2
 80001d4:	4611      	mov	r1, r2
 80001d6:	4a7f      	ldr	r2, [pc, #508]	; (80003d4 <MDIO_voidSetDirection+0x240>)
 80001d8:	400b      	ands	r3, r1
 80001da:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 80001dc:	4b7d      	ldr	r3, [pc, #500]	; (80003d4 <MDIO_voidSetDirection+0x240>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	7979      	ldrb	r1, [r7, #5]
 80001e2:	79ba      	ldrb	r2, [r7, #6]
 80001e4:	0092      	lsls	r2, r2, #2
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a79      	ldr	r2, [pc, #484]	; (80003d4 <MDIO_voidSetDirection+0x240>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]
 80001f2:	e01c      	b.n	800022e <MDIO_voidSetDirection+0x9a>
			else if(copy_uint8Pin<16){
 80001f4:	79bb      	ldrb	r3, [r7, #6]
 80001f6:	2b0f      	cmp	r3, #15
 80001f8:	d819      	bhi.n	800022e <MDIO_voidSetDirection+0x9a>
				copy_uint8Pin -=8;
 80001fa:	79bb      	ldrb	r3, [r7, #6]
 80001fc:	3b08      	subs	r3, #8
 80001fe:	71bb      	strb	r3, [r7, #6]
				GPIOA_CRH &= ~((0b1111)<<(copy_uint8Pin*4));
 8000200:	4b75      	ldr	r3, [pc, #468]	; (80003d8 <MDIO_voidSetDirection+0x244>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	210f      	movs	r1, #15
 800020a:	fa01 f202 	lsl.w	r2, r1, r2
 800020e:	43d2      	mvns	r2, r2
 8000210:	4611      	mov	r1, r2
 8000212:	4a71      	ldr	r2, [pc, #452]	; (80003d8 <MDIO_voidSetDirection+0x244>)
 8000214:	400b      	ands	r3, r1
 8000216:	6013      	str	r3, [r2, #0]
			    GPIOA_CRH |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8000218:	4b6f      	ldr	r3, [pc, #444]	; (80003d8 <MDIO_voidSetDirection+0x244>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	7979      	ldrb	r1, [r7, #5]
 800021e:	79ba      	ldrb	r2, [r7, #6]
 8000220:	0092      	lsls	r2, r2, #2
 8000222:	fa01 f202 	lsl.w	r2, r1, r2
 8000226:	4611      	mov	r1, r2
 8000228:	4a6b      	ldr	r2, [pc, #428]	; (80003d8 <MDIO_voidSetDirection+0x244>)
 800022a:	430b      	orrs	r3, r1
 800022c:	6013      	str	r3, [r2, #0]
			if(copy_uint8Mode == INPUT_PULL_DOWN){
 800022e:	797b      	ldrb	r3, [r7, #5]
 8000230:	2b08      	cmp	r3, #8
 8000232:	d10b      	bne.n	800024c <MDIO_voidSetDirection+0xb8>
			    CLR_BIT(GPIOA_ODR,copy_uint8Pin);
 8000234:	4b69      	ldr	r3, [pc, #420]	; (80003dc <MDIO_voidSetDirection+0x248>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	2101      	movs	r1, #1
 800023c:	fa01 f202 	lsl.w	r2, r1, r2
 8000240:	43d2      	mvns	r2, r2
 8000242:	4611      	mov	r1, r2
 8000244:	4a65      	ldr	r2, [pc, #404]	; (80003dc <MDIO_voidSetDirection+0x248>)
 8000246:	400b      	ands	r3, r1
 8000248:	6013      	str	r3, [r2, #0]
			break;
 800024a:	e0b8      	b.n	80003be <MDIO_voidSetDirection+0x22a>
			else if(copy_uint8Mode == INPUT_PULL_UP){
 800024c:	797b      	ldrb	r3, [r7, #5]
 800024e:	2b08      	cmp	r3, #8
 8000250:	f040 80b5 	bne.w	80003be <MDIO_voidSetDirection+0x22a>
				SET_BIT(GPIOA_ODR,copy_uint8Pin);
 8000254:	4b61      	ldr	r3, [pc, #388]	; (80003dc <MDIO_voidSetDirection+0x248>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	79ba      	ldrb	r2, [r7, #6]
 800025a:	2101      	movs	r1, #1
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	4611      	mov	r1, r2
 8000262:	4a5e      	ldr	r2, [pc, #376]	; (80003dc <MDIO_voidSetDirection+0x248>)
 8000264:	430b      	orrs	r3, r1
 8000266:	6013      	str	r3, [r2, #0]
			break;
 8000268:	e0a9      	b.n	80003be <MDIO_voidSetDirection+0x22a>
			if(copy_uint8Pin<8){
 800026a:	79bb      	ldrb	r3, [r7, #6]
 800026c:	2b07      	cmp	r3, #7
 800026e:	d817      	bhi.n	80002a0 <MDIO_voidSetDirection+0x10c>
				GPIOB_CRL &= ~((0b1111)<<(copy_uint8Pin*4));
 8000270:	4b5b      	ldr	r3, [pc, #364]	; (80003e0 <MDIO_voidSetDirection+0x24c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	79ba      	ldrb	r2, [r7, #6]
 8000276:	0092      	lsls	r2, r2, #2
 8000278:	210f      	movs	r1, #15
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	43d2      	mvns	r2, r2
 8000280:	4611      	mov	r1, r2
 8000282:	4a57      	ldr	r2, [pc, #348]	; (80003e0 <MDIO_voidSetDirection+0x24c>)
 8000284:	400b      	ands	r3, r1
 8000286:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8000288:	4b55      	ldr	r3, [pc, #340]	; (80003e0 <MDIO_voidSetDirection+0x24c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	7979      	ldrb	r1, [r7, #5]
 800028e:	79ba      	ldrb	r2, [r7, #6]
 8000290:	0092      	lsls	r2, r2, #2
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	4611      	mov	r1, r2
 8000298:	4a51      	ldr	r2, [pc, #324]	; (80003e0 <MDIO_voidSetDirection+0x24c>)
 800029a:	430b      	orrs	r3, r1
 800029c:	6013      	str	r3, [r2, #0]
 800029e:	e01c      	b.n	80002da <MDIO_voidSetDirection+0x146>
			else if(copy_uint8Pin<16){
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	2b0f      	cmp	r3, #15
 80002a4:	d819      	bhi.n	80002da <MDIO_voidSetDirection+0x146>
				copy_uint8Pin -=8;
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	3b08      	subs	r3, #8
 80002aa:	71bb      	strb	r3, [r7, #6]
				GPIOB_CRH &= ~((0b1111)<<(copy_uint8Pin*4));
 80002ac:	4b4d      	ldr	r3, [pc, #308]	; (80003e4 <MDIO_voidSetDirection+0x250>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	0092      	lsls	r2, r2, #2
 80002b4:	210f      	movs	r1, #15
 80002b6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ba:	43d2      	mvns	r2, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a49      	ldr	r2, [pc, #292]	; (80003e4 <MDIO_voidSetDirection+0x250>)
 80002c0:	400b      	ands	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
			    GPIOB_CRH |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 80002c4:	4b47      	ldr	r3, [pc, #284]	; (80003e4 <MDIO_voidSetDirection+0x250>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	7979      	ldrb	r1, [r7, #5]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	fa01 f202 	lsl.w	r2, r1, r2
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a43      	ldr	r2, [pc, #268]	; (80003e4 <MDIO_voidSetDirection+0x250>)
 80002d6:	430b      	orrs	r3, r1
 80002d8:	6013      	str	r3, [r2, #0]
			if(copy_uint8Mode == INPUT_PULL_DOWN){
 80002da:	797b      	ldrb	r3, [r7, #5]
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d10b      	bne.n	80002f8 <MDIO_voidSetDirection+0x164>
				CLR_BIT(GPIOB_ODR,copy_uint8Pin);
 80002e0:	4b41      	ldr	r3, [pc, #260]	; (80003e8 <MDIO_voidSetDirection+0x254>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	2101      	movs	r1, #1
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	43d2      	mvns	r2, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a3d      	ldr	r2, [pc, #244]	; (80003e8 <MDIO_voidSetDirection+0x254>)
 80002f2:	400b      	ands	r3, r1
 80002f4:	6013      	str	r3, [r2, #0]
			break;
 80002f6:	e064      	b.n	80003c2 <MDIO_voidSetDirection+0x22e>
			else if(copy_uint8Mode == INPUT_PULL_UP){
 80002f8:	797b      	ldrb	r3, [r7, #5]
 80002fa:	2b08      	cmp	r3, #8
 80002fc:	d161      	bne.n	80003c2 <MDIO_voidSetDirection+0x22e>
				SET_BIT(GPIOB_ODR,copy_uint8Pin);
 80002fe:	4b3a      	ldr	r3, [pc, #232]	; (80003e8 <MDIO_voidSetDirection+0x254>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	2101      	movs	r1, #1
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	4611      	mov	r1, r2
 800030c:	4a36      	ldr	r2, [pc, #216]	; (80003e8 <MDIO_voidSetDirection+0x254>)
 800030e:	430b      	orrs	r3, r1
 8000310:	6013      	str	r3, [r2, #0]
			break;
 8000312:	e056      	b.n	80003c2 <MDIO_voidSetDirection+0x22e>
			if(copy_uint8Pin<8){
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	2b07      	cmp	r3, #7
 8000318:	d817      	bhi.n	800034a <MDIO_voidSetDirection+0x1b6>
				GPIOC_CRL &= ~((0b1111)<<(copy_uint8Pin*4));
 800031a:	4b34      	ldr	r3, [pc, #208]	; (80003ec <MDIO_voidSetDirection+0x258>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	79ba      	ldrb	r2, [r7, #6]
 8000320:	0092      	lsls	r2, r2, #2
 8000322:	210f      	movs	r1, #15
 8000324:	fa01 f202 	lsl.w	r2, r1, r2
 8000328:	43d2      	mvns	r2, r2
 800032a:	4611      	mov	r1, r2
 800032c:	4a2f      	ldr	r2, [pc, #188]	; (80003ec <MDIO_voidSetDirection+0x258>)
 800032e:	400b      	ands	r3, r1
 8000330:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 8000332:	4b2e      	ldr	r3, [pc, #184]	; (80003ec <MDIO_voidSetDirection+0x258>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	7979      	ldrb	r1, [r7, #5]
 8000338:	79ba      	ldrb	r2, [r7, #6]
 800033a:	0092      	lsls	r2, r2, #2
 800033c:	fa01 f202 	lsl.w	r2, r1, r2
 8000340:	4611      	mov	r1, r2
 8000342:	4a2a      	ldr	r2, [pc, #168]	; (80003ec <MDIO_voidSetDirection+0x258>)
 8000344:	430b      	orrs	r3, r1
 8000346:	6013      	str	r3, [r2, #0]
 8000348:	e01c      	b.n	8000384 <MDIO_voidSetDirection+0x1f0>
			else if(copy_uint8Pin<16){
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	2b0f      	cmp	r3, #15
 800034e:	d819      	bhi.n	8000384 <MDIO_voidSetDirection+0x1f0>
				copy_uint8Pin -=8;
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	3b08      	subs	r3, #8
 8000354:	71bb      	strb	r3, [r7, #6]
     			GPIOC_CRH &= ~((0b1111)<<(copy_uint8Pin*4));
 8000356:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <MDIO_voidSetDirection+0x25c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	79ba      	ldrb	r2, [r7, #6]
 800035c:	0092      	lsls	r2, r2, #2
 800035e:	210f      	movs	r1, #15
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	43d2      	mvns	r2, r2
 8000366:	4611      	mov	r1, r2
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <MDIO_voidSetDirection+0x25c>)
 800036a:	400b      	ands	r3, r1
 800036c:	6013      	str	r3, [r2, #0]
			    GPIOC_CRH |= ((copy_uint8Mode)<<(copy_uint8Pin*4));
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <MDIO_voidSetDirection+0x25c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	7979      	ldrb	r1, [r7, #5]
 8000374:	79ba      	ldrb	r2, [r7, #6]
 8000376:	0092      	lsls	r2, r2, #2
 8000378:	fa01 f202 	lsl.w	r2, r1, r2
 800037c:	4611      	mov	r1, r2
 800037e:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <MDIO_voidSetDirection+0x25c>)
 8000380:	430b      	orrs	r3, r1
 8000382:	6013      	str	r3, [r2, #0]
			if(copy_uint8Mode == INPUT_PULL_DOWN){
 8000384:	797b      	ldrb	r3, [r7, #5]
 8000386:	2b08      	cmp	r3, #8
 8000388:	d10b      	bne.n	80003a2 <MDIO_voidSetDirection+0x20e>
			   CLR_BIT(GPIOC_ODR,copy_uint8Pin);
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MDIO_voidSetDirection+0x260>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	79ba      	ldrb	r2, [r7, #6]
 8000390:	2101      	movs	r1, #1
 8000392:	fa01 f202 	lsl.w	r2, r1, r2
 8000396:	43d2      	mvns	r2, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <MDIO_voidSetDirection+0x260>)
 800039c:	400b      	ands	r3, r1
 800039e:	6013      	str	r3, [r2, #0]
			break;
 80003a0:	e011      	b.n	80003c6 <MDIO_voidSetDirection+0x232>
			else if(copy_uint8Mode == INPUT_PULL_UP){
 80003a2:	797b      	ldrb	r3, [r7, #5]
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d10e      	bne.n	80003c6 <MDIO_voidSetDirection+0x232>
				SET_BIT(GPIOC_ODR,copy_uint8Pin);
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MDIO_voidSetDirection+0x260>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	79ba      	ldrb	r2, [r7, #6]
 80003ae:	2101      	movs	r1, #1
 80003b0:	fa01 f202 	lsl.w	r2, r1, r2
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <MDIO_voidSetDirection+0x260>)
 80003b8:	430b      	orrs	r3, r1
 80003ba:	6013      	str	r3, [r2, #0]
			break;
 80003bc:	e003      	b.n	80003c6 <MDIO_voidSetDirection+0x232>
			break;
 80003be:	bf00      	nop
 80003c0:	e002      	b.n	80003c8 <MDIO_voidSetDirection+0x234>
			break;
 80003c2:	bf00      	nop
 80003c4:	e000      	b.n	80003c8 <MDIO_voidSetDirection+0x234>
			break;
 80003c6:	bf00      	nop
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40010800 	.word	0x40010800
 80003d8:	40010804 	.word	0x40010804
 80003dc:	4001080c 	.word	0x4001080c
 80003e0:	40010c00 	.word	0x40010c00
 80003e4:	40010c04 	.word	0x40010c04
 80003e8:	40010c0c 	.word	0x40010c0c
 80003ec:	40011000 	.word	0x40011000
 80003f0:	40011004 	.word	0x40011004
 80003f4:	4001100c 	.word	0x4001100c

080003f8 <MDIO_voidWrite_D_pin>:

void MDIO_voidWrite_D_pin(uint8 copy_uint8Port,uint8 copy_uint8Pin, uint8 copy_uint8Value){
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
 8000402:	460b      	mov	r3, r1
 8000404:	71bb      	strb	r3, [r7, #6]
 8000406:	4613      	mov	r3, r2
 8000408:	717b      	strb	r3, [r7, #5]
	switch(copy_uint8Port){
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b02      	cmp	r3, #2
 800040e:	d040      	beq.n	8000492 <MDIO_voidWrite_D_pin+0x9a>
 8000410:	2b02      	cmp	r3, #2
 8000412:	dc60      	bgt.n	80004d6 <MDIO_voidWrite_D_pin+0xde>
 8000414:	2b00      	cmp	r3, #0
 8000416:	d002      	beq.n	800041e <MDIO_voidWrite_D_pin+0x26>
 8000418:	2b01      	cmp	r3, #1
 800041a:	d01d      	beq.n	8000458 <MDIO_voidWrite_D_pin+0x60>
			else if(copy_uint8Value == LOW){
					CLR_BIT(GPIOC_ODR,copy_uint8Pin);
			}
		break;
	}
}
 800041c:	e05b      	b.n	80004d6 <MDIO_voidWrite_D_pin+0xde>
				if(copy_uint8Value == HIGH){
 800041e:	797b      	ldrb	r3, [r7, #5]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d10a      	bne.n	800043a <MDIO_voidWrite_D_pin+0x42>
					SET_BIT(GPIOA_ODR,copy_uint8Pin);
 8000424:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <MDIO_voidWrite_D_pin+0xe8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	79ba      	ldrb	r2, [r7, #6]
 800042a:	2101      	movs	r1, #1
 800042c:	fa01 f202 	lsl.w	r2, r1, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a2b      	ldr	r2, [pc, #172]	; (80004e0 <MDIO_voidWrite_D_pin+0xe8>)
 8000434:	430b      	orrs	r3, r1
 8000436:	6013      	str	r3, [r2, #0]
		break;
 8000438:	e048      	b.n	80004cc <MDIO_voidWrite_D_pin+0xd4>
				else if(copy_uint8Value == LOW){
 800043a:	797b      	ldrb	r3, [r7, #5]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d145      	bne.n	80004cc <MDIO_voidWrite_D_pin+0xd4>
					CLR_BIT(GPIOA_ODR,copy_uint8Pin);
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MDIO_voidWrite_D_pin+0xe8>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	79ba      	ldrb	r2, [r7, #6]
 8000446:	2101      	movs	r1, #1
 8000448:	fa01 f202 	lsl.w	r2, r1, r2
 800044c:	43d2      	mvns	r2, r2
 800044e:	4611      	mov	r1, r2
 8000450:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <MDIO_voidWrite_D_pin+0xe8>)
 8000452:	400b      	ands	r3, r1
 8000454:	6013      	str	r3, [r2, #0]
		break;
 8000456:	e039      	b.n	80004cc <MDIO_voidWrite_D_pin+0xd4>
				if(copy_uint8Value == HIGH){
 8000458:	797b      	ldrb	r3, [r7, #5]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d10a      	bne.n	8000474 <MDIO_voidWrite_D_pin+0x7c>
					SET_BIT(GPIOB_ODR,copy_uint8Pin);
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <MDIO_voidWrite_D_pin+0xec>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	2101      	movs	r1, #1
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4a1d      	ldr	r2, [pc, #116]	; (80004e4 <MDIO_voidWrite_D_pin+0xec>)
 800046e:	430b      	orrs	r3, r1
 8000470:	6013      	str	r3, [r2, #0]
		break;
 8000472:	e02d      	b.n	80004d0 <MDIO_voidWrite_D_pin+0xd8>
				else if(copy_uint8Value == LOW){
 8000474:	797b      	ldrb	r3, [r7, #5]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d12a      	bne.n	80004d0 <MDIO_voidWrite_D_pin+0xd8>
					CLR_BIT(GPIOB_ODR,copy_uint8Pin);
 800047a:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MDIO_voidWrite_D_pin+0xec>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	79ba      	ldrb	r2, [r7, #6]
 8000480:	2101      	movs	r1, #1
 8000482:	fa01 f202 	lsl.w	r2, r1, r2
 8000486:	43d2      	mvns	r2, r2
 8000488:	4611      	mov	r1, r2
 800048a:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <MDIO_voidWrite_D_pin+0xec>)
 800048c:	400b      	ands	r3, r1
 800048e:	6013      	str	r3, [r2, #0]
		break;
 8000490:	e01e      	b.n	80004d0 <MDIO_voidWrite_D_pin+0xd8>
			if(copy_uint8Value == HIGH){
 8000492:	797b      	ldrb	r3, [r7, #5]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d10a      	bne.n	80004ae <MDIO_voidWrite_D_pin+0xb6>
					SET_BIT(GPIOC_ODR,copy_uint8Pin);
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MDIO_voidWrite_D_pin+0xf0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	79ba      	ldrb	r2, [r7, #6]
 800049e:	2101      	movs	r1, #1
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <MDIO_voidWrite_D_pin+0xf0>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	6013      	str	r3, [r2, #0]
		break;
 80004ac:	e012      	b.n	80004d4 <MDIO_voidWrite_D_pin+0xdc>
			else if(copy_uint8Value == LOW){
 80004ae:	797b      	ldrb	r3, [r7, #5]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d10f      	bne.n	80004d4 <MDIO_voidWrite_D_pin+0xdc>
					CLR_BIT(GPIOC_ODR,copy_uint8Pin);
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MDIO_voidWrite_D_pin+0xf0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	79ba      	ldrb	r2, [r7, #6]
 80004ba:	2101      	movs	r1, #1
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	43d2      	mvns	r2, r2
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <MDIO_voidWrite_D_pin+0xf0>)
 80004c6:	400b      	ands	r3, r1
 80004c8:	6013      	str	r3, [r2, #0]
		break;
 80004ca:	e003      	b.n	80004d4 <MDIO_voidWrite_D_pin+0xdc>
		break;
 80004cc:	bf00      	nop
 80004ce:	e002      	b.n	80004d6 <MDIO_voidWrite_D_pin+0xde>
		break;
 80004d0:	bf00      	nop
 80004d2:	e000      	b.n	80004d6 <MDIO_voidWrite_D_pin+0xde>
		break;
 80004d4:	bf00      	nop
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	4001080c 	.word	0x4001080c
 80004e4:	40010c0c 	.word	0x40010c0c
 80004e8:	4001100c 	.word	0x4001100c

080004ec <MTimer_voidInitInputCapture>:
 ***Remains***
 	 	 	 *Pulse measure
 * if u have any comment Please روح ل امك تعمله
 * */

void MTimer_voidInitInputCapture(uint8 Copy_uint8TimerNo,uint8 Copy_uint8ChannelNo){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	460a      	mov	r2, r1
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71bb      	strb	r3, [r7, #6]
    switch (Copy_uint8TimerNo)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	f000 814c 	beq.w	800079c <MTimer_voidInitInputCapture+0x2b0>
 8000504:	2b02      	cmp	r3, #2
 8000506:	f300 81d3 	bgt.w	80008b0 <MTimer_voidInitInputCapture+0x3c4>
 800050a:	2b00      	cmp	r3, #0
 800050c:	d003      	beq.n	8000516 <MTimer_voidInitInputCapture+0x2a>
 800050e:	2b01      	cmp	r3, #1
 8000510:	f000 80b9 	beq.w	8000686 <MTimer_voidInitInputCapture+0x19a>
            TIMER4->PSC = TIMER4_PRESCALER;
            //enable autoreload
            SET_BIT(TIMER4->CR1,7);
    break;
}
}
 8000514:	e1cc      	b.n	80008b0 <MTimer_voidInitInputCapture+0x3c4>
        switch (Copy_uint8ChannelNo)
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	2b03      	cmp	r3, #3
 800051a:	f200 809f 	bhi.w	800065c <MTimer_voidInitInputCapture+0x170>
 800051e:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <MTimer_voidInitInputCapture+0x38>)
 8000520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000524:	08000535 	.word	0x08000535
 8000528:	0800057f 	.word	0x0800057f
 800052c:	080005c9 	.word	0x080005c9
 8000530:	08000613 	.word	0x08000613
            TIMER2->CCMR1 |= (0b01);
 8000534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6193      	str	r3, [r2, #24]
            TIMER2->CCMR1 |= (INPUT_CHECK_DURATION<<4);
 8000544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	6193      	str	r3, [r2, #24]
            CLR_BIT(TIMER2->CCER,1);
 8000550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000554:	6a1b      	ldr	r3, [r3, #32]
 8000556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800055a:	f023 0302 	bic.w	r3, r3, #2
 800055e:	6213      	str	r3, [r2, #32]
            TIMER2->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 8000560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER2->CCER,0);
 800056c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000570:	6a1b      	ldr	r3, [r3, #32]
 8000572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6213      	str	r3, [r2, #32]
            break;
 800057c:	e06e      	b.n	800065c <MTimer_voidInitInputCapture+0x170>
            TIMER2->CCMR1 |= (0b01<<8);
 800057e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800058c:	6193      	str	r3, [r2, #24]
            TIMER2->CCMR1 |= (INPUT_CHECK_DURATION<<12);
 800058e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	6193      	str	r3, [r2, #24]
            CLR_BIT(TIMER2->CCER,5);
 800059a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a4:	f023 0320 	bic.w	r3, r3, #32
 80005a8:	6213      	str	r3, [r2, #32]
            TIMER2->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 80005aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER2->CCER,4);
 80005b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ba:	6a1b      	ldr	r3, [r3, #32]
 80005bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c0:	f043 0310 	orr.w	r3, r3, #16
 80005c4:	6213      	str	r3, [r2, #32]
            break;
 80005c6:	e049      	b.n	800065c <MTimer_voidInitInputCapture+0x170>
            TIMER2->CCMR2 |= (0b01);
 80005c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	61d3      	str	r3, [r2, #28]
            TIMER2->CCMR2 |= (INPUT_CHECK_DURATION<<4);
 80005d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	61d3      	str	r3, [r2, #28]
            CLR_BIT(TIMER2->CCER,9);
 80005e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e8:	6a1b      	ldr	r3, [r3, #32]
 80005ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005f2:	6213      	str	r3, [r2, #32]
            TIMER2->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 80005f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER2->CCER,8);
 8000600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000604:	6a1b      	ldr	r3, [r3, #32]
 8000606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800060a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060e:	6213      	str	r3, [r2, #32]
            break;
 8000610:	e024      	b.n	800065c <MTimer_voidInitInputCapture+0x170>
            TIMER2->CCMR2 |= (0b01<<8);
 8000612:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800061c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000620:	61d3      	str	r3, [r2, #28]
            TIMER2->CCMR2 |= (INPUT_CHECK_DURATION<<12);
 8000622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	61d3      	str	r3, [r2, #28]
            CLR_BIT(TIMER2->CCER,13);
 800062e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800063c:	6213      	str	r3, [r2, #32]
            TIMER2->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 800063e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER2->CCER,12);
 800064a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000658:	6213      	str	r3, [r2, #32]
            break;
 800065a:	bf00      	nop
            CLR_BIT(TIMER2->CR1,4);
 800065c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000666:	f023 0310 	bic.w	r3, r3, #16
 800066a:	6013      	str	r3, [r2, #0]
            TIMER2->PSC = TIMER2_PRESCALER;
 800066c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000670:	2204      	movs	r2, #4
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
            SET_BIT(TIMER2->CR1,7);
 8000674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800067e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000682:	6013      	str	r3, [r2, #0]
    break;
 8000684:	e114      	b.n	80008b0 <MTimer_voidInitInputCapture+0x3c4>
    switch (Copy_uint8ChannelNo)
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	2b03      	cmp	r3, #3
 800068a:	d877      	bhi.n	800077c <MTimer_voidInitInputCapture+0x290>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <MTimer_voidInitInputCapture+0x1a8>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006a5 	.word	0x080006a5
 8000698:	080006db 	.word	0x080006db
 800069c:	08000711 	.word	0x08000711
 80006a0:	08000747 	.word	0x08000747
            TIMER3->CCMR1 |= (0b01);
 80006a4:	4b85      	ldr	r3, [pc, #532]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a84      	ldr	r2, [pc, #528]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6193      	str	r3, [r2, #24]
            TIMER3->CCMR1 |= (INPUT_CHECK_DURATION<<4);
 80006b0:	4b82      	ldr	r3, [pc, #520]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006b2:	4a82      	ldr	r2, [pc, #520]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	6193      	str	r3, [r2, #24]
            CLR_BIT(TIMER3->CCER,1);
 80006b8:	4b80      	ldr	r3, [pc, #512]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a7f      	ldr	r2, [pc, #508]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006be:	f023 0302 	bic.w	r3, r3, #2
 80006c2:	6213      	str	r3, [r2, #32]
            TIMER3->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 80006c4:	4b7d      	ldr	r3, [pc, #500]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006c6:	4a7d      	ldr	r2, [pc, #500]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER3->CCER,0);
 80006cc:	4b7b      	ldr	r3, [pc, #492]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	4a7a      	ldr	r2, [pc, #488]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6213      	str	r3, [r2, #32]
            break;
 80006d8:	e050      	b.n	800077c <MTimer_voidInitInputCapture+0x290>
            TIMER3->CCMR1 |= (0b01<<8);
 80006da:	4b78      	ldr	r3, [pc, #480]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a77      	ldr	r2, [pc, #476]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e4:	6193      	str	r3, [r2, #24]
            TIMER3->CCMR1 |= (INPUT_CHECK_DURATION<<12);
 80006e6:	4b75      	ldr	r3, [pc, #468]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006e8:	4a74      	ldr	r2, [pc, #464]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	6193      	str	r3, [r2, #24]
            CLR_BIT(TIMER3->CCER,5);
 80006ee:	4b73      	ldr	r3, [pc, #460]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006f0:	6a1b      	ldr	r3, [r3, #32]
 80006f2:	4a72      	ldr	r2, [pc, #456]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006f4:	f023 0320 	bic.w	r3, r3, #32
 80006f8:	6213      	str	r3, [r2, #32]
            TIMER3->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 80006fa:	4b70      	ldr	r3, [pc, #448]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006fc:	4a6f      	ldr	r2, [pc, #444]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER3->CCER,4);
 8000702:	4b6e      	ldr	r3, [pc, #440]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000704:	6a1b      	ldr	r3, [r3, #32]
 8000706:	4a6d      	ldr	r2, [pc, #436]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6213      	str	r3, [r2, #32]
            break;
 800070e:	e035      	b.n	800077c <MTimer_voidInitInputCapture+0x290>
            TIMER3->CCMR2 |= (0b01);
 8000710:	4b6a      	ldr	r3, [pc, #424]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	4a69      	ldr	r2, [pc, #420]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	61d3      	str	r3, [r2, #28]
            TIMER3->CCMR2 |= (INPUT_CHECK_DURATION<<4);
 800071c:	4b67      	ldr	r3, [pc, #412]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 800071e:	4a67      	ldr	r2, [pc, #412]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	61d3      	str	r3, [r2, #28]
            CLR_BIT(TIMER3->CCER,9);
 8000724:	4b65      	ldr	r3, [pc, #404]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000726:	6a1b      	ldr	r3, [r3, #32]
 8000728:	4a64      	ldr	r2, [pc, #400]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 800072a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800072e:	6213      	str	r3, [r2, #32]
            TIMER3->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 8000730:	4b62      	ldr	r3, [pc, #392]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000732:	4a62      	ldr	r2, [pc, #392]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER3->CCER,8);
 8000738:	4b60      	ldr	r3, [pc, #384]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 800073a:	6a1b      	ldr	r3, [r3, #32]
 800073c:	4a5f      	ldr	r2, [pc, #380]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 800073e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000742:	6213      	str	r3, [r2, #32]
            break;
 8000744:	e01a      	b.n	800077c <MTimer_voidInitInputCapture+0x290>
            TIMER3->CCMR2 |= (0b01<<8);
 8000746:	4b5d      	ldr	r3, [pc, #372]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a5c      	ldr	r2, [pc, #368]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 800074c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000750:	61d3      	str	r3, [r2, #28]
            TIMER3->CCMR2 |= (INPUT_CHECK_DURATION<<12);
 8000752:	4b5a      	ldr	r3, [pc, #360]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000754:	4a59      	ldr	r2, [pc, #356]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	61d3      	str	r3, [r2, #28]
            CLR_BIT(TIMER3->CCER,13);
 800075a:	4b58      	ldr	r3, [pc, #352]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 800075c:	6a1b      	ldr	r3, [r3, #32]
 800075e:	4a57      	ldr	r2, [pc, #348]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000764:	6213      	str	r3, [r2, #32]
            TIMER3->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 8000766:	4b55      	ldr	r3, [pc, #340]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000768:	4a54      	ldr	r2, [pc, #336]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER3->CCER,12);
 800076e:	4b53      	ldr	r3, [pc, #332]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000770:	6a1b      	ldr	r3, [r3, #32]
 8000772:	4a52      	ldr	r2, [pc, #328]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000778:	6213      	str	r3, [r2, #32]
            break;
 800077a:	bf00      	nop
            CLR_BIT(TIMER3->CR1,4);
 800077c:	4b4f      	ldr	r3, [pc, #316]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a4e      	ldr	r2, [pc, #312]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000782:	f023 0310 	bic.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
            TIMER3->PSC = TIMER3_PRESCALER;
 8000788:	4b4c      	ldr	r3, [pc, #304]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 800078a:	2204      	movs	r2, #4
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
            SET_BIT(TIMER3->CR1,7);
 800078e:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a4a      	ldr	r2, [pc, #296]	; (80008bc <MTimer_voidInitInputCapture+0x3d0>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6013      	str	r3, [r2, #0]
    break;
 800079a:	e089      	b.n	80008b0 <MTimer_voidInitInputCapture+0x3c4>
        switch (Copy_uint8ChannelNo)
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d876      	bhi.n	8000890 <MTimer_voidInitInputCapture+0x3a4>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <MTimer_voidInitInputCapture+0x2bc>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	080007b9 	.word	0x080007b9
 80007ac:	080007ef 	.word	0x080007ef
 80007b0:	08000825 	.word	0x08000825
 80007b4:	0800085b 	.word	0x0800085b
            TIMER4->CCMR1 |= (0b01);
 80007b8:	4b41      	ldr	r3, [pc, #260]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a40      	ldr	r2, [pc, #256]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6193      	str	r3, [r2, #24]
            TIMER4->CCMR1 |= (INPUT_CHECK_DURATION<<4);
 80007c4:	4b3e      	ldr	r3, [pc, #248]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007c6:	4a3e      	ldr	r2, [pc, #248]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	6193      	str	r3, [r2, #24]
            CLR_BIT(TIMER4->CCER,1);
 80007cc:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007ce:	6a1b      	ldr	r3, [r3, #32]
 80007d0:	4a3b      	ldr	r2, [pc, #236]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007d2:	f023 0302 	bic.w	r3, r3, #2
 80007d6:	6213      	str	r3, [r2, #32]
            TIMER4->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 80007d8:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007da:	4a39      	ldr	r2, [pc, #228]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER4->CCER,0);
 80007e0:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007e2:	6a1b      	ldr	r3, [r3, #32]
 80007e4:	4a36      	ldr	r2, [pc, #216]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6213      	str	r3, [r2, #32]
            break;
 80007ec:	e050      	b.n	8000890 <MTimer_voidInitInputCapture+0x3a4>
            TIMER4->CCMR1 |= (0b01<<8);
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a33      	ldr	r2, [pc, #204]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f8:	6193      	str	r3, [r2, #24]
            TIMER4->CCMR1 |= (INPUT_CHECK_DURATION<<12);
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007fc:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	6193      	str	r3, [r2, #24]
            CLR_BIT(TIMER4->CCER,5);
 8000802:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000808:	f023 0320 	bic.w	r3, r3, #32
 800080c:	6213      	str	r3, [r2, #32]
            TIMER4->CCMR1 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	6193      	str	r3, [r2, #24]
            SET_BIT(TIMER4->CCER,4);
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000818:	6a1b      	ldr	r3, [r3, #32]
 800081a:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	6213      	str	r3, [r2, #32]
            break;
 8000822:	e035      	b.n	8000890 <MTimer_voidInitInputCapture+0x3a4>
            TIMER4->CCMR2 |= (0b01);
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	61d3      	str	r3, [r2, #28]
            TIMER4->CCMR2 |= (INPUT_CHECK_DURATION<<4);
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000832:	4a23      	ldr	r2, [pc, #140]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	61d3      	str	r3, [r2, #28]
            CLR_BIT(TIMER4->CCER,9);
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800083a:	6a1b      	ldr	r3, [r3, #32]
 800083c:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800083e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000842:	6213      	str	r3, [r2, #32]
            TIMER4->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<2);
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER4->CCER,8);
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800084e:	6a1b      	ldr	r3, [r3, #32]
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000856:	6213      	str	r3, [r2, #32]
            break;
 8000858:	e01a      	b.n	8000890 <MTimer_voidInitInputCapture+0x3a4>
            TIMER4->CCMR2 |= (0b01<<8);
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000864:	61d3      	str	r3, [r2, #28]
            TIMER4->CCMR2 |= (INPUT_CHECK_DURATION<<12);
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	61d3      	str	r3, [r2, #28]
            CLR_BIT(TIMER4->CCER,13);
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000870:	6a1b      	ldr	r3, [r3, #32]
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000878:	6213      	str	r3, [r2, #32]
            TIMER4->CCMR2 |= (INPUT_CAPTURE_CHANNEL_1_PRESCALLER<<10);
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	61d3      	str	r3, [r2, #28]
            SET_BIT(TIMER4->CCER,12);
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000884:	6a1b      	ldr	r3, [r3, #32]
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088c:	6213      	str	r3, [r2, #32]
            break;
 800088e:	bf00      	nop
            CLR_BIT(TIMER4->CR1,4);
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 8000896:	f023 0310 	bic.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
            TIMER4->PSC = TIMER4_PRESCALER;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 800089e:	2204      	movs	r2, #4
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
            SET_BIT(TIMER4->CR1,7);
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <MTimer_voidInitInputCapture+0x3d4>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	6013      	str	r3, [r2, #0]
    break;
 80008ae:	bf00      	nop
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40000400 	.word	0x40000400
 80008c0:	40000800 	.word	0x40000800

080008c4 <MSYSTICK_voidInit>:
#include "MSYSTICK_private.h"
#include "MSYSTICK_private.h"

uint32 Global_ORIGINAL_TICKS =0;
uint8 Global_uint8PeriodicCheckBit = 0;
void MSYSTICK_voidInit(void){
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
    #if  SYSTICK_CLOCK_SOURCE == AHB
    SET_BIT(STK_CTRL,2);
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MSYSTICK_voidInit+0x24>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <MSYSTICK_voidInit+0x24>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6013      	str	r3, [r2, #0]
        #error("You chosed wrong SYSTICK_CLOCK_SOURCE ")
    #endif
    #if SYSTICK_INT_EN == ENABLE
            SET_BIT(STK_CTRL,1);
    #elif SYSTICK_INT_EN ==DISABLE
            CLR_BIT(STK_CTRL,1);
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <MSYSTICK_voidInit+0x24>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <MSYSTICK_voidInit+0x24>)
 80008da:	f023 0302 	bic.w	r3, r3, #2
 80008de:	6013      	str	r3, [r2, #0]
    #else
        #error("You chosed wrong SYSTICK_INT_ENALBE ")
    #endif
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	e000e010 	.word	0xe000e010

080008ec <MYSYSTICK_voidSet_BusyWait>:
void MYSYSTICK_voidSet_BusyWait(uint32 Copy_uint32Ticks){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    STK_LOAD = Copy_uint32Ticks;
 80008f4:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <MYSYSTICK_voidSet_BusyWait+0x38>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
    SET_BIT(STK_CTRL,0);
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MYSYSTICK_voidSet_BusyWait+0x3c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <MYSYSTICK_voidSet_BusyWait+0x3c>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6013      	str	r3, [r2, #0]
    while(GET_BIT(STK_CTRL,16) == 0);
 8000906:	bf00      	nop
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MYSYSTICK_voidSet_BusyWait+0x3c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f8      	beq.n	8000908 <MYSYSTICK_voidSet_BusyWait+0x1c>
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e014 	.word	0xe000e014
 8000928:	e000e010 	.word	0xe000e010

0800092c <SysTick_Handler>:
	MYSYSTICK_voidSet_BusyWait((uint32)(Copy_uint8MS*1000));
}
void MSYSTICK_voidDelay_uS(uint32 Copy_uint32uS){
	MYSYSTICK_voidSet_BusyWait(Copy_uint32uS);
}
void SysTick_Handler(void){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    Callback_function();
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <SysTick_Handler+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4798      	blx	r3
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000001c 	.word	0x2000001c

08000940 <MRCC_voidEnableClock>:

#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void MRCC_voidEnableClock(uint8  copy_uint8BusId,uint32 copy_uint32PeriId ){
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
    if(copy_uint32PeriId<32){
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	2b1f      	cmp	r3, #31
 8000950:	d82a      	bhi.n	80009a8 <MRCC_voidEnableClock+0x68>
        switch(copy_uint8BusId){
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d01c      	beq.n	8000992 <MRCC_voidEnableClock+0x52>
 8000958:	2b02      	cmp	r3, #2
 800095a:	dc25      	bgt.n	80009a8 <MRCC_voidEnableClock+0x68>
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <MRCC_voidEnableClock+0x26>
 8000960:	2b01      	cmp	r3, #1
 8000962:	d00b      	beq.n	800097c <MRCC_voidEnableClock+0x3c>
        }
    }
    else{
        /*return error*/
    }
}
 8000964:	e020      	b.n	80009a8 <MRCC_voidEnableClock+0x68>
            case RCC_AHB: SET_BIT(RCC_AHBENR,copy_uint32PeriId);     break;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MRCC_voidEnableClock+0x74>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2101      	movs	r1, #1
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	4611      	mov	r1, r2
 8000974:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MRCC_voidEnableClock+0x74>)
 8000976:	430b      	orrs	r3, r1
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	e015      	b.n	80009a8 <MRCC_voidEnableClock+0x68>
            case RCC_APB1: SET_BIT(RCC_APB1ENR,copy_uint32PeriId);     break;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MRCC_voidEnableClock+0x78>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	4611      	mov	r1, r2
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <MRCC_voidEnableClock+0x78>)
 800098c:	430b      	orrs	r3, r1
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e00a      	b.n	80009a8 <MRCC_voidEnableClock+0x68>
            case RCC_APB2: SET_BIT(RCC_APB2ENR,copy_uint32PeriId);     break;
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MRCC_voidEnableClock+0x7c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2101      	movs	r1, #1
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	4611      	mov	r1, r2
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <MRCC_voidEnableClock+0x7c>)
 80009a2:	430b      	orrs	r3, r1
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	bf00      	nop
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021014 	.word	0x40021014
 80009b8:	4002101c 	.word	0x4002101c
 80009bc:	40021018 	.word	0x40021018

080009c0 <MRCC_voidInitClock>:
    }
    else{
        /*return error*/
    }
}
void MRCC_voidInitClock(void){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
    #if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
    RCC_CR = 0x00010000;     //Enable HSE With Crystal no bybass
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MRCC_voidInitClock+0x38>)
 80009c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ca:	601a      	str	r2, [r3, #0]
    #endif 

    #if         SYSTEM_CLOCK_SOURCE == SYSTEM_CLOCK_HSI
                RCC_CFGR |= 0x00000000;
    #elif       SYSTEM_CLOCK_SOURCE == SYSTEM_CLOCK_HSE
                RCC_CFGR |= 0x00000001;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MRCC_voidInitClock+0x3c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <MRCC_voidInitClock+0x3c>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6013      	str	r3, [r2, #0]
                RCC_CFGR |= 0x00000003;
    #else 
                #error("You chosed wrong SYSTEM INPUT CLOCK")
    #endif
                /*SET APB1 , APB2, AHB PRESCALLERS*/
                RCC_CFGR |= ( RCC_AHB_PRESCALLER<< 4);
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MRCC_voidInitClock+0x3c>)
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <MRCC_voidInitClock+0x3c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6013      	str	r3, [r2, #0]
                RCC_CFGR |= ( RCC_APB1_PRESCALLER<< 8);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MRCC_voidInitClock+0x3c>)
 80009e2:	4a06      	ldr	r2, [pc, #24]	; (80009fc <MRCC_voidInitClock+0x3c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6013      	str	r3, [r2, #0]
                RCC_CFGR |= ( RCC_APB2_PRESCALLER<< 11);
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <MRCC_voidInitClock+0x3c>)
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <MRCC_voidInitClock+0x3c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40021004 	.word	0x40021004

08000a00 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
int state=0;
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	MRCC_voidInitClock();
 8000a04:	f7ff ffdc 	bl	80009c0 <MRCC_voidInitClock>
	MRCC_voidEnableClock(RCC_APB1,TIM2_EN);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff ff98 	bl	8000940 <MRCC_voidEnableClock>
	MTimer_voidInitInputCapture(TIMER_2,CHANNEL_1);
 8000a10:	2100      	movs	r1, #0
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fd6a 	bl	80004ec <MTimer_voidInitInputCapture>
	MTIMER_SetPwm_CH_DutyCycle(0x10,TIMER_3,CHANNEL_1);
	MTIMER_SetPwm_CH_DutyCycle(0x7F,TIMER_3,CHANNEL_2);
	MTIMER_SetPwm_CH_DutyCycle(0x10,TIMER_3,CHANNEL_3);
	MTIMER_SetPwm_CH_DutyCycle(0x7F,TIMER_3,CHANNEL_4);
	*/
				MRCC_voidInitClock();
 8000a18:	f7ff ffd2 	bl	80009c0 <MRCC_voidInitClock>
				MDIO_INIT(PORTA);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fba7 	bl	8000170 <MDIO_INIT>
				MSYSTICK_voidInit();
 8000a22:	f7ff ff4f 	bl	80008c4 <MSYSTICK_voidInit>
				MDIO_voidSetDirection(PORTA ,2 ,OUTPUT_10MHZ_PUSH_PULL);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2102      	movs	r1, #2
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fbb2 	bl	8000194 <MDIO_voidSetDirection>
	/*Loop forever */

	for(;;){
		//MSPI_uint32EnableTranceive(SPI_1,0X5555);

		MDIO_voidWrite_D_pin(PORTA , 2 ,HIGH);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2102      	movs	r1, #2
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fcdf 	bl	80003f8 <MDIO_voidWrite_D_pin>
		MYSYSTICK_voidSet_BusyWait(0x4C4B40);
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <main+0x54>)
 8000a3c:	f7ff ff56 	bl	80008ec <MYSYSTICK_voidSet_BusyWait>
        MDIO_voidWrite_D_pin(PORTA , 2 ,LOW);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fcd7 	bl	80003f8 <MDIO_voidWrite_D_pin>
		MYSYSTICK_voidSet_BusyWait(0x4C4B40);
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <main+0x54>)
 8000a4c:	f7ff ff4e 	bl	80008ec <MYSYSTICK_voidSet_BusyWait>
		MDIO_voidWrite_D_pin(PORTA , 2 ,HIGH);
 8000a50:	e7ee      	b.n	8000a30 <main+0x30>
 8000a52:	bf00      	nop
 8000a54:	004c4b40 	.word	0x004c4b40

08000a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a86:	f000 f811 	bl	8000aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8a:	f7ff ffb9 	bl	8000a00 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   r0, =_estack
 8000a90:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a9c:	08000b14 	.word	0x08000b14
  ldr r2, =_sbss
 8000aa0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000aa4:	20000020 	.word	0x20000020

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <__libc_init_array>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	2600      	movs	r6, #0
 8000ab0:	4d0c      	ldr	r5, [pc, #48]	; (8000ae4 <__libc_init_array+0x38>)
 8000ab2:	4c0d      	ldr	r4, [pc, #52]	; (8000ae8 <__libc_init_array+0x3c>)
 8000ab4:	1b64      	subs	r4, r4, r5
 8000ab6:	10a4      	asrs	r4, r4, #2
 8000ab8:	42a6      	cmp	r6, r4
 8000aba:	d109      	bne.n	8000ad0 <__libc_init_array+0x24>
 8000abc:	f000 f81a 	bl	8000af4 <_init>
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	4d0a      	ldr	r5, [pc, #40]	; (8000aec <__libc_init_array+0x40>)
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <__libc_init_array+0x44>)
 8000ac6:	1b64      	subs	r4, r4, r5
 8000ac8:	10a4      	asrs	r4, r4, #2
 8000aca:	42a6      	cmp	r6, r4
 8000acc:	d105      	bne.n	8000ada <__libc_init_array+0x2e>
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad4:	4798      	blx	r3
 8000ad6:	3601      	adds	r6, #1
 8000ad8:	e7ee      	b.n	8000ab8 <__libc_init_array+0xc>
 8000ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ade:	4798      	blx	r3
 8000ae0:	3601      	adds	r6, #1
 8000ae2:	e7f2      	b.n	8000aca <__libc_init_array+0x1e>
 8000ae4:	08000b0c 	.word	0x08000b0c
 8000ae8:	08000b0c 	.word	0x08000b0c
 8000aec:	08000b0c 	.word	0x08000b0c
 8000af0:	08000b10 	.word	0x08000b10

08000af4 <_init>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr

08000b00 <_fini>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr
